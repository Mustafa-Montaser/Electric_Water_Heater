
electric_water_heater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003736  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  00003736  000037ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  0080016a  0080016a  000038d4  2**0
                  ALLOC
  3 .stab         00004c38  00000000  00000000  000038d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000024ec  00000000  00000000  0000850c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f5  00000000  00000000  0000ab98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002216  00000000  00000000  0000ad8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012b8  00000000  00000000  0000cfa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001136  00000000  00000000  0000e25b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f394  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002d2  00000000  00000000  0000f554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000095a  00000000  00000000  0000f826  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010180  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__vector_1>
       8:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__vector_2>
       c:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 83 07 	jmp	0xf06	; 0xf06 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <main>
      8a:	0c 94 99 1b 	jmp	0x3732	; 0x3732 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 62 1b 	jmp	0x36c4	; 0x36c4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7e 1b 	jmp	0x36fc	; 0x36fc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6e 1b 	jmp	0x36dc	; 0x36dc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8a 1b 	jmp	0x3714	; 0x3714 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6e 1b 	jmp	0x36dc	; 0x36dc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8a 1b 	jmp	0x3714	; 0x3714 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 62 1b 	jmp	0x36c4	; 0x36c4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7e 1b 	jmp	0x36fc	; 0x36fc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6e 1b 	jmp	0x36dc	; 0x36dc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8a 1b 	jmp	0x3714	; 0x3714 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6e 1b 	jmp	0x36dc	; 0x36dc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8a 1b 	jmp	0x3714	; 0x3714 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6e 1b 	jmp	0x36dc	; 0x36dc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8a 1b 	jmp	0x3714	; 0x3714 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 87 1b 	jmp	0x370e	; 0x370e <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 72 1b 	jmp	0x36e4	; 0x36e4 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__epilogue_restores__+0x20>

000008b6 <__floatunsisf>:
     8b6:	a8 e0       	ldi	r26, 0x08	; 8
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e1 e6       	ldi	r30, 0x61	; 97
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
     8be:	0c 94 6a 1b 	jmp	0x36d4	; 0x36d4 <__prologue_saves__+0x10>
     8c2:	7b 01       	movw	r14, r22
     8c4:	8c 01       	movw	r16, r24
     8c6:	61 15       	cp	r22, r1
     8c8:	71 05       	cpc	r23, r1
     8ca:	81 05       	cpc	r24, r1
     8cc:	91 05       	cpc	r25, r1
     8ce:	19 f4       	brne	.+6      	; 0x8d6 <__floatunsisf+0x20>
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	60 c0       	rjmp	.+192    	; 0x996 <__floatunsisf+0xe0>
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	8e e1       	ldi	r24, 0x1E	; 30
     8dc:	c8 2e       	mov	r12, r24
     8de:	d1 2c       	mov	r13, r1
     8e0:	dc 82       	std	Y+4, r13	; 0x04
     8e2:	cb 82       	std	Y+3, r12	; 0x03
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 01       	movw	r24, r16
     8ee:	b7 01       	movw	r22, r14
     8f0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     8f4:	fc 01       	movw	r30, r24
     8f6:	31 97       	sbiw	r30, 0x01	; 1
     8f8:	f7 ff       	sbrs	r31, 7
     8fa:	3b c0       	rjmp	.+118    	; 0x972 <__floatunsisf+0xbc>
     8fc:	22 27       	eor	r18, r18
     8fe:	33 27       	eor	r19, r19
     900:	2e 1b       	sub	r18, r30
     902:	3f 0b       	sbc	r19, r31
     904:	57 01       	movw	r10, r14
     906:	68 01       	movw	r12, r16
     908:	02 2e       	mov	r0, r18
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__floatunsisf+0x5e>
     90c:	d6 94       	lsr	r13
     90e:	c7 94       	ror	r12
     910:	b7 94       	ror	r11
     912:	a7 94       	ror	r10
     914:	0a 94       	dec	r0
     916:	d2 f7       	brpl	.-12     	; 0x90c <__floatunsisf+0x56>
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e0       	ldi	r26, 0x00	; 0
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	04 c0       	rjmp	.+8      	; 0x932 <__floatunsisf+0x7c>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	aa 1f       	adc	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	2a 95       	dec	r18
     934:	d2 f7       	brpl	.-12     	; 0x92a <__floatunsisf+0x74>
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	a1 09       	sbc	r26, r1
     93a:	b1 09       	sbc	r27, r1
     93c:	8e 21       	and	r24, r14
     93e:	9f 21       	and	r25, r15
     940:	a0 23       	and	r26, r16
     942:	b1 23       	and	r27, r17
     944:	00 97       	sbiw	r24, 0x00	; 0
     946:	a1 05       	cpc	r26, r1
     948:	b1 05       	cpc	r27, r1
     94a:	21 f0       	breq	.+8      	; 0x954 <__floatunsisf+0x9e>
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	4a 29       	or	r20, r10
     956:	5b 29       	or	r21, r11
     958:	6c 29       	or	r22, r12
     95a:	7d 29       	or	r23, r13
     95c:	4d 83       	std	Y+5, r20	; 0x05
     95e:	5e 83       	std	Y+6, r21	; 0x06
     960:	6f 83       	std	Y+7, r22	; 0x07
     962:	78 87       	std	Y+8, r23	; 0x08
     964:	8e e1       	ldi	r24, 0x1E	; 30
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	8e 1b       	sub	r24, r30
     96a:	9f 0b       	sbc	r25, r31
     96c:	9c 83       	std	Y+4, r25	; 0x04
     96e:	8b 83       	std	Y+3, r24	; 0x03
     970:	12 c0       	rjmp	.+36     	; 0x996 <__floatunsisf+0xe0>
     972:	30 97       	sbiw	r30, 0x00	; 0
     974:	81 f0       	breq	.+32     	; 0x996 <__floatunsisf+0xe0>
     976:	0e 2e       	mov	r0, r30
     978:	04 c0       	rjmp	.+8      	; 0x982 <__floatunsisf+0xcc>
     97a:	ee 0c       	add	r14, r14
     97c:	ff 1c       	adc	r15, r15
     97e:	00 1f       	adc	r16, r16
     980:	11 1f       	adc	r17, r17
     982:	0a 94       	dec	r0
     984:	d2 f7       	brpl	.-12     	; 0x97a <__floatunsisf+0xc4>
     986:	ed 82       	std	Y+5, r14	; 0x05
     988:	fe 82       	std	Y+6, r15	; 0x06
     98a:	0f 83       	std	Y+7, r16	; 0x07
     98c:	18 87       	std	Y+8, r17	; 0x08
     98e:	ce 1a       	sub	r12, r30
     990:	df 0a       	sbc	r13, r31
     992:	dc 82       	std	Y+4, r13	; 0x04
     994:	cb 82       	std	Y+3, r12	; 0x03
     996:	1a 82       	std	Y+2, r1	; 0x02
     998:	ce 01       	movw	r24, r28
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     9a0:	28 96       	adiw	r28, 0x08	; 8
     9a2:	ea e0       	ldi	r30, 0x0A	; 10
     9a4:	0c 94 86 1b 	jmp	0x370c	; 0x370c <__epilogue_restores__+0x10>

000009a8 <__clzsi2>:
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	7b 01       	movw	r14, r22
     9b2:	8c 01       	movw	r16, r24
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	e8 16       	cp	r14, r24
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	f8 06       	cpc	r15, r24
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	08 07       	cpc	r16, r24
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	18 07       	cpc	r17, r24
     9c4:	88 f4       	brcc	.+34     	; 0x9e8 <__clzsi2+0x40>
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	e8 16       	cp	r14, r24
     9ca:	f1 04       	cpc	r15, r1
     9cc:	01 05       	cpc	r16, r1
     9ce:	11 05       	cpc	r17, r1
     9d0:	31 f0       	breq	.+12     	; 0x9de <__clzsi2+0x36>
     9d2:	28 f0       	brcs	.+10     	; 0x9de <__clzsi2+0x36>
     9d4:	88 e0       	ldi	r24, 0x08	; 8
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	a0 e0       	ldi	r26, 0x00	; 0
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	17 c0       	rjmp	.+46     	; 0xa0c <__clzsi2+0x64>
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	12 c0       	rjmp	.+36     	; 0xa0c <__clzsi2+0x64>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	e8 16       	cp	r14, r24
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	f8 06       	cpc	r15, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	08 07       	cpc	r16, r24
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	18 07       	cpc	r17, r24
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__clzsi2+0x5c>
     9fa:	88 e1       	ldi	r24, 0x18	; 24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__clzsi2+0x64>
     a04:	80 e1       	ldi	r24, 0x10	; 16
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	20 e2       	ldi	r18, 0x20	; 32
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	28 1b       	sub	r18, r24
     a16:	39 0b       	sbc	r19, r25
     a18:	4a 0b       	sbc	r20, r26
     a1a:	5b 0b       	sbc	r21, r27
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__clzsi2+0x7e>
     a1e:	16 95       	lsr	r17
     a20:	07 95       	ror	r16
     a22:	f7 94       	ror	r15
     a24:	e7 94       	ror	r14
     a26:	8a 95       	dec	r24
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__clzsi2+0x76>
     a2a:	f7 01       	movw	r30, r14
     a2c:	e8 59       	subi	r30, 0x98	; 152
     a2e:	ff 4f       	sbci	r31, 0xFF	; 255
     a30:	80 81       	ld	r24, Z
     a32:	28 1b       	sub	r18, r24
     a34:	31 09       	sbc	r19, r1
     a36:	41 09       	sbc	r20, r1
     a38:	51 09       	sbc	r21, r1
     a3a:	c9 01       	movw	r24, r18
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	08 95       	ret

00000a46 <__pack_f>:
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	fc 01       	movw	r30, r24
     a52:	e4 80       	ldd	r14, Z+4	; 0x04
     a54:	f5 80       	ldd	r15, Z+5	; 0x05
     a56:	06 81       	ldd	r16, Z+6	; 0x06
     a58:	17 81       	ldd	r17, Z+7	; 0x07
     a5a:	d1 80       	ldd	r13, Z+1	; 0x01
     a5c:	80 81       	ld	r24, Z
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	48 f4       	brcc	.+18     	; 0xa74 <__pack_f+0x2e>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	a0 e1       	ldi	r26, 0x10	; 16
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e8 2a       	or	r14, r24
     a6c:	f9 2a       	or	r15, r25
     a6e:	0a 2b       	or	r16, r26
     a70:	1b 2b       	or	r17, r27
     a72:	a5 c0       	rjmp	.+330    	; 0xbbe <__pack_f+0x178>
     a74:	84 30       	cpi	r24, 0x04	; 4
     a76:	09 f4       	brne	.+2      	; 0xa7a <__pack_f+0x34>
     a78:	9f c0       	rjmp	.+318    	; 0xbb8 <__pack_f+0x172>
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	21 f4       	brne	.+8      	; 0xa86 <__pack_f+0x40>
     a7e:	ee 24       	eor	r14, r14
     a80:	ff 24       	eor	r15, r15
     a82:	87 01       	movw	r16, r14
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <__pack_f+0x4a>
     a86:	e1 14       	cp	r14, r1
     a88:	f1 04       	cpc	r15, r1
     a8a:	01 05       	cpc	r16, r1
     a8c:	11 05       	cpc	r17, r1
     a8e:	19 f4       	brne	.+6      	; 0xa96 <__pack_f+0x50>
     a90:	e0 e0       	ldi	r30, 0x00	; 0
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	96 c0       	rjmp	.+300    	; 0xbc2 <__pack_f+0x17c>
     a96:	62 81       	ldd	r22, Z+2	; 0x02
     a98:	73 81       	ldd	r23, Z+3	; 0x03
     a9a:	9f ef       	ldi	r25, 0xFF	; 255
     a9c:	62 38       	cpi	r22, 0x82	; 130
     a9e:	79 07       	cpc	r23, r25
     aa0:	0c f0       	brlt	.+2      	; 0xaa4 <__pack_f+0x5e>
     aa2:	5b c0       	rjmp	.+182    	; 0xb5a <__pack_f+0x114>
     aa4:	22 e8       	ldi	r18, 0x82	; 130
     aa6:	3f ef       	ldi	r19, 0xFF	; 255
     aa8:	26 1b       	sub	r18, r22
     aaa:	37 0b       	sbc	r19, r23
     aac:	2a 31       	cpi	r18, 0x1A	; 26
     aae:	31 05       	cpc	r19, r1
     ab0:	2c f0       	brlt	.+10     	; 0xabc <__pack_f+0x76>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	2a c0       	rjmp	.+84     	; 0xb10 <__pack_f+0xca>
     abc:	b8 01       	movw	r22, r16
     abe:	a7 01       	movw	r20, r14
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__pack_f+0x86>
     ac4:	76 95       	lsr	r23
     ac6:	67 95       	ror	r22
     ac8:	57 95       	ror	r21
     aca:	47 95       	ror	r20
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__pack_f+0x7e>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <__pack_f+0x9c>
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	aa 1f       	adc	r26, r26
     ae0:	bb 1f       	adc	r27, r27
     ae2:	2a 95       	dec	r18
     ae4:	d2 f7       	brpl	.-12     	; 0xada <__pack_f+0x94>
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	a1 09       	sbc	r26, r1
     aea:	b1 09       	sbc	r27, r1
     aec:	8e 21       	and	r24, r14
     aee:	9f 21       	and	r25, r15
     af0:	a0 23       	and	r26, r16
     af2:	b1 23       	and	r27, r17
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	a1 05       	cpc	r26, r1
     af8:	b1 05       	cpc	r27, r1
     afa:	21 f0       	breq	.+8      	; 0xb04 <__pack_f+0xbe>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	9a 01       	movw	r18, r20
     b06:	ab 01       	movw	r20, r22
     b08:	28 2b       	or	r18, r24
     b0a:	39 2b       	or	r19, r25
     b0c:	4a 2b       	or	r20, r26
     b0e:	5b 2b       	or	r21, r27
     b10:	da 01       	movw	r26, r20
     b12:	c9 01       	movw	r24, r18
     b14:	8f 77       	andi	r24, 0x7F	; 127
     b16:	90 70       	andi	r25, 0x00	; 0
     b18:	a0 70       	andi	r26, 0x00	; 0
     b1a:	b0 70       	andi	r27, 0x00	; 0
     b1c:	80 34       	cpi	r24, 0x40	; 64
     b1e:	91 05       	cpc	r25, r1
     b20:	a1 05       	cpc	r26, r1
     b22:	b1 05       	cpc	r27, r1
     b24:	39 f4       	brne	.+14     	; 0xb34 <__pack_f+0xee>
     b26:	27 ff       	sbrs	r18, 7
     b28:	09 c0       	rjmp	.+18     	; 0xb3c <__pack_f+0xf6>
     b2a:	20 5c       	subi	r18, 0xC0	; 192
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	4f 4f       	sbci	r20, 0xFF	; 255
     b30:	5f 4f       	sbci	r21, 0xFF	; 255
     b32:	04 c0       	rjmp	.+8      	; 0xb3c <__pack_f+0xf6>
     b34:	21 5c       	subi	r18, 0xC1	; 193
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	4f 4f       	sbci	r20, 0xFF	; 255
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
     b3c:	e0 e0       	ldi	r30, 0x00	; 0
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	20 30       	cpi	r18, 0x00	; 0
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	3a 07       	cpc	r19, r26
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	4a 07       	cpc	r20, r26
     b4a:	a0 e4       	ldi	r26, 0x40	; 64
     b4c:	5a 07       	cpc	r21, r26
     b4e:	10 f0       	brcs	.+4      	; 0xb54 <__pack_f+0x10e>
     b50:	e1 e0       	ldi	r30, 0x01	; 1
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	79 01       	movw	r14, r18
     b56:	8a 01       	movw	r16, r20
     b58:	27 c0       	rjmp	.+78     	; 0xba8 <__pack_f+0x162>
     b5a:	60 38       	cpi	r22, 0x80	; 128
     b5c:	71 05       	cpc	r23, r1
     b5e:	64 f5       	brge	.+88     	; 0xbb8 <__pack_f+0x172>
     b60:	fb 01       	movw	r30, r22
     b62:	e1 58       	subi	r30, 0x81	; 129
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	d8 01       	movw	r26, r16
     b68:	c7 01       	movw	r24, r14
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0x144>
     b7c:	e7 fe       	sbrs	r14, 7
     b7e:	0d c0       	rjmp	.+26     	; 0xb9a <__pack_f+0x154>
     b80:	80 e4       	ldi	r24, 0x40	; 64
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x14c>
     b8a:	8f e3       	ldi	r24, 0x3F	; 63
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	a0 e0       	ldi	r26, 0x00	; 0
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e8 0e       	add	r14, r24
     b94:	f9 1e       	adc	r15, r25
     b96:	0a 1f       	adc	r16, r26
     b98:	1b 1f       	adc	r17, r27
     b9a:	17 ff       	sbrs	r17, 7
     b9c:	05 c0       	rjmp	.+10     	; 0xba8 <__pack_f+0x162>
     b9e:	16 95       	lsr	r17
     ba0:	07 95       	ror	r16
     ba2:	f7 94       	ror	r15
     ba4:	e7 94       	ror	r14
     ba6:	31 96       	adiw	r30, 0x01	; 1
     ba8:	87 e0       	ldi	r24, 0x07	; 7
     baa:	16 95       	lsr	r17
     bac:	07 95       	ror	r16
     bae:	f7 94       	ror	r15
     bb0:	e7 94       	ror	r14
     bb2:	8a 95       	dec	r24
     bb4:	d1 f7       	brne	.-12     	; 0xbaa <__pack_f+0x164>
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__pack_f+0x17c>
     bb8:	ee 24       	eor	r14, r14
     bba:	ff 24       	eor	r15, r15
     bbc:	87 01       	movw	r16, r14
     bbe:	ef ef       	ldi	r30, 0xFF	; 255
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	6e 2f       	mov	r22, r30
     bc4:	67 95       	ror	r22
     bc6:	66 27       	eor	r22, r22
     bc8:	67 95       	ror	r22
     bca:	90 2f       	mov	r25, r16
     bcc:	9f 77       	andi	r25, 0x7F	; 127
     bce:	d7 94       	ror	r13
     bd0:	dd 24       	eor	r13, r13
     bd2:	d7 94       	ror	r13
     bd4:	8e 2f       	mov	r24, r30
     bd6:	86 95       	lsr	r24
     bd8:	49 2f       	mov	r20, r25
     bda:	46 2b       	or	r20, r22
     bdc:	58 2f       	mov	r21, r24
     bde:	5d 29       	or	r21, r13
     be0:	b7 01       	movw	r22, r14
     be2:	ca 01       	movw	r24, r20
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	08 95       	ret

00000bf0 <__unpack_f>:
     bf0:	fc 01       	movw	r30, r24
     bf2:	db 01       	movw	r26, r22
     bf4:	40 81       	ld	r20, Z
     bf6:	51 81       	ldd	r21, Z+1	; 0x01
     bf8:	22 81       	ldd	r18, Z+2	; 0x02
     bfa:	62 2f       	mov	r22, r18
     bfc:	6f 77       	andi	r22, 0x7F	; 127
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	22 1f       	adc	r18, r18
     c02:	22 27       	eor	r18, r18
     c04:	22 1f       	adc	r18, r18
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	89 2f       	mov	r24, r25
     c0a:	88 0f       	add	r24, r24
     c0c:	82 2b       	or	r24, r18
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	99 1f       	adc	r25, r25
     c14:	99 27       	eor	r25, r25
     c16:	99 1f       	adc	r25, r25
     c18:	11 96       	adiw	r26, 0x01	; 1
     c1a:	9c 93       	st	X, r25
     c1c:	11 97       	sbiw	r26, 0x01	; 1
     c1e:	21 15       	cp	r18, r1
     c20:	31 05       	cpc	r19, r1
     c22:	a9 f5       	brne	.+106    	; 0xc8e <__unpack_f+0x9e>
     c24:	41 15       	cp	r20, r1
     c26:	51 05       	cpc	r21, r1
     c28:	61 05       	cpc	r22, r1
     c2a:	71 05       	cpc	r23, r1
     c2c:	11 f4       	brne	.+4      	; 0xc32 <__unpack_f+0x42>
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	37 c0       	rjmp	.+110    	; 0xca0 <__unpack_f+0xb0>
     c32:	82 e8       	ldi	r24, 0x82	; 130
     c34:	9f ef       	ldi	r25, 0xFF	; 255
     c36:	13 96       	adiw	r26, 0x03	; 3
     c38:	9c 93       	st	X, r25
     c3a:	8e 93       	st	-X, r24
     c3c:	12 97       	sbiw	r26, 0x02	; 2
     c3e:	9a 01       	movw	r18, r20
     c40:	ab 01       	movw	r20, r22
     c42:	67 e0       	ldi	r22, 0x07	; 7
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	44 1f       	adc	r20, r20
     c4a:	55 1f       	adc	r21, r21
     c4c:	6a 95       	dec	r22
     c4e:	d1 f7       	brne	.-12     	; 0xc44 <__unpack_f+0x54>
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	8c 93       	st	X, r24
     c54:	0d c0       	rjmp	.+26     	; 0xc70 <__unpack_f+0x80>
     c56:	22 0f       	add	r18, r18
     c58:	33 1f       	adc	r19, r19
     c5a:	44 1f       	adc	r20, r20
     c5c:	55 1f       	adc	r21, r21
     c5e:	12 96       	adiw	r26, 0x02	; 2
     c60:	8d 91       	ld	r24, X+
     c62:	9c 91       	ld	r25, X
     c64:	13 97       	sbiw	r26, 0x03	; 3
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	13 96       	adiw	r26, 0x03	; 3
     c6a:	9c 93       	st	X, r25
     c6c:	8e 93       	st	-X, r24
     c6e:	12 97       	sbiw	r26, 0x02	; 2
     c70:	20 30       	cpi	r18, 0x00	; 0
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	38 07       	cpc	r19, r24
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	48 07       	cpc	r20, r24
     c7a:	80 e4       	ldi	r24, 0x40	; 64
     c7c:	58 07       	cpc	r21, r24
     c7e:	58 f3       	brcs	.-42     	; 0xc56 <__unpack_f+0x66>
     c80:	14 96       	adiw	r26, 0x04	; 4
     c82:	2d 93       	st	X+, r18
     c84:	3d 93       	st	X+, r19
     c86:	4d 93       	st	X+, r20
     c88:	5c 93       	st	X, r21
     c8a:	17 97       	sbiw	r26, 0x07	; 7
     c8c:	08 95       	ret
     c8e:	2f 3f       	cpi	r18, 0xFF	; 255
     c90:	31 05       	cpc	r19, r1
     c92:	79 f4       	brne	.+30     	; 0xcb2 <__unpack_f+0xc2>
     c94:	41 15       	cp	r20, r1
     c96:	51 05       	cpc	r21, r1
     c98:	61 05       	cpc	r22, r1
     c9a:	71 05       	cpc	r23, r1
     c9c:	19 f4       	brne	.+6      	; 0xca4 <__unpack_f+0xb4>
     c9e:	84 e0       	ldi	r24, 0x04	; 4
     ca0:	8c 93       	st	X, r24
     ca2:	08 95       	ret
     ca4:	64 ff       	sbrs	r22, 4
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <__unpack_f+0xbe>
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	8c 93       	st	X, r24
     cac:	12 c0       	rjmp	.+36     	; 0xcd2 <__unpack_f+0xe2>
     cae:	1c 92       	st	X, r1
     cb0:	10 c0       	rjmp	.+32     	; 0xcd2 <__unpack_f+0xe2>
     cb2:	2f 57       	subi	r18, 0x7F	; 127
     cb4:	30 40       	sbci	r19, 0x00	; 0
     cb6:	13 96       	adiw	r26, 0x03	; 3
     cb8:	3c 93       	st	X, r19
     cba:	2e 93       	st	-X, r18
     cbc:	12 97       	sbiw	r26, 0x02	; 2
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	8c 93       	st	X, r24
     cc2:	87 e0       	ldi	r24, 0x07	; 7
     cc4:	44 0f       	add	r20, r20
     cc6:	55 1f       	adc	r21, r21
     cc8:	66 1f       	adc	r22, r22
     cca:	77 1f       	adc	r23, r23
     ccc:	8a 95       	dec	r24
     cce:	d1 f7       	brne	.-12     	; 0xcc4 <__unpack_f+0xd4>
     cd0:	70 64       	ori	r23, 0x40	; 64
     cd2:	14 96       	adiw	r26, 0x04	; 4
     cd4:	4d 93       	st	X+, r20
     cd6:	5d 93       	st	X+, r21
     cd8:	6d 93       	st	X+, r22
     cda:	7c 93       	st	X, r23
     cdc:	17 97       	sbiw	r26, 0x07	; 7
     cde:	08 95       	ret

00000ce0 <__fpcmp_parts_f>:
     ce0:	1f 93       	push	r17
     ce2:	dc 01       	movw	r26, r24
     ce4:	fb 01       	movw	r30, r22
     ce6:	9c 91       	ld	r25, X
     ce8:	92 30       	cpi	r25, 0x02	; 2
     cea:	08 f4       	brcc	.+2      	; 0xcee <__fpcmp_parts_f+0xe>
     cec:	47 c0       	rjmp	.+142    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cee:	80 81       	ld	r24, Z
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <__fpcmp_parts_f+0x16>
     cf4:	43 c0       	rjmp	.+134    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cf6:	94 30       	cpi	r25, 0x04	; 4
     cf8:	51 f4       	brne	.+20     	; 0xd0e <__fpcmp_parts_f+0x2e>
     cfa:	11 96       	adiw	r26, 0x01	; 1
     cfc:	1c 91       	ld	r17, X
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	99 f5       	brne	.+102    	; 0xd68 <__fpcmp_parts_f+0x88>
     d02:	81 81       	ldd	r24, Z+1	; 0x01
     d04:	68 2f       	mov	r22, r24
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	61 1b       	sub	r22, r17
     d0a:	71 09       	sbc	r23, r1
     d0c:	3f c0       	rjmp	.+126    	; 0xd8c <__fpcmp_parts_f+0xac>
     d0e:	84 30       	cpi	r24, 0x04	; 4
     d10:	21 f0       	breq	.+8      	; 0xd1a <__fpcmp_parts_f+0x3a>
     d12:	92 30       	cpi	r25, 0x02	; 2
     d14:	31 f4       	brne	.+12     	; 0xd22 <__fpcmp_parts_f+0x42>
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	b9 f1       	breq	.+110    	; 0xd88 <__fpcmp_parts_f+0xa8>
     d1a:	81 81       	ldd	r24, Z+1	; 0x01
     d1c:	88 23       	and	r24, r24
     d1e:	89 f1       	breq	.+98     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d20:	2d c0       	rjmp	.+90     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	1c 91       	ld	r17, X
     d26:	11 97       	sbiw	r26, 0x01	; 1
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	f1 f0       	breq	.+60     	; 0xd68 <__fpcmp_parts_f+0x88>
     d2c:	81 81       	ldd	r24, Z+1	; 0x01
     d2e:	18 17       	cp	r17, r24
     d30:	d9 f4       	brne	.+54     	; 0xd68 <__fpcmp_parts_f+0x88>
     d32:	12 96       	adiw	r26, 0x02	; 2
     d34:	2d 91       	ld	r18, X+
     d36:	3c 91       	ld	r19, X
     d38:	13 97       	sbiw	r26, 0x03	; 3
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	82 17       	cp	r24, r18
     d40:	93 07       	cpc	r25, r19
     d42:	94 f0       	brlt	.+36     	; 0xd68 <__fpcmp_parts_f+0x88>
     d44:	28 17       	cp	r18, r24
     d46:	39 07       	cpc	r19, r25
     d48:	bc f0       	brlt	.+46     	; 0xd78 <__fpcmp_parts_f+0x98>
     d4a:	14 96       	adiw	r26, 0x04	; 4
     d4c:	8d 91       	ld	r24, X+
     d4e:	9d 91       	ld	r25, X+
     d50:	0d 90       	ld	r0, X+
     d52:	bc 91       	ld	r27, X
     d54:	a0 2d       	mov	r26, r0
     d56:	24 81       	ldd	r18, Z+4	; 0x04
     d58:	35 81       	ldd	r19, Z+5	; 0x05
     d5a:	46 81       	ldd	r20, Z+6	; 0x06
     d5c:	57 81       	ldd	r21, Z+7	; 0x07
     d5e:	28 17       	cp	r18, r24
     d60:	39 07       	cpc	r19, r25
     d62:	4a 07       	cpc	r20, r26
     d64:	5b 07       	cpc	r21, r27
     d66:	18 f4       	brcc	.+6      	; 0xd6e <__fpcmp_parts_f+0x8e>
     d68:	11 23       	and	r17, r17
     d6a:	41 f0       	breq	.+16     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d6c:	0a c0       	rjmp	.+20     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d6e:	82 17       	cp	r24, r18
     d70:	93 07       	cpc	r25, r19
     d72:	a4 07       	cpc	r26, r20
     d74:	b5 07       	cpc	r27, r21
     d76:	40 f4       	brcc	.+16     	; 0xd88 <__fpcmp_parts_f+0xa8>
     d78:	11 23       	and	r17, r17
     d7a:	19 f0       	breq	.+6      	; 0xd82 <__fpcmp_parts_f+0xa2>
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <__fpcmp_parts_f+0xac>
     d82:	6f ef       	ldi	r22, 0xFF	; 255
     d84:	7f ef       	ldi	r23, 0xFF	; 255
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <__fpcmp_parts_f+0xac>
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	cb 01       	movw	r24, r22
     d8e:	1f 91       	pop	r17
     d90:	08 95       	ret

00000d92 <Timer0_voidInit>:



#if ((TIMER0_WAVEFORM_MODE == TIMER0_WAVEFORM_NORMAL_MODE) || (TIMER0_WAVEFORM_MODE == TIMER0_WAVEFORM_CTC_MODE))

	void Timer0_voidInit() {
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
		/* waveform generation setting */
		#if TIMER0_WAVEFORM_MODE == TIMER0_WAVEFORM_NORMAL_MODE
			CLR_BIT(TIMER0_TCCR0, TIMER0_TCCR0_WGM00);
     d9a:	a3 e5       	ldi	r26, 0x53	; 83
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e3 e5       	ldi	r30, 0x53	; 83
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	8f 7b       	andi	r24, 0xBF	; 191
     da6:	8c 93       	st	X, r24
			CLR_BIT(TIMER0_TCCR0, TIMER0_TCCR0_WGM01);
     da8:	a3 e5       	ldi	r26, 0x53	; 83
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e3 e5       	ldi	r30, 0x53	; 83
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	87 7f       	andi	r24, 0xF7	; 247
     db4:	8c 93       	st	X, r24
			SET_BIT(TIMER0_TCCR0, TIMER0_TCCR0_WGM01);
		#endif
	
		/* Enable  Timer0 Interrupt */
		#if TIMER0_WAVEFORM_MODE == TIMER0_WAVEFORM_NORMAL_MODE
			SET_BIT(TIMER0_TIMSK, TIMER0_TIMSK_TOIE0);
     db6:	a9 e5       	ldi	r26, 0x59	; 89
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e9 e5       	ldi	r30, 0x59	; 89
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	81 60       	ori	r24, 0x01	; 1
     dc2:	8c 93       	st	X, r24
		#elif TIMER0_WAVEFORM_MODE == TIMER0_WAVEFORM_CTC_MODE
			SET_BIT(TIMER0_TIMSK, TIMER0_TIMSK_OCIE0);
		#endif
	}
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	08 95       	ret

00000dca <Timer0_voidSetTime>:



	void Timer0_voidSetTime(u32 copy_u8Time) {
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	2c 97       	sbiw	r28, 0x0c	; 12
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	69 87       	std	Y+9, r22	; 0x09
     de0:	7a 87       	std	Y+10, r23	; 0x0a
     de2:	8b 87       	std	Y+11, r24	; 0x0b
     de4:	9c 87       	std	Y+12, r25	; 0x0c
		/* Calc. Tick Time = (1 * prescaler) / F_OSC */
		u32 local_u32TickTime = 0;
     de6:	1d 82       	std	Y+5, r1	; 0x05
     de8:	1e 82       	std	Y+6, r1	; 0x06
     dea:	1f 82       	std	Y+7, r1	; 0x07
     dec:	18 86       	std	Y+8, r1	; 0x08
		#elif TIMER0_PRESCALER == TIMER0_PRESCALER_64
			local_u32TickTime = 64 / TIMER0_F_OSC;
		#elif TIMER0_PRESCALER == TIMER0_PRESCALER_256
			local_u32TickTime = 256 / TIMER0_F_OSC;
		#elif TIMER0_PRESCALER == TIMER0_PRESCALER_1024
			local_u32TickTime = 1024 / TIMER0_F_OSC;
     dee:	80 e4       	ldi	r24, 0x40	; 64
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	a0 e0       	ldi	r26, 0x00	; 0
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	8d 83       	std	Y+5, r24	; 0x05
     df8:	9e 83       	std	Y+6, r25	; 0x06
     dfa:	af 83       	std	Y+7, r26	; 0x07
     dfc:	b8 87       	std	Y+8, r27	; 0x08
		#endif
	
		#if TIMER0_WAVEFORM_MODE == TIMER0_WAVEFORM_NORMAL_MODE
			u32 local_u32TotalNumOfTicks = (copy_u8Time * 1000) / local_u32TickTime;
     dfe:	89 85       	ldd	r24, Y+9	; 0x09
     e00:	9a 85       	ldd	r25, Y+10	; 0x0a
     e02:	ab 85       	ldd	r26, Y+11	; 0x0b
     e04:	bc 85       	ldd	r27, Y+12	; 0x0c
     e06:	28 ee       	ldi	r18, 0xE8	; 232
     e08:	33 e0       	ldi	r19, 0x03	; 3
     e0a:	40 e0       	ldi	r20, 0x00	; 0
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	bc 01       	movw	r22, r24
     e10:	cd 01       	movw	r24, r26
     e12:	0e 94 01 1b 	call	0x3602	; 0x3602 <__mulsi3>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	2d 81       	ldd	r18, Y+5	; 0x05
     e1c:	3e 81       	ldd	r19, Y+6	; 0x06
     e1e:	4f 81       	ldd	r20, Y+7	; 0x07
     e20:	58 85       	ldd	r21, Y+8	; 0x08
     e22:	bc 01       	movw	r22, r24
     e24:	cd 01       	movw	r24, r26
     e26:	0e 94 40 1b 	call	0x3680	; 0x3680 <__udivmodsi4>
     e2a:	da 01       	movw	r26, r20
     e2c:	c9 01       	movw	r24, r18
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	9a 83       	std	Y+2, r25	; 0x02
     e32:	ab 83       	std	Y+3, r26	; 0x03
     e34:	bc 83       	std	Y+4, r27	; 0x04
			Timer0_u32NumOfOverflows = local_u32TotalNumOfTicks / 256;
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	9a 81       	ldd	r25, Y+2	; 0x02
     e3a:	ab 81       	ldd	r26, Y+3	; 0x03
     e3c:	bc 81       	ldd	r27, Y+4	; 0x04
     e3e:	89 2f       	mov	r24, r25
     e40:	9a 2f       	mov	r25, r26
     e42:	ab 2f       	mov	r26, r27
     e44:	bb 27       	eor	r27, r27
     e46:	80 93 6a 01 	sts	0x016A, r24
     e4a:	90 93 6b 01 	sts	0x016B, r25
     e4e:	a0 93 6c 01 	sts	0x016C, r26
     e52:	b0 93 6d 01 	sts	0x016D, r27
			Timer0_u8NumOfReminderTicks = local_u32TotalNumOfTicks % 256;
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	80 93 6e 01 	sts	0x016E, r24
			if(Timer0_u8NumOfReminderTicks != 0) {
     e5c:	80 91 6e 01 	lds	r24, 0x016E
     e60:	88 23       	and	r24, r24
     e62:	c9 f0       	breq	.+50     	; 0xe96 <Timer0_voidSetTime+0xcc>
				TIMER0_TCNT0 = 256 - Timer0_u8NumOfReminderTicks;
     e64:	e2 e5       	ldi	r30, 0x52	; 82
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 91 6e 01 	lds	r24, 0x016E
     e6c:	81 95       	neg	r24
     e6e:	80 83       	st	Z, r24
				Timer0_u32NumOfOverflows++;
     e70:	80 91 6a 01 	lds	r24, 0x016A
     e74:	90 91 6b 01 	lds	r25, 0x016B
     e78:	a0 91 6c 01 	lds	r26, 0x016C
     e7c:	b0 91 6d 01 	lds	r27, 0x016D
     e80:	01 96       	adiw	r24, 0x01	; 1
     e82:	a1 1d       	adc	r26, r1
     e84:	b1 1d       	adc	r27, r1
     e86:	80 93 6a 01 	sts	0x016A, r24
     e8a:	90 93 6b 01 	sts	0x016B, r25
     e8e:	a0 93 6c 01 	sts	0x016C, r26
     e92:	b0 93 6d 01 	sts	0x016D, r27
				local_u8DivisionFactor --;
			}
			Timer0_u8NumOfCompMatch = local_u32TotalNumOfTicks / local_u8DivisionFactor;
			TIMER0_OCR0 = local_u8DivisionFactor - 1;
		#endif
	}
     e96:	2c 96       	adiw	r28, 0x0c	; 12
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <Timer0_voidStart>:

#endif /* Normal and CTC mode */



void Timer0_voidStart() {
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
	WRT_3BITS(TIMER0_TCCR0, TIMER0_TCCR0_CS00, TIMER0_PRESCALER);
     eb0:	a3 e5       	ldi	r26, 0x53	; 83
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e3 e5       	ldi	r30, 0x53	; 83
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	88 7f       	andi	r24, 0xF8	; 248
     ebc:	85 60       	ori	r24, 0x05	; 5
     ebe:	8c 93       	st	X, r24
}
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <Timer0_voidStop>:



void Timer0_voidStop() {
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
	WRT_3BITS(TIMER0_TCCR0, TIMER0_TCCR0_CS00, TIMER0_STOP_PRESCALER);
     ece:	a3 e5       	ldi	r26, 0x53	; 83
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e3 e5       	ldi	r30, 0x53	; 83
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	88 7f       	andi	r24, 0xF8	; 248
     eda:	8c 93       	st	X, r24
}
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <Timer0_voidSetCallBack>:



void (*Timer0CallBack) (void) = NULL;

void Timer0_voidSetCallBack(void (*ptr) (void)) { Timer0CallBack = ptr; }
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <Timer0_voidSetCallBack+0x6>
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	9a 83       	std	Y+2, r25	; 0x02
     eee:	89 83       	std	Y+1, r24	; 0x01
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	9a 81       	ldd	r25, Y+2	; 0x02
     ef4:	90 93 78 01 	sts	0x0178, r25
     ef8:	80 93 77 01 	sts	0x0177, r24
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <__vector_11>:


#if TIMER0_WAVEFORM_MODE == TIMER0_WAVEFORM_NORMAL_MODE
	
ISR(TIMER0_OVF_vect) {
     f06:	1f 92       	push	r1
     f08:	0f 92       	push	r0
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	0f 92       	push	r0
     f0e:	11 24       	eor	r1, r1
     f10:	2f 93       	push	r18
     f12:	3f 93       	push	r19
     f14:	4f 93       	push	r20
     f16:	5f 93       	push	r21
     f18:	6f 93       	push	r22
     f1a:	7f 93       	push	r23
     f1c:	8f 93       	push	r24
     f1e:	9f 93       	push	r25
     f20:	af 93       	push	r26
     f22:	bf 93       	push	r27
     f24:	ef 93       	push	r30
     f26:	ff 93       	push	r31
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
	Timer0_u32IntCounter++;
     f30:	80 91 6f 01 	lds	r24, 0x016F
     f34:	90 91 70 01 	lds	r25, 0x0170
     f38:	a0 91 71 01 	lds	r26, 0x0171
     f3c:	b0 91 72 01 	lds	r27, 0x0172
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	a1 1d       	adc	r26, r1
     f44:	b1 1d       	adc	r27, r1
     f46:	80 93 6f 01 	sts	0x016F, r24
     f4a:	90 93 70 01 	sts	0x0170, r25
     f4e:	a0 93 71 01 	sts	0x0171, r26
     f52:	b0 93 72 01 	sts	0x0172, r27
	if(Timer0_u32IntCounter == Timer0_u32NumOfOverflows) {
     f56:	20 91 6f 01 	lds	r18, 0x016F
     f5a:	30 91 70 01 	lds	r19, 0x0170
     f5e:	40 91 71 01 	lds	r20, 0x0171
     f62:	50 91 72 01 	lds	r21, 0x0172
     f66:	80 91 6a 01 	lds	r24, 0x016A
     f6a:	90 91 6b 01 	lds	r25, 0x016B
     f6e:	a0 91 6c 01 	lds	r26, 0x016C
     f72:	b0 91 6d 01 	lds	r27, 0x016D
     f76:	28 17       	cp	r18, r24
     f78:	39 07       	cpc	r19, r25
     f7a:	4a 07       	cpc	r20, r26
     f7c:	5b 07       	cpc	r21, r27
     f7e:	99 f4       	brne	.+38     	; 0xfa6 <__vector_11+0xa0>
		Timer0CallBack();
     f80:	e0 91 77 01 	lds	r30, 0x0177
     f84:	f0 91 78 01 	lds	r31, 0x0178
     f88:	09 95       	icall
		Timer0_u32IntCounter = 0;
     f8a:	10 92 6f 01 	sts	0x016F, r1
     f8e:	10 92 70 01 	sts	0x0170, r1
     f92:	10 92 71 01 	sts	0x0171, r1
     f96:	10 92 72 01 	sts	0x0172, r1
		TIMER0_TCNT0 = 256 - Timer0_u8NumOfReminderTicks;
     f9a:	e2 e5       	ldi	r30, 0x52	; 82
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 91 6e 01 	lds	r24, 0x016E
     fa2:	81 95       	neg	r24
     fa4:	80 83       	st	Z, r24
	}
}
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	0f 90       	pop	r0
     fc8:	1f 90       	pop	r1
     fca:	18 95       	reti

00000fcc <IIC_voidInit>:


/* functions definition */


void IIC_voidInit(void) {
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62

	/* F_SCL Setting */
	#if IIC_OPERATION_MODE == IIC_MASTER_MODE
		if(((F_OSC_HZ - (16 * IIC_F_SCL_HZ)) / (2 * IIC_F_SCL_HZ * 1)) <= 255) {
			IIC_TWBR = (F_OSC_HZ - (16 * IIC_F_SCL_HZ)) / (2 * IIC_F_SCL_HZ * 1);
     fd4:	e0 e2       	ldi	r30, 0x20	; 32
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	8c e0       	ldi	r24, 0x0C	; 12
     fda:	80 83       	st	Z, r24
			WRT_2BITS(IIC_TWSR, IIC_TWSR_TWPS0, IIC_BIT_RATE_PRESCALER_1);
     fdc:	a1 e2       	ldi	r26, 0x21	; 33
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e1 e2       	ldi	r30, 0x21	; 33
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8c 7f       	andi	r24, 0xFC	; 252
     fe8:	8c 93       	st	X, r24
			WRT_2BITS(IIC_TWSR, IIC_TWSR_TWPS0, IIC_BIT_RATE_PRESCALER_64);
		}
	#endif

	/* IIC Enable Acknowledge Bit */
	SET_BIT(IIC_TWCR, IIC_TWCR_TWEA);
     fea:	a6 e5       	ldi	r26, 0x56	; 86
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e6 e5       	ldi	r30, 0x56	; 86
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	80 64       	ori	r24, 0x40	; 64
     ff6:	8c 93       	st	X, r24

	/* Write Slave Address [For This Device] */
	IIC_TWAR = IIC_SLAVE_ADDRESS << 1;
     ff8:	e2 e2       	ldi	r30, 0x22	; 34
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	8a e0       	ldi	r24, 0x0A	; 10
     ffe:	80 83       	st	Z, r24

	/* Listen To General Call State */
	WRT_BIT(IIC_TWAR, IIC_TWAR_TWGCE, IIC_LISTEN_GENERAL_CALL);
    1000:	a2 e2       	ldi	r26, 0x22	; 34
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e2 e2       	ldi	r30, 0x22	; 34
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	81 60       	ori	r24, 0x01	; 1
    100c:	8c 93       	st	X, r24

	/* Clear The Flag ( with [SET] ) */
//	SET_BIT(IIC_TWCR, IIC_TWCR_TWINT);

	/* IIC Enable */
	SET_BIT(IIC_TWCR, IIC_TWCR_TWEN);
    100e:	a6 e5       	ldi	r26, 0x56	; 86
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e6 e5       	ldi	r30, 0x56	; 86
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	84 60       	ori	r24, 0x04	; 4
    101a:	8c 93       	st	X, r24

}
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <IIC_enumStartCondition>:



IIC_State_t IIC_enumStartCondition(void) {
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	00 d0       	rcall	.+0      	; 0x1028 <IIC_enumStartCondition+0x6>
    1028:	00 d0       	rcall	.+0      	; 0x102a <IIC_enumStartCondition+0x8>
    102a:	0f 92       	push	r0
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62

	IIC_State_t local_enumState = IIC_NOK;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	8d 83       	std	Y+5, r24	; 0x05

	/* Start Condition */
	SET_BIT(IIC_TWCR, IIC_TWCR_TWSTA);
    1034:	a6 e5       	ldi	r26, 0x56	; 86
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e6 e5       	ldi	r30, 0x56	; 86
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	80 62       	ori	r24, 0x20	; 32
    1040:	8c 93       	st	X, r24

	/* Clear The Flag ( with [SET] ) */
	SET_BIT(IIC_TWCR, IIC_TWCR_TWINT);
    1042:	a6 e5       	ldi	r26, 0x56	; 86
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e6 e5       	ldi	r30, 0x56	; 86
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	80 68       	ori	r24, 0x80	; 128
    104e:	8c 93       	st	X, r24

	/* Waiting till Job Is Done [Start Condition] */
	u32 local_u32Loop = 0;
    1050:	19 82       	std	Y+1, r1	; 0x01
    1052:	1a 82       	std	Y+2, r1	; 0x02
    1054:	1b 82       	std	Y+3, r1	; 0x03
    1056:	1c 82       	std	Y+4, r1	; 0x04
    1058:	0b c0       	rjmp	.+22     	; 0x1070 <IIC_enumStartCondition+0x4e>
	while(GET_BIT(IIC_TWCR, IIC_TWCR_TWINT) == 0 && local_u32Loop < IIC_TIMEOUT) {
		local_u32Loop++;
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	9a 81       	ldd	r25, Y+2	; 0x02
    105e:	ab 81       	ldd	r26, Y+3	; 0x03
    1060:	bc 81       	ldd	r27, Y+4	; 0x04
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	a1 1d       	adc	r26, r1
    1066:	b1 1d       	adc	r27, r1
    1068:	89 83       	std	Y+1, r24	; 0x01
    106a:	9a 83       	std	Y+2, r25	; 0x02
    106c:	ab 83       	std	Y+3, r26	; 0x03
    106e:	bc 83       	std	Y+4, r27	; 0x04
	/* Clear The Flag ( with [SET] ) */
	SET_BIT(IIC_TWCR, IIC_TWCR_TWINT);

	/* Waiting till Job Is Done [Start Condition] */
	u32 local_u32Loop = 0;
	while(GET_BIT(IIC_TWCR, IIC_TWCR_TWINT) == 0 && local_u32Loop < IIC_TIMEOUT) {
    1070:	e6 e5       	ldi	r30, 0x56	; 86
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	88 23       	and	r24, r24
    1078:	64 f0       	brlt	.+24     	; 0x1092 <IIC_enumStartCondition+0x70>
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	9a 81       	ldd	r25, Y+2	; 0x02
    107e:	ab 81       	ldd	r26, Y+3	; 0x03
    1080:	bc 81       	ldd	r27, Y+4	; 0x04
    1082:	80 30       	cpi	r24, 0x00	; 0
    1084:	24 e2       	ldi	r18, 0x24	; 36
    1086:	92 07       	cpc	r25, r18
    1088:	24 ef       	ldi	r18, 0xF4	; 244
    108a:	a2 07       	cpc	r26, r18
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	b2 07       	cpc	r27, r18
    1090:	20 f3       	brcs	.-56     	; 0x105a <IIC_enumStartCondition+0x38>
		local_u32Loop++;
	}

	if(local_u32Loop >= IIC_TIMEOUT) {
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
    1096:	ab 81       	ldd	r26, Y+3	; 0x03
    1098:	bc 81       	ldd	r27, Y+4	; 0x04
    109a:	80 30       	cpi	r24, 0x00	; 0
    109c:	24 e2       	ldi	r18, 0x24	; 36
    109e:	92 07       	cpc	r25, r18
    10a0:	24 ef       	ldi	r18, 0xF4	; 244
    10a2:	a2 07       	cpc	r26, r18
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	b2 07       	cpc	r27, r18
    10a8:	18 f0       	brcs	.+6      	; 0x10b0 <IIC_enumStartCondition+0x8e>
		local_enumState = IIC_TIMEOUT_ERR;
    10aa:	80 e1       	ldi	r24, 0x10	; 16
    10ac:	8d 83       	std	Y+5, r24	; 0x05
    10ae:	0e c0       	rjmp	.+28     	; 0x10cc <IIC_enumStartCondition+0xaa>
	} else {
		if((IIC_TWSR & 0xF8) == 0x08)
    10b0:	e1 e2       	ldi	r30, 0x21	; 33
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	88 7f       	andi	r24, 0xF8	; 248
    10bc:	90 70       	andi	r25, 0x00	; 0
    10be:	88 30       	cpi	r24, 0x08	; 8
    10c0:	91 05       	cpc	r25, r1
    10c2:	11 f4       	brne	.+4      	; 0x10c8 <IIC_enumStartCondition+0xa6>
			local_enumState = IIC_OK;
    10c4:	1d 82       	std	Y+5, r1	; 0x05
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <IIC_enumStartCondition+0xaa>
		else
			local_enumState = IIC_START_COND_ERR;
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	8d 83       	std	Y+5, r24	; 0x05
	}

	/* Clear TWSTA Bit After Start Condition */
//	CLR_BIT(IIC_TWCR, IIC_TWCR_TWSTA);

	return local_enumState;
    10cc:	8d 81       	ldd	r24, Y+5	; 0x05

}
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <IIC_enumStopCondition>:



IIC_State_t IIC_enumStopCondition(void) {
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <IIC_enumStopCondition+0x6>
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <IIC_enumStopCondition+0x8>
    10e6:	0f 92       	push	r0
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62

	IIC_State_t local_enumState = IIC_NOK;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	8d 83       	std	Y+5, r24	; 0x05

	/* Stop Condition */
	SET_BIT(IIC_TWCR, IIC_TWCR_TWSTO);
    10f0:	a6 e5       	ldi	r26, 0x56	; 86
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e6 e5       	ldi	r30, 0x56	; 86
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	80 61       	ori	r24, 0x10	; 16
    10fc:	8c 93       	st	X, r24

	/* Clear The Flag ( with [SET] ) */
	SET_BIT(IIC_TWCR, IIC_TWCR_TWINT);
    10fe:	a6 e5       	ldi	r26, 0x56	; 86
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e6 e5       	ldi	r30, 0x56	; 86
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	80 68       	ori	r24, 0x80	; 128
    110a:	8c 93       	st	X, r24

	/* Waiting till [Stop Condition] is done */
	u32 local_u32Loop = 0;
    110c:	19 82       	std	Y+1, r1	; 0x01
    110e:	1a 82       	std	Y+2, r1	; 0x02
    1110:	1b 82       	std	Y+3, r1	; 0x03
    1112:	1c 82       	std	Y+4, r1	; 0x04
    1114:	0b c0       	rjmp	.+22     	; 0x112c <IIC_enumStopCondition+0x4e>
	while(GET_BIT(IIC_TWCR, IIC_TWCR_TWSTO) == 1 && local_u32Loop < IIC_TIMEOUT) {
		local_u32Loop++;
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	9a 81       	ldd	r25, Y+2	; 0x02
    111a:	ab 81       	ldd	r26, Y+3	; 0x03
    111c:	bc 81       	ldd	r27, Y+4	; 0x04
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	a1 1d       	adc	r26, r1
    1122:	b1 1d       	adc	r27, r1
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	9a 83       	std	Y+2, r25	; 0x02
    1128:	ab 83       	std	Y+3, r26	; 0x03
    112a:	bc 83       	std	Y+4, r27	; 0x04
	/* Clear The Flag ( with [SET] ) */
	SET_BIT(IIC_TWCR, IIC_TWCR_TWINT);

	/* Waiting till [Stop Condition] is done */
	u32 local_u32Loop = 0;
	while(GET_BIT(IIC_TWCR, IIC_TWCR_TWSTO) == 1 && local_u32Loop < IIC_TIMEOUT) {
    112c:	e6 e5       	ldi	r30, 0x56	; 86
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	82 95       	swap	r24
    1134:	8f 70       	andi	r24, 0x0F	; 15
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	81 70       	andi	r24, 0x01	; 1
    113c:	90 70       	andi	r25, 0x00	; 0
    113e:	98 2f       	mov	r25, r24
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	89 27       	eor	r24, r25
    1144:	88 23       	and	r24, r24
    1146:	61 f4       	brne	.+24     	; 0x1160 <IIC_enumStopCondition+0x82>
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	9a 81       	ldd	r25, Y+2	; 0x02
    114c:	ab 81       	ldd	r26, Y+3	; 0x03
    114e:	bc 81       	ldd	r27, Y+4	; 0x04
    1150:	80 30       	cpi	r24, 0x00	; 0
    1152:	24 e2       	ldi	r18, 0x24	; 36
    1154:	92 07       	cpc	r25, r18
    1156:	24 ef       	ldi	r18, 0xF4	; 244
    1158:	a2 07       	cpc	r26, r18
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	b2 07       	cpc	r27, r18
    115e:	d8 f2       	brcs	.-74     	; 0x1116 <IIC_enumStopCondition+0x38>
		local_u32Loop++;
	}

	if(local_u32Loop >= IIC_TIMEOUT)
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	9a 81       	ldd	r25, Y+2	; 0x02
    1164:	ab 81       	ldd	r26, Y+3	; 0x03
    1166:	bc 81       	ldd	r27, Y+4	; 0x04
    1168:	80 30       	cpi	r24, 0x00	; 0
    116a:	24 e2       	ldi	r18, 0x24	; 36
    116c:	92 07       	cpc	r25, r18
    116e:	24 ef       	ldi	r18, 0xF4	; 244
    1170:	a2 07       	cpc	r26, r18
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	b2 07       	cpc	r27, r18
    1176:	18 f0       	brcs	.+6      	; 0x117e <IIC_enumStopCondition+0xa0>
		local_enumState = IIC_TIMEOUT_ERR;
    1178:	80 e1       	ldi	r24, 0x10	; 16
    117a:	8d 83       	std	Y+5, r24	; 0x05
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <IIC_enumStopCondition+0xa2>
	else
		local_enumState = IIC_OK;
    117e:	1d 82       	std	Y+5, r1	; 0x05

	return local_enumState;
    1180:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <IIC_enumSendSlaveAddressWithWrite>:



IIC_State_t IIC_enumSendSlaveAddressWithWrite(u8 local_u8SlaveAddress) {
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	00 d0       	rcall	.+0      	; 0x1198 <IIC_enumSendSlaveAddressWithWrite+0x6>
    1198:	00 d0       	rcall	.+0      	; 0x119a <IIC_enumSendSlaveAddressWithWrite+0x8>
    119a:	00 d0       	rcall	.+0      	; 0x119c <IIC_enumSendSlaveAddressWithWrite+0xa>
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	8e 83       	std	Y+6, r24	; 0x06

	IIC_State_t local_enumState = IIC_NOK;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	8d 83       	std	Y+5, r24	; 0x05

	/* Writing Slave Address + [WRITE] */
	IIC_TWDR = local_u8SlaveAddress << 1;
    11a6:	e3 e2       	ldi	r30, 0x23	; 35
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	8e 81       	ldd	r24, Y+6	; 0x06
    11ac:	88 0f       	add	r24, r24
    11ae:	80 83       	st	Z, r24

	/* Clear Required Bits in TWCR */
	CLR_BIT(IIC_TWCR, IIC_TWCR_TWSTA);
    11b0:	a6 e5       	ldi	r26, 0x56	; 86
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e6 e5       	ldi	r30, 0x56	; 86
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	8f 7d       	andi	r24, 0xDF	; 223
    11bc:	8c 93       	st	X, r24
	CLR_BIT(IIC_TWCR, IIC_TWCR_TWSTO);
    11be:	a6 e5       	ldi	r26, 0x56	; 86
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e6 e5       	ldi	r30, 0x56	; 86
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	8f 7e       	andi	r24, 0xEF	; 239
    11ca:	8c 93       	st	X, r24

	/* Clear The Flag ( with [SET] ) */
	SET_BIT(IIC_TWCR, IIC_TWCR_TWINT);
    11cc:	a6 e5       	ldi	r26, 0x56	; 86
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e6 e5       	ldi	r30, 0x56	; 86
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	80 68       	ori	r24, 0x80	; 128
    11d8:	8c 93       	st	X, r24

	/* Waiting till Job Is Done [Send Slave Address + Write] */
	u32 local_u32Loop = 0;
    11da:	19 82       	std	Y+1, r1	; 0x01
    11dc:	1a 82       	std	Y+2, r1	; 0x02
    11de:	1b 82       	std	Y+3, r1	; 0x03
    11e0:	1c 82       	std	Y+4, r1	; 0x04
    11e2:	0b c0       	rjmp	.+22     	; 0x11fa <IIC_enumSendSlaveAddressWithWrite+0x68>
	while(GET_BIT(IIC_TWCR, IIC_TWCR_TWINT) == 0 && local_u32Loop < IIC_TIMEOUT) {
		local_u32Loop++;
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	9a 81       	ldd	r25, Y+2	; 0x02
    11e8:	ab 81       	ldd	r26, Y+3	; 0x03
    11ea:	bc 81       	ldd	r27, Y+4	; 0x04
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	a1 1d       	adc	r26, r1
    11f0:	b1 1d       	adc	r27, r1
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	9a 83       	std	Y+2, r25	; 0x02
    11f6:	ab 83       	std	Y+3, r26	; 0x03
    11f8:	bc 83       	std	Y+4, r27	; 0x04
	/* Clear The Flag ( with [SET] ) */
	SET_BIT(IIC_TWCR, IIC_TWCR_TWINT);

	/* Waiting till Job Is Done [Send Slave Address + Write] */
	u32 local_u32Loop = 0;
	while(GET_BIT(IIC_TWCR, IIC_TWCR_TWINT) == 0 && local_u32Loop < IIC_TIMEOUT) {
    11fa:	e6 e5       	ldi	r30, 0x56	; 86
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	88 23       	and	r24, r24
    1202:	64 f0       	brlt	.+24     	; 0x121c <IIC_enumSendSlaveAddressWithWrite+0x8a>
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	ab 81       	ldd	r26, Y+3	; 0x03
    120a:	bc 81       	ldd	r27, Y+4	; 0x04
    120c:	80 30       	cpi	r24, 0x00	; 0
    120e:	24 e2       	ldi	r18, 0x24	; 36
    1210:	92 07       	cpc	r25, r18
    1212:	24 ef       	ldi	r18, 0xF4	; 244
    1214:	a2 07       	cpc	r26, r18
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	b2 07       	cpc	r27, r18
    121a:	20 f3       	brcs	.-56     	; 0x11e4 <IIC_enumSendSlaveAddressWithWrite+0x52>
		local_u32Loop++;
	}

	if(local_u32Loop >= IIC_TIMEOUT) {
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	9a 81       	ldd	r25, Y+2	; 0x02
    1220:	ab 81       	ldd	r26, Y+3	; 0x03
    1222:	bc 81       	ldd	r27, Y+4	; 0x04
    1224:	80 30       	cpi	r24, 0x00	; 0
    1226:	24 e2       	ldi	r18, 0x24	; 36
    1228:	92 07       	cpc	r25, r18
    122a:	24 ef       	ldi	r18, 0xF4	; 244
    122c:	a2 07       	cpc	r26, r18
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	b2 07       	cpc	r27, r18
    1232:	18 f0       	brcs	.+6      	; 0x123a <IIC_enumSendSlaveAddressWithWrite+0xa8>
		local_enumState = IIC_TIMEOUT_ERR;
    1234:	80 e1       	ldi	r24, 0x10	; 16
    1236:	8d 83       	std	Y+5, r24	; 0x05
    1238:	28 c0       	rjmp	.+80     	; 0x128a <IIC_enumSendSlaveAddressWithWrite+0xf8>
	} else {
		if((IIC_TWSR & 0xF8) == 0x18)
    123a:	e1 e2       	ldi	r30, 0x21	; 33
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	88 2f       	mov	r24, r24
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	88 7f       	andi	r24, 0xF8	; 248
    1246:	90 70       	andi	r25, 0x00	; 0
    1248:	88 31       	cpi	r24, 0x18	; 24
    124a:	91 05       	cpc	r25, r1
    124c:	11 f4       	brne	.+4      	; 0x1252 <IIC_enumSendSlaveAddressWithWrite+0xc0>
			local_enumState = IIC_OK;
    124e:	1d 82       	std	Y+5, r1	; 0x05
    1250:	1c c0       	rjmp	.+56     	; 0x128a <IIC_enumSendSlaveAddressWithWrite+0xf8>
		else if((IIC_TWSR & 0xF8) == 0x20)
    1252:	e1 e2       	ldi	r30, 0x21	; 33
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	88 2f       	mov	r24, r24
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	88 7f       	andi	r24, 0xF8	; 248
    125e:	90 70       	andi	r25, 0x00	; 0
    1260:	80 32       	cpi	r24, 0x20	; 32
    1262:	91 05       	cpc	r25, r1
    1264:	19 f4       	brne	.+6      	; 0x126c <IIC_enumSendSlaveAddressWithWrite+0xda>
			local_enumState = IIC_SLA_ADD_WRT_NACK;
    1266:	86 e0       	ldi	r24, 0x06	; 6
    1268:	8d 83       	std	Y+5, r24	; 0x05
    126a:	0f c0       	rjmp	.+30     	; 0x128a <IIC_enumSendSlaveAddressWithWrite+0xf8>
		else if((IIC_TWSR & 0xF8) == 0x38)
    126c:	e1 e2       	ldi	r30, 0x21	; 33
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	88 2f       	mov	r24, r24
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	88 7f       	andi	r24, 0xF8	; 248
    1278:	90 70       	andi	r25, 0x00	; 0
    127a:	88 33       	cpi	r24, 0x38	; 56
    127c:	91 05       	cpc	r25, r1
    127e:	19 f4       	brne	.+6      	; 0x1286 <IIC_enumSendSlaveAddressWithWrite+0xf4>
			local_enumState = IIC_ARBITRATION_LOST;
    1280:	87 e0       	ldi	r24, 0x07	; 7
    1282:	8d 83       	std	Y+5, r24	; 0x05
    1284:	02 c0       	rjmp	.+4      	; 0x128a <IIC_enumSendSlaveAddressWithWrite+0xf8>
		else
			local_enumState = IIC_SLA_ADD_WRT_ERR;
    1286:	85 e0       	ldi	r24, 0x05	; 5
    1288:	8d 83       	std	Y+5, r24	; 0x05
	}

	return local_enumState;
    128a:	8d 81       	ldd	r24, Y+5	; 0x05

}
    128c:	26 96       	adiw	r28, 0x06	; 6
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <IIC_enumSendSlaveAddressWithRead>:



IIC_State_t IIC_enumSendSlaveAddressWithRead(u8 local_u8SlaveAddress) {
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <IIC_enumSendSlaveAddressWithRead+0x6>
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <IIC_enumSendSlaveAddressWithRead+0x8>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <IIC_enumSendSlaveAddressWithRead+0xa>
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	8e 83       	std	Y+6, r24	; 0x06

	IIC_State_t local_enumState = IIC_NOK;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	8d 83       	std	Y+5, r24	; 0x05

	/* Writing Slave Address With [READ] */
	IIC_TWDR = (local_u8SlaveAddress << 1) | 1;
    12b2:	e3 e2       	ldi	r30, 0x23	; 35
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	8e 81       	ldd	r24, Y+6	; 0x06
    12b8:	88 2f       	mov	r24, r24
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	81 60       	ori	r24, 0x01	; 1
    12c2:	80 83       	st	Z, r24

	/* Clear Required Bits in TWCR */
	CLR_BIT(IIC_TWCR, IIC_TWCR_TWSTA);
    12c4:	a6 e5       	ldi	r26, 0x56	; 86
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e6 e5       	ldi	r30, 0x56	; 86
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	8f 7d       	andi	r24, 0xDF	; 223
    12d0:	8c 93       	st	X, r24
	CLR_BIT(IIC_TWCR, IIC_TWCR_TWSTO);
    12d2:	a6 e5       	ldi	r26, 0x56	; 86
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e6 e5       	ldi	r30, 0x56	; 86
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	8f 7e       	andi	r24, 0xEF	; 239
    12de:	8c 93       	st	X, r24

	/* Clear The Flag ( with [SET] ) */
	SET_BIT(IIC_TWCR, IIC_TWCR_TWINT);
    12e0:	a6 e5       	ldi	r26, 0x56	; 86
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e6 e5       	ldi	r30, 0x56	; 86
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	80 68       	ori	r24, 0x80	; 128
    12ec:	8c 93       	st	X, r24

	/* Waiting till Job Is Done [Send Slave Address with Read]  */
	u32 local_u32Loop = 0;
    12ee:	19 82       	std	Y+1, r1	; 0x01
    12f0:	1a 82       	std	Y+2, r1	; 0x02
    12f2:	1b 82       	std	Y+3, r1	; 0x03
    12f4:	1c 82       	std	Y+4, r1	; 0x04
    12f6:	0b c0       	rjmp	.+22     	; 0x130e <IIC_enumSendSlaveAddressWithRead+0x70>
	while(GET_BIT(IIC_TWCR, IIC_TWCR_TWINT) == 0 && local_u32Loop < IIC_TIMEOUT) {
		local_u32Loop++;
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	9a 81       	ldd	r25, Y+2	; 0x02
    12fc:	ab 81       	ldd	r26, Y+3	; 0x03
    12fe:	bc 81       	ldd	r27, Y+4	; 0x04
    1300:	01 96       	adiw	r24, 0x01	; 1
    1302:	a1 1d       	adc	r26, r1
    1304:	b1 1d       	adc	r27, r1
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	9a 83       	std	Y+2, r25	; 0x02
    130a:	ab 83       	std	Y+3, r26	; 0x03
    130c:	bc 83       	std	Y+4, r27	; 0x04
	/* Clear The Flag ( with [SET] ) */
	SET_BIT(IIC_TWCR, IIC_TWCR_TWINT);

	/* Waiting till Job Is Done [Send Slave Address with Read]  */
	u32 local_u32Loop = 0;
	while(GET_BIT(IIC_TWCR, IIC_TWCR_TWINT) == 0 && local_u32Loop < IIC_TIMEOUT) {
    130e:	e6 e5       	ldi	r30, 0x56	; 86
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	88 23       	and	r24, r24
    1316:	64 f0       	brlt	.+24     	; 0x1330 <IIC_enumSendSlaveAddressWithRead+0x92>
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	9a 81       	ldd	r25, Y+2	; 0x02
    131c:	ab 81       	ldd	r26, Y+3	; 0x03
    131e:	bc 81       	ldd	r27, Y+4	; 0x04
    1320:	80 30       	cpi	r24, 0x00	; 0
    1322:	24 e2       	ldi	r18, 0x24	; 36
    1324:	92 07       	cpc	r25, r18
    1326:	24 ef       	ldi	r18, 0xF4	; 244
    1328:	a2 07       	cpc	r26, r18
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	b2 07       	cpc	r27, r18
    132e:	20 f3       	brcs	.-56     	; 0x12f8 <IIC_enumSendSlaveAddressWithRead+0x5a>
		local_u32Loop++;
	}

	if(local_u32Loop >= IIC_TIMEOUT) {
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	ab 81       	ldd	r26, Y+3	; 0x03
    1336:	bc 81       	ldd	r27, Y+4	; 0x04
    1338:	80 30       	cpi	r24, 0x00	; 0
    133a:	24 e2       	ldi	r18, 0x24	; 36
    133c:	92 07       	cpc	r25, r18
    133e:	24 ef       	ldi	r18, 0xF4	; 244
    1340:	a2 07       	cpc	r26, r18
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	b2 07       	cpc	r27, r18
    1346:	18 f0       	brcs	.+6      	; 0x134e <IIC_enumSendSlaveAddressWithRead+0xb0>
		local_enumState = IIC_TIMEOUT_ERR;
    1348:	80 e1       	ldi	r24, 0x10	; 16
    134a:	8d 83       	std	Y+5, r24	; 0x05
    134c:	28 c0       	rjmp	.+80     	; 0x139e <IIC_enumSendSlaveAddressWithRead+0x100>
	} else {
		if((IIC_TWSR & 0xF8) == 0x40)
    134e:	e1 e2       	ldi	r30, 0x21	; 33
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	88 7f       	andi	r24, 0xF8	; 248
    135a:	90 70       	andi	r25, 0x00	; 0
    135c:	80 34       	cpi	r24, 0x40	; 64
    135e:	91 05       	cpc	r25, r1
    1360:	11 f4       	brne	.+4      	; 0x1366 <IIC_enumSendSlaveAddressWithRead+0xc8>
			local_enumState = IIC_OK;
    1362:	1d 82       	std	Y+5, r1	; 0x05
    1364:	1c c0       	rjmp	.+56     	; 0x139e <IIC_enumSendSlaveAddressWithRead+0x100>
		else if((IIC_TWSR & 0xF8) == 0x48)
    1366:	e1 e2       	ldi	r30, 0x21	; 33
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	88 2f       	mov	r24, r24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	88 7f       	andi	r24, 0xF8	; 248
    1372:	90 70       	andi	r25, 0x00	; 0
    1374:	88 34       	cpi	r24, 0x48	; 72
    1376:	91 05       	cpc	r25, r1
    1378:	19 f4       	brne	.+6      	; 0x1380 <IIC_enumSendSlaveAddressWithRead+0xe2>
			local_enumState = IIC_SLA_ADD_READ_NACK;
    137a:	89 e0       	ldi	r24, 0x09	; 9
    137c:	8d 83       	std	Y+5, r24	; 0x05
    137e:	0f c0       	rjmp	.+30     	; 0x139e <IIC_enumSendSlaveAddressWithRead+0x100>
		else if((IIC_TWSR & 0xF8) == 0x38)
    1380:	e1 e2       	ldi	r30, 0x21	; 33
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	88 2f       	mov	r24, r24
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	88 7f       	andi	r24, 0xF8	; 248
    138c:	90 70       	andi	r25, 0x00	; 0
    138e:	88 33       	cpi	r24, 0x38	; 56
    1390:	91 05       	cpc	r25, r1
    1392:	19 f4       	brne	.+6      	; 0x139a <IIC_enumSendSlaveAddressWithRead+0xfc>
			local_enumState = IIC_ARBITRATION_LOST; // or IIC_SLA_ADD_READ_NACK
    1394:	87 e0       	ldi	r24, 0x07	; 7
    1396:	8d 83       	std	Y+5, r24	; 0x05
    1398:	02 c0       	rjmp	.+4      	; 0x139e <IIC_enumSendSlaveAddressWithRead+0x100>
		else
			local_enumState = IIC_SLA_ADD_READ_ERR;
    139a:	88 e0       	ldi	r24, 0x08	; 8
    139c:	8d 83       	std	Y+5, r24	; 0x05
	}

	return local_enumState;
    139e:	8d 81       	ldd	r24, Y+5	; 0x05

}
    13a0:	26 96       	adiw	r28, 0x06	; 6
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <IIC_enumSendByte>:



IIC_State_t IIC_enumSendByte(u8 local_u8Data) {
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <IIC_enumSendByte+0x6>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <IIC_enumSendByte+0x8>
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <IIC_enumSendByte+0xa>
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	8e 83       	std	Y+6, r24	; 0x06

	IIC_State_t local_enumState = IIC_NOK;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	8d 83       	std	Y+5, r24	; 0x05

	/* Sending Byte */
	IIC_TWDR = local_u8Data;
    13c6:	e3 e2       	ldi	r30, 0x23	; 35
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	8e 81       	ldd	r24, Y+6	; 0x06
    13cc:	80 83       	st	Z, r24

	/* Clear Required Bits in TWCR */
	CLR_BIT(IIC_TWCR, IIC_TWCR_TWSTA);
    13ce:	a6 e5       	ldi	r26, 0x56	; 86
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e6 e5       	ldi	r30, 0x56	; 86
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	8f 7d       	andi	r24, 0xDF	; 223
    13da:	8c 93       	st	X, r24
	CLR_BIT(IIC_TWCR, IIC_TWCR_TWSTO);
    13dc:	a6 e5       	ldi	r26, 0x56	; 86
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e6 e5       	ldi	r30, 0x56	; 86
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	8f 7e       	andi	r24, 0xEF	; 239
    13e8:	8c 93       	st	X, r24

	/* Clear The Flag ( with [SET] ) */
	SET_BIT(IIC_TWCR, IIC_TWCR_TWINT);
    13ea:	a6 e5       	ldi	r26, 0x56	; 86
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e6 e5       	ldi	r30, 0x56	; 86
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	80 68       	ori	r24, 0x80	; 128
    13f6:	8c 93       	st	X, r24

	/* Waiting till Job Is Done [Sending Data] */
	u32 local_u32Loop = 0;
    13f8:	19 82       	std	Y+1, r1	; 0x01
    13fa:	1a 82       	std	Y+2, r1	; 0x02
    13fc:	1b 82       	std	Y+3, r1	; 0x03
    13fe:	1c 82       	std	Y+4, r1	; 0x04
    1400:	0b c0       	rjmp	.+22     	; 0x1418 <IIC_enumSendByte+0x66>
	while(GET_BIT(IIC_TWCR, IIC_TWCR_TWINT) == 0 && local_u32Loop < IIC_TIMEOUT) {
		local_u32Loop++;
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	9a 81       	ldd	r25, Y+2	; 0x02
    1406:	ab 81       	ldd	r26, Y+3	; 0x03
    1408:	bc 81       	ldd	r27, Y+4	; 0x04
    140a:	01 96       	adiw	r24, 0x01	; 1
    140c:	a1 1d       	adc	r26, r1
    140e:	b1 1d       	adc	r27, r1
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	9a 83       	std	Y+2, r25	; 0x02
    1414:	ab 83       	std	Y+3, r26	; 0x03
    1416:	bc 83       	std	Y+4, r27	; 0x04
	/* Clear The Flag ( with [SET] ) */
	SET_BIT(IIC_TWCR, IIC_TWCR_TWINT);

	/* Waiting till Job Is Done [Sending Data] */
	u32 local_u32Loop = 0;
	while(GET_BIT(IIC_TWCR, IIC_TWCR_TWINT) == 0 && local_u32Loop < IIC_TIMEOUT) {
    1418:	e6 e5       	ldi	r30, 0x56	; 86
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	88 23       	and	r24, r24
    1420:	64 f0       	brlt	.+24     	; 0x143a <IIC_enumSendByte+0x88>
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	9a 81       	ldd	r25, Y+2	; 0x02
    1426:	ab 81       	ldd	r26, Y+3	; 0x03
    1428:	bc 81       	ldd	r27, Y+4	; 0x04
    142a:	80 30       	cpi	r24, 0x00	; 0
    142c:	24 e2       	ldi	r18, 0x24	; 36
    142e:	92 07       	cpc	r25, r18
    1430:	24 ef       	ldi	r18, 0xF4	; 244
    1432:	a2 07       	cpc	r26, r18
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	b2 07       	cpc	r27, r18
    1438:	20 f3       	brcs	.-56     	; 0x1402 <IIC_enumSendByte+0x50>
		local_u32Loop++;
	}

	if(local_u32Loop >= IIC_TIMEOUT) {
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	9a 81       	ldd	r25, Y+2	; 0x02
    143e:	ab 81       	ldd	r26, Y+3	; 0x03
    1440:	bc 81       	ldd	r27, Y+4	; 0x04
    1442:	80 30       	cpi	r24, 0x00	; 0
    1444:	24 e2       	ldi	r18, 0x24	; 36
    1446:	92 07       	cpc	r25, r18
    1448:	24 ef       	ldi	r18, 0xF4	; 244
    144a:	a2 07       	cpc	r26, r18
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	b2 07       	cpc	r27, r18
    1450:	18 f0       	brcs	.+6      	; 0x1458 <IIC_enumSendByte+0xa6>
		local_enumState = IIC_TIMEOUT_ERR;
    1452:	80 e1       	ldi	r24, 0x10	; 16
    1454:	8d 83       	std	Y+5, r24	; 0x05
    1456:	28 c0       	rjmp	.+80     	; 0x14a8 <IIC_enumSendByte+0xf6>
	} else {
		if((IIC_TWSR & 0xF8) == 0x28)
    1458:	e1 e2       	ldi	r30, 0x21	; 33
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	88 7f       	andi	r24, 0xF8	; 248
    1464:	90 70       	andi	r25, 0x00	; 0
    1466:	88 32       	cpi	r24, 0x28	; 40
    1468:	91 05       	cpc	r25, r1
    146a:	11 f4       	brne	.+4      	; 0x1470 <IIC_enumSendByte+0xbe>
			local_enumState = IIC_OK;
    146c:	1d 82       	std	Y+5, r1	; 0x05
    146e:	1c c0       	rjmp	.+56     	; 0x14a8 <IIC_enumSendByte+0xf6>
		else if((IIC_TWSR & 0xF8) == 0x30)
    1470:	e1 e2       	ldi	r30, 0x21	; 33
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	88 2f       	mov	r24, r24
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	88 7f       	andi	r24, 0xF8	; 248
    147c:	90 70       	andi	r25, 0x00	; 0
    147e:	80 33       	cpi	r24, 0x30	; 48
    1480:	91 05       	cpc	r25, r1
    1482:	19 f4       	brne	.+6      	; 0x148a <IIC_enumSendByte+0xd8>
			local_enumState = IIC_M_SEND_BYTE_NACK;
    1484:	8b e0       	ldi	r24, 0x0B	; 11
    1486:	8d 83       	std	Y+5, r24	; 0x05
    1488:	0f c0       	rjmp	.+30     	; 0x14a8 <IIC_enumSendByte+0xf6>
		else if((IIC_TWSR & 0xF8) == 0x38)
    148a:	e1 e2       	ldi	r30, 0x21	; 33
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	88 2f       	mov	r24, r24
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	88 7f       	andi	r24, 0xF8	; 248
    1496:	90 70       	andi	r25, 0x00	; 0
    1498:	88 33       	cpi	r24, 0x38	; 56
    149a:	91 05       	cpc	r25, r1
    149c:	19 f4       	brne	.+6      	; 0x14a4 <IIC_enumSendByte+0xf2>
			local_enumState = IIC_ARBITRATION_LOST; // or IIC_SLA_ADD_READ_NACK
    149e:	87 e0       	ldi	r24, 0x07	; 7
    14a0:	8d 83       	std	Y+5, r24	; 0x05
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <IIC_enumSendByte+0xf6>
		else
			local_enumState = IIC_M_SEND_BYTE_ERR;
    14a4:	8a e0       	ldi	r24, 0x0A	; 10
    14a6:	8d 83       	std	Y+5, r24	; 0x05
	}

	return local_enumState;
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05

}
    14aa:	26 96       	adiw	r28, 0x06	; 6
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <IIC_enumReceiveByte>:



IIC_State_t IIC_enumReceiveByte(u8 *local_u8PtrReceivedByte) {
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	27 97       	sbiw	r28, 0x07	; 7
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	9f 83       	std	Y+7, r25	; 0x07
    14d2:	8e 83       	std	Y+6, r24	; 0x06

	IIC_State_t local_enumState = IIC_NOK;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	8d 83       	std	Y+5, r24	; 0x05

	/* Clear and Set Required Bits in TWCR */
	CLR_BIT(IIC_TWCR, IIC_TWCR_TWSTA);
    14d8:	a6 e5       	ldi	r26, 0x56	; 86
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e6 e5       	ldi	r30, 0x56	; 86
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	8f 7d       	andi	r24, 0xDF	; 223
    14e4:	8c 93       	st	X, r24
	CLR_BIT(IIC_TWCR, IIC_TWCR_TWSTO);
    14e6:	a6 e5       	ldi	r26, 0x56	; 86
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e6 e5       	ldi	r30, 0x56	; 86
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	8f 7e       	andi	r24, 0xEF	; 239
    14f2:	8c 93       	st	X, r24
	SET_BIT(IIC_TWCR, IIC_TWCR_TWEA);
    14f4:	a6 e5       	ldi	r26, 0x56	; 86
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e6 e5       	ldi	r30, 0x56	; 86
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 64       	ori	r24, 0x40	; 64
    1500:	8c 93       	st	X, r24

	/* Clear The Flag ( with [SET] ) */
	SET_BIT(IIC_TWCR, IIC_TWCR_TWINT);
    1502:	a6 e5       	ldi	r26, 0x56	; 86
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e6 e5       	ldi	r30, 0x56	; 86
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	80 68       	ori	r24, 0x80	; 128
    150e:	8c 93       	st	X, r24

	/* Waiting till Job Is Done [Reading Data]  */
	u32 local_u32Loop = 0;
    1510:	19 82       	std	Y+1, r1	; 0x01
    1512:	1a 82       	std	Y+2, r1	; 0x02
    1514:	1b 82       	std	Y+3, r1	; 0x03
    1516:	1c 82       	std	Y+4, r1	; 0x04
    1518:	0b c0       	rjmp	.+22     	; 0x1530 <IIC_enumReceiveByte+0x74>
	while(GET_BIT(IIC_TWCR, IIC_TWCR_TWINT) == 0 && local_u32Loop < IIC_TIMEOUT) {
		local_u32Loop++;
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	9a 81       	ldd	r25, Y+2	; 0x02
    151e:	ab 81       	ldd	r26, Y+3	; 0x03
    1520:	bc 81       	ldd	r27, Y+4	; 0x04
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	a1 1d       	adc	r26, r1
    1526:	b1 1d       	adc	r27, r1
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	9a 83       	std	Y+2, r25	; 0x02
    152c:	ab 83       	std	Y+3, r26	; 0x03
    152e:	bc 83       	std	Y+4, r27	; 0x04
	/* Clear The Flag ( with [SET] ) */
	SET_BIT(IIC_TWCR, IIC_TWCR_TWINT);

	/* Waiting till Job Is Done [Reading Data]  */
	u32 local_u32Loop = 0;
	while(GET_BIT(IIC_TWCR, IIC_TWCR_TWINT) == 0 && local_u32Loop < IIC_TIMEOUT) {
    1530:	e6 e5       	ldi	r30, 0x56	; 86
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	88 23       	and	r24, r24
    1538:	64 f0       	brlt	.+24     	; 0x1552 <IIC_enumReceiveByte+0x96>
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	ab 81       	ldd	r26, Y+3	; 0x03
    1540:	bc 81       	ldd	r27, Y+4	; 0x04
    1542:	80 30       	cpi	r24, 0x00	; 0
    1544:	24 e2       	ldi	r18, 0x24	; 36
    1546:	92 07       	cpc	r25, r18
    1548:	24 ef       	ldi	r18, 0xF4	; 244
    154a:	a2 07       	cpc	r26, r18
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	b2 07       	cpc	r27, r18
    1550:	20 f3       	brcs	.-56     	; 0x151a <IIC_enumReceiveByte+0x5e>
		local_u32Loop++;
	}

	if(local_u32Loop >= IIC_TIMEOUT) {
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	9a 81       	ldd	r25, Y+2	; 0x02
    1556:	ab 81       	ldd	r26, Y+3	; 0x03
    1558:	bc 81       	ldd	r27, Y+4	; 0x04
    155a:	80 30       	cpi	r24, 0x00	; 0
    155c:	24 e2       	ldi	r18, 0x24	; 36
    155e:	92 07       	cpc	r25, r18
    1560:	24 ef       	ldi	r18, 0xF4	; 244
    1562:	a2 07       	cpc	r26, r18
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	b2 07       	cpc	r27, r18
    1568:	18 f0       	brcs	.+6      	; 0x1570 <IIC_enumReceiveByte+0xb4>
		local_enumState = IIC_TIMEOUT_ERR;
    156a:	80 e1       	ldi	r24, 0x10	; 16
    156c:	8d 83       	std	Y+5, r24	; 0x05
    156e:	21 c0       	rjmp	.+66     	; 0x15b2 <IIC_enumReceiveByte+0xf6>
	} else {
		if((IIC_TWSR & 0xF8) == 0x50) {
    1570:	e1 e2       	ldi	r30, 0x21	; 33
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	88 2f       	mov	r24, r24
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	88 7f       	andi	r24, 0xF8	; 248
    157c:	90 70       	andi	r25, 0x00	; 0
    157e:	80 35       	cpi	r24, 0x50	; 80
    1580:	91 05       	cpc	r25, r1
    1582:	41 f4       	brne	.+16     	; 0x1594 <IIC_enumReceiveByte+0xd8>
			local_enumState = IIC_OK;
    1584:	1d 82       	std	Y+5, r1	; 0x05
			*local_u8PtrReceivedByte = IIC_TWDR;
    1586:	e3 e2       	ldi	r30, 0x23	; 35
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	ee 81       	ldd	r30, Y+6	; 0x06
    158e:	ff 81       	ldd	r31, Y+7	; 0x07
    1590:	80 83       	st	Z, r24
    1592:	0f c0       	rjmp	.+30     	; 0x15b2 <IIC_enumReceiveByte+0xf6>
		}
		else if((IIC_TWSR & 0xF8) == 0x58)
    1594:	e1 e2       	ldi	r30, 0x21	; 33
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	88 2f       	mov	r24, r24
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	88 7f       	andi	r24, 0xF8	; 248
    15a0:	90 70       	andi	r25, 0x00	; 0
    15a2:	88 35       	cpi	r24, 0x58	; 88
    15a4:	91 05       	cpc	r25, r1
    15a6:	19 f4       	brne	.+6      	; 0x15ae <IIC_enumReceiveByte+0xf2>
			local_enumState = IIC_M_RECEIVE_BYTE_NACK;
    15a8:	8d e0       	ldi	r24, 0x0D	; 13
    15aa:	8d 83       	std	Y+5, r24	; 0x05
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <IIC_enumReceiveByte+0xf6>
		else
			local_enumState = IIC_M_SEND_BYTE_ERR;
    15ae:	8a e0       	ldi	r24, 0x0A	; 10
    15b0:	8d 83       	std	Y+5, r24	; 0x05
	}

	return local_enumState;
    15b2:	8d 81       	ldd	r24, Y+5	; 0x05

}
    15b4:	27 96       	adiw	r28, 0x07	; 7
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <IIC_enumRepeatStart>:



IIC_State_t IIC_enumRepeatStart(void) {
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <IIC_enumRepeatStart+0x6>
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <IIC_enumRepeatStart+0x8>
    15ce:	0f 92       	push	r0
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62

	IIC_State_t local_enumState = IIC_NOK;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	8d 83       	std	Y+5, r24	; 0x05

	/* Repeat Start */
	SET_BIT(IIC_TWCR, IIC_TWCR_TWSTA);
    15d8:	a6 e5       	ldi	r26, 0x56	; 86
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e6 e5       	ldi	r30, 0x56	; 86
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	80 62       	ori	r24, 0x20	; 32
    15e4:	8c 93       	st	X, r24

	/* Clear The Flag ( with [SET] ) */
	SET_BIT(IIC_TWCR, IIC_TWCR_TWINT);
    15e6:	a6 e5       	ldi	r26, 0x56	; 86
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e6 e5       	ldi	r30, 0x56	; 86
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	80 68       	ori	r24, 0x80	; 128
    15f2:	8c 93       	st	X, r24

	/* Waiting till Job Is Done [Repeat Start]  */
	u32 local_u32Loop = 0;
    15f4:	19 82       	std	Y+1, r1	; 0x01
    15f6:	1a 82       	std	Y+2, r1	; 0x02
    15f8:	1b 82       	std	Y+3, r1	; 0x03
    15fa:	1c 82       	std	Y+4, r1	; 0x04
    15fc:	0b c0       	rjmp	.+22     	; 0x1614 <IIC_enumRepeatStart+0x4e>
	while(GET_BIT(IIC_TWCR, IIC_TWCR_TWINT) == 0 && local_u32Loop < IIC_TIMEOUT) {
		local_u32Loop++;
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	9a 81       	ldd	r25, Y+2	; 0x02
    1602:	ab 81       	ldd	r26, Y+3	; 0x03
    1604:	bc 81       	ldd	r27, Y+4	; 0x04
    1606:	01 96       	adiw	r24, 0x01	; 1
    1608:	a1 1d       	adc	r26, r1
    160a:	b1 1d       	adc	r27, r1
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	9a 83       	std	Y+2, r25	; 0x02
    1610:	ab 83       	std	Y+3, r26	; 0x03
    1612:	bc 83       	std	Y+4, r27	; 0x04
	/* Clear The Flag ( with [SET] ) */
	SET_BIT(IIC_TWCR, IIC_TWCR_TWINT);

	/* Waiting till Job Is Done [Repeat Start]  */
	u32 local_u32Loop = 0;
	while(GET_BIT(IIC_TWCR, IIC_TWCR_TWINT) == 0 && local_u32Loop < IIC_TIMEOUT) {
    1614:	e6 e5       	ldi	r30, 0x56	; 86
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	88 23       	and	r24, r24
    161c:	64 f0       	brlt	.+24     	; 0x1636 <IIC_enumRepeatStart+0x70>
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	9a 81       	ldd	r25, Y+2	; 0x02
    1622:	ab 81       	ldd	r26, Y+3	; 0x03
    1624:	bc 81       	ldd	r27, Y+4	; 0x04
    1626:	80 30       	cpi	r24, 0x00	; 0
    1628:	24 e2       	ldi	r18, 0x24	; 36
    162a:	92 07       	cpc	r25, r18
    162c:	24 ef       	ldi	r18, 0xF4	; 244
    162e:	a2 07       	cpc	r26, r18
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	b2 07       	cpc	r27, r18
    1634:	20 f3       	brcs	.-56     	; 0x15fe <IIC_enumRepeatStart+0x38>
		local_u32Loop++;
	}

	if(local_u32Loop >= IIC_TIMEOUT) {
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	9a 81       	ldd	r25, Y+2	; 0x02
    163a:	ab 81       	ldd	r26, Y+3	; 0x03
    163c:	bc 81       	ldd	r27, Y+4	; 0x04
    163e:	80 30       	cpi	r24, 0x00	; 0
    1640:	24 e2       	ldi	r18, 0x24	; 36
    1642:	92 07       	cpc	r25, r18
    1644:	24 ef       	ldi	r18, 0xF4	; 244
    1646:	a2 07       	cpc	r26, r18
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	b2 07       	cpc	r27, r18
    164c:	18 f0       	brcs	.+6      	; 0x1654 <IIC_enumRepeatStart+0x8e>
		local_enumState = IIC_TIMEOUT_ERR;
    164e:	80 e1       	ldi	r24, 0x10	; 16
    1650:	8d 83       	std	Y+5, r24	; 0x05
    1652:	0e c0       	rjmp	.+28     	; 0x1670 <IIC_enumRepeatStart+0xaa>
	} else {
		if((IIC_TWSR & 0xF8) == 0x10)
    1654:	e1 e2       	ldi	r30, 0x21	; 33
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	88 2f       	mov	r24, r24
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	88 7f       	andi	r24, 0xF8	; 248
    1660:	90 70       	andi	r25, 0x00	; 0
    1662:	80 31       	cpi	r24, 0x10	; 16
    1664:	91 05       	cpc	r25, r1
    1666:	11 f4       	brne	.+4      	; 0x166c <IIC_enumRepeatStart+0xa6>
			local_enumState = IIC_OK;
    1668:	1d 82       	std	Y+5, r1	; 0x05
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <IIC_enumRepeatStart+0xaa>
		else
			local_enumState = IIC_RE_START_ERR;
    166c:	83 e0       	ldi	r24, 0x03	; 3
    166e:	8d 83       	std	Y+5, r24	; 0x05
	}

	return local_enumState;
    1670:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	08 95       	ret

00001682 <GIE_voidEnableGlobalINT>:

/* functions definition */


void GIE_voidEnableGlobalINT()
{
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GIE_SREG, GIE_SREG_I);
    168a:	af e5       	ldi	r26, 0x5F	; 95
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	ef e5       	ldi	r30, 0x5F	; 95
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	80 68       	ori	r24, 0x80	; 128
    1696:	8c 93       	st	X, r24
}
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <GIE_voidDisableGlobalINT>:



void GIE_voidDisableGlobalINT()
{
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GIE_SREG, GIE_SREG_I);
    16a6:	af e5       	ldi	r26, 0x5F	; 95
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	ef e5       	ldi	r30, 0x5F	; 95
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	8f 77       	andi	r24, 0x7F	; 127
    16b2:	8c 93       	st	X, r24
}
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <ExtInt_SetCallBack0>:
void (*callBack1) (void) = NULL;
void (*callBack2) (void) = NULL;


/* EXT0 Interrupt callback function */
void ExtInt_SetCallBack0(void (*ptr) (void)) { callBack0 = ptr; }
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <ExtInt_SetCallBack0+0x6>
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	9a 83       	std	Y+2, r25	; 0x02
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	9a 81       	ldd	r25, Y+2	; 0x02
    16cc:	90 93 7a 01 	sts	0x017A, r25
    16d0:	80 93 79 01 	sts	0x0179, r24
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <__vector_1>:
ISR(INT0_vect) { callBack0(); }	
    16de:	1f 92       	push	r1
    16e0:	0f 92       	push	r0
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	0f 92       	push	r0
    16e6:	11 24       	eor	r1, r1
    16e8:	2f 93       	push	r18
    16ea:	3f 93       	push	r19
    16ec:	4f 93       	push	r20
    16ee:	5f 93       	push	r21
    16f0:	6f 93       	push	r22
    16f2:	7f 93       	push	r23
    16f4:	8f 93       	push	r24
    16f6:	9f 93       	push	r25
    16f8:	af 93       	push	r26
    16fa:	bf 93       	push	r27
    16fc:	ef 93       	push	r30
    16fe:	ff 93       	push	r31
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	e0 91 79 01 	lds	r30, 0x0179
    170c:	f0 91 7a 01 	lds	r31, 0x017A
    1710:	09 95       	icall
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	ff 91       	pop	r31
    1718:	ef 91       	pop	r30
    171a:	bf 91       	pop	r27
    171c:	af 91       	pop	r26
    171e:	9f 91       	pop	r25
    1720:	8f 91       	pop	r24
    1722:	7f 91       	pop	r23
    1724:	6f 91       	pop	r22
    1726:	5f 91       	pop	r21
    1728:	4f 91       	pop	r20
    172a:	3f 91       	pop	r19
    172c:	2f 91       	pop	r18
    172e:	0f 90       	pop	r0
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	0f 90       	pop	r0
    1734:	1f 90       	pop	r1
    1736:	18 95       	reti

00001738 <ExtInt_SetCallBack1>:
//void __vector_1(void) { callBack0(); }



/* EXT1 Interrupt callback function */
void ExtInt_SetCallBack1(void (*ptr) (void)) { callBack1 = ptr; }
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	00 d0       	rcall	.+0      	; 0x173e <ExtInt_SetCallBack1+0x6>
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	9a 83       	std	Y+2, r25	; 0x02
    1744:	89 83       	std	Y+1, r24	; 0x01
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	9a 81       	ldd	r25, Y+2	; 0x02
    174a:	90 93 7c 01 	sts	0x017C, r25
    174e:	80 93 7b 01 	sts	0x017B, r24
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <__vector_2>:
ISR(INT1_vect) { callBack1(); }
    175c:	1f 92       	push	r1
    175e:	0f 92       	push	r0
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	0f 92       	push	r0
    1764:	11 24       	eor	r1, r1
    1766:	2f 93       	push	r18
    1768:	3f 93       	push	r19
    176a:	4f 93       	push	r20
    176c:	5f 93       	push	r21
    176e:	6f 93       	push	r22
    1770:	7f 93       	push	r23
    1772:	8f 93       	push	r24
    1774:	9f 93       	push	r25
    1776:	af 93       	push	r26
    1778:	bf 93       	push	r27
    177a:	ef 93       	push	r30
    177c:	ff 93       	push	r31
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	e0 91 7b 01 	lds	r30, 0x017B
    178a:	f0 91 7c 01 	lds	r31, 0x017C
    178e:	09 95       	icall
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	ff 91       	pop	r31
    1796:	ef 91       	pop	r30
    1798:	bf 91       	pop	r27
    179a:	af 91       	pop	r26
    179c:	9f 91       	pop	r25
    179e:	8f 91       	pop	r24
    17a0:	7f 91       	pop	r23
    17a2:	6f 91       	pop	r22
    17a4:	5f 91       	pop	r21
    17a6:	4f 91       	pop	r20
    17a8:	3f 91       	pop	r19
    17aa:	2f 91       	pop	r18
    17ac:	0f 90       	pop	r0
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	0f 90       	pop	r0
    17b2:	1f 90       	pop	r1
    17b4:	18 95       	reti

000017b6 <ExtInt_SetCallBack2>:
//void __vector_2(void) { callBack1(); }

	
	
/* EXT2 Interrupt callback function */
void ExtInt_SetCallBack2(void (*ptr) (void)) { callBack2 = ptr; }
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <ExtInt_SetCallBack2+0x6>
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	9a 83       	std	Y+2, r25	; 0x02
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	9a 81       	ldd	r25, Y+2	; 0x02
    17c8:	90 93 7e 01 	sts	0x017E, r25
    17cc:	80 93 7d 01 	sts	0x017D, r24
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <__vector_3>:
ISR(INT2_vect) { callBack2(); }
    17da:	1f 92       	push	r1
    17dc:	0f 92       	push	r0
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	0f 92       	push	r0
    17e2:	11 24       	eor	r1, r1
    17e4:	2f 93       	push	r18
    17e6:	3f 93       	push	r19
    17e8:	4f 93       	push	r20
    17ea:	5f 93       	push	r21
    17ec:	6f 93       	push	r22
    17ee:	7f 93       	push	r23
    17f0:	8f 93       	push	r24
    17f2:	9f 93       	push	r25
    17f4:	af 93       	push	r26
    17f6:	bf 93       	push	r27
    17f8:	ef 93       	push	r30
    17fa:	ff 93       	push	r31
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	e0 91 7d 01 	lds	r30, 0x017D
    1808:	f0 91 7e 01 	lds	r31, 0x017E
    180c:	09 95       	icall
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	ff 91       	pop	r31
    1814:	ef 91       	pop	r30
    1816:	bf 91       	pop	r27
    1818:	af 91       	pop	r26
    181a:	9f 91       	pop	r25
    181c:	8f 91       	pop	r24
    181e:	7f 91       	pop	r23
    1820:	6f 91       	pop	r22
    1822:	5f 91       	pop	r21
    1824:	4f 91       	pop	r20
    1826:	3f 91       	pop	r19
    1828:	2f 91       	pop	r18
    182a:	0f 90       	pop	r0
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	0f 90       	pop	r0
    1830:	1f 90       	pop	r1
    1832:	18 95       	reti

00001834 <ExtInt_voidInit>:
//void  __vector_3 (void) __attribute__((signal));
//void __vector_3(void) { callBack2(); }

	

void ExtInt_voidInit() {
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
	#if EXT_INT0_STATE == EXT_INT_ENABLE
		DIO_voidSetPinMode(EXT_INT0_PIN, DIO_PIN_INPUT);
    183c:	8a e2       	ldi	r24, 0x2A	; 42
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <DIO_voidSetPinMode>
		DIO_voidWritePinValue(EXT_INT0_PIN, DIO_PIN_HIGH);
    1844:	8a e2       	ldi	r24, 0x2A	; 42
    1846:	61 e0       	ldi	r22, 0x01	; 1
    1848:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		WRT_2BITS(EXTINT_MCUCR, EXTINT_MCUCR_ISC00, EXT_INT0_SENSE_CTRL); /*sense ctrl setting*/
    184c:	a5 e5       	ldi	r26, 0x55	; 85
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e5 e5       	ldi	r30, 0x55	; 85
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	8c 7f       	andi	r24, 0xFC	; 252
    1858:	82 60       	ori	r24, 0x02	; 2
    185a:	8c 93       	st	X, r24
		SET_BIT(EXTINT_GICR, EXTINT_GICR_INT0); /*enable Int0*/
    185c:	ab e5       	ldi	r26, 0x5B	; 91
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	eb e5       	ldi	r30, 0x5B	; 91
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	80 64       	ori	r24, 0x40	; 64
    1868:	8c 93       	st	X, r24
	#endif
	
	#if EXT_INT1_STATE == EXT_INT_ENABLE
		DIO_voidSetPinMode(EXT_INT1_PIN, DIO_PIN_INPUT);
    186a:	8b e2       	ldi	r24, 0x2B	; 43
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <DIO_voidSetPinMode>
		DIO_voidWritePinValue(EXT_INT1_PIN, DIO_PIN_HIGH);
    1872:	8b e2       	ldi	r24, 0x2B	; 43
    1874:	61 e0       	ldi	r22, 0x01	; 1
    1876:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		WRT_2BITS(EXTINT_MCUCR, EXTINT_MCUCR_ISC10, EXT_INT1_SENSE_CTRL); /*sense ctrl setting*/
    187a:	a5 e5       	ldi	r26, 0x55	; 85
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e5 e5       	ldi	r30, 0x55	; 85
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	83 7f       	andi	r24, 0xF3	; 243
    1886:	88 60       	ori	r24, 0x08	; 8
    1888:	8c 93       	st	X, r24
		SET_BIT(EXTINT_GICR, EXTINT_GICR_INT1); /*enable Int1*/
    188a:	ab e5       	ldi	r26, 0x5B	; 91
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	eb e5       	ldi	r30, 0x5B	; 91
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	80 68       	ori	r24, 0x80	; 128
    1896:	8c 93       	st	X, r24
	#endif
	
	#if EXT_INT2_STATE == EXT_INT_ENABLE
		DIO_voidSetPinMode(EXT_INT2_PIN, DIO_PIN_INPUT);
    1898:	86 e1       	ldi	r24, 0x16	; 22
    189a:	60 e0       	ldi	r22, 0x00	; 0
    189c:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <DIO_voidSetPinMode>
		DIO_voidWritePinValue(EXT_INT2_PIN, DIO_PIN_HIGH);
    18a0:	86 e1       	ldi	r24, 0x16	; 22
    18a2:	61 e0       	ldi	r22, 0x01	; 1
    18a4:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		switch(EXT_INT2_SENSE_CTRL) { /*sense ctrl setting*/
			case EXT_INT_SENSE_CONTROL_FALLING_EDGE: 
				CLR_BIT(EXTINT_MCUCSR, EXTINT_MCUCSR_ISC2); 
    18a8:	a4 e5       	ldi	r26, 0x54	; 84
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e4 e5       	ldi	r30, 0x54	; 84
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	8f 7b       	andi	r24, 0xBF	; 191
    18b4:	8c 93       	st	X, r24
			case EXT_INT_SENSE_CONTROL_RISING_EDGE:
				SET_BIT(EXTINT_MCUCSR, EXTINT_MCUCSR_ISC2);
				break;
			default: break;			
		}
		SET_BIT(EXTINT_GICR, EXTINT_GICR_INT2); /*enable Int2*/
    18b6:	ab e5       	ldi	r26, 0x5B	; 91
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	eb e5       	ldi	r30, 0x5B	; 91
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	80 62       	ori	r24, 0x20	; 32
    18c2:	8c 93       	st	X, r24
	#endif
}
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <ExtInt_voidDisableInt0>:



void ExtInt_voidDisableInt0() {
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTINT_GICR, EXTINT_GICR_INT0);
    18d2:	ab e5       	ldi	r26, 0x5B	; 91
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	eb e5       	ldi	r30, 0x5B	; 91
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	8f 7b       	andi	r24, 0xBF	; 191
    18de:	8c 93       	st	X, r24
}
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <ExtInt_voidDisableInt1>:
void ExtInt_voidDisableInt1() {
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTINT_GICR, EXTINT_GICR_INT1);
    18ee:	ab e5       	ldi	r26, 0x5B	; 91
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	eb e5       	ldi	r30, 0x5B	; 91
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	8f 77       	andi	r24, 0x7F	; 127
    18fa:	8c 93       	st	X, r24
}
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <ExtInt_voidDisableInt2>:
void ExtInt_voidDisableInt2() {
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTINT_GICR, EXTINT_GICR_INT2);
    190a:	ab e5       	ldi	r26, 0x5B	; 91
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	eb e5       	ldi	r30, 0x5B	; 91
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	8f 7d       	andi	r24, 0xDF	; 223
    1916:	8c 93       	st	X, r24
}
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <ExtInt_voidEnableInt0>:



void ExtInt_voidEnableInt0() {
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTINT_GICR, EXTINT_GICR_INT0);
    1926:	ab e5       	ldi	r26, 0x5B	; 91
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	eb e5       	ldi	r30, 0x5B	; 91
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	80 64       	ori	r24, 0x40	; 64
    1932:	8c 93       	st	X, r24
}
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <ExtInt_voidEnableInt1>:
void ExtInt_voidEnableInt1() {
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTINT_GICR, EXTINT_GICR_INT1);
    1942:	ab e5       	ldi	r26, 0x5B	; 91
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	eb e5       	ldi	r30, 0x5B	; 91
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	80 68       	ori	r24, 0x80	; 128
    194e:	8c 93       	st	X, r24
}
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <ExtInt_voidEnableInt2>:
void ExtInt_voidEnableInt2() {
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTINT_GICR, EXTINT_GICR_INT2);
    195e:	ab e5       	ldi	r26, 0x5B	; 91
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	eb e5       	ldi	r30, 0x5B	; 91
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	80 62       	ori	r24, 0x20	; 32
    196a:	8c 93       	st	X, r24
}
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <DIO_voidSetPortMode>:
#include "DIO_Interface.h"


/* function definitions */

void DIO_voidSetPortMode(DIO_PortId_t Copy_u8PortId, DIO_PortMode_t Copy_u8PortMode) {
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	00 d0       	rcall	.+0      	; 0x1978 <DIO_voidSetPortMode+0x6>
    1978:	00 d0       	rcall	.+0      	; 0x197a <DIO_voidSetPortMode+0x8>
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortId) {
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	3c 83       	std	Y+4, r19	; 0x04
    198a:	2b 83       	std	Y+3, r18	; 0x03
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	81 30       	cpi	r24, 0x01	; 1
    1992:	91 05       	cpc	r25, r1
    1994:	d1 f0       	breq	.+52     	; 0x19ca <DIO_voidSetPortMode+0x58>
    1996:	2b 81       	ldd	r18, Y+3	; 0x03
    1998:	3c 81       	ldd	r19, Y+4	; 0x04
    199a:	22 30       	cpi	r18, 0x02	; 2
    199c:	31 05       	cpc	r19, r1
    199e:	2c f4       	brge	.+10     	; 0x19aa <DIO_voidSetPortMode+0x38>
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	9c 81       	ldd	r25, Y+4	; 0x04
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	61 f0       	breq	.+24     	; 0x19c0 <DIO_voidSetPortMode+0x4e>
    19a8:	1e c0       	rjmp	.+60     	; 0x19e6 <DIO_voidSetPortMode+0x74>
    19aa:	2b 81       	ldd	r18, Y+3	; 0x03
    19ac:	3c 81       	ldd	r19, Y+4	; 0x04
    19ae:	22 30       	cpi	r18, 0x02	; 2
    19b0:	31 05       	cpc	r19, r1
    19b2:	81 f0       	breq	.+32     	; 0x19d4 <DIO_voidSetPortMode+0x62>
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9c 81       	ldd	r25, Y+4	; 0x04
    19b8:	83 30       	cpi	r24, 0x03	; 3
    19ba:	91 05       	cpc	r25, r1
    19bc:	81 f0       	breq	.+32     	; 0x19de <DIO_voidSetPortMode+0x6c>
    19be:	13 c0       	rjmp	.+38     	; 0x19e6 <DIO_voidSetPortMode+0x74>
		case DIO_PORT_A: DIO_DDRA = Copy_u8PortMode; break;
    19c0:	ea e3       	ldi	r30, 0x3A	; 58
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	80 83       	st	Z, r24
    19c8:	0e c0       	rjmp	.+28     	; 0x19e6 <DIO_voidSetPortMode+0x74>
		case DIO_PORT_B: DIO_DDRB = Copy_u8PortMode; break;
    19ca:	e7 e3       	ldi	r30, 0x37	; 55
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	80 83       	st	Z, r24
    19d2:	09 c0       	rjmp	.+18     	; 0x19e6 <DIO_voidSetPortMode+0x74>
		case DIO_PORT_C: DIO_DDRC = Copy_u8PortMode; break;
    19d4:	e4 e3       	ldi	r30, 0x34	; 52
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	80 83       	st	Z, r24
    19dc:	04 c0       	rjmp	.+8      	; 0x19e6 <DIO_voidSetPortMode+0x74>
		case DIO_PORT_D: DIO_DDRD = Copy_u8PortMode; break;
    19de:	e1 e3       	ldi	r30, 0x31	; 49
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	80 83       	st	Z, r24
		default: break;
	}
}
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	08 95       	ret

000019f4 <DIO_voidWritePortValue>:



void DIO_voidWritePortValue(DIO_PortId_t Copy_u8PortId, u8 Copy_u8PortValue) {
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	00 d0       	rcall	.+0      	; 0x19fa <DIO_voidWritePortValue+0x6>
    19fa:	00 d0       	rcall	.+0      	; 0x19fc <DIO_voidWritePortValue+0x8>
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	89 83       	std	Y+1, r24	; 0x01
    1a02:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortId) {
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	3c 83       	std	Y+4, r19	; 0x04
    1a0c:	2b 83       	std	Y+3, r18	; 0x03
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	9c 81       	ldd	r25, Y+4	; 0x04
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	91 05       	cpc	r25, r1
    1a16:	d1 f0       	breq	.+52     	; 0x1a4c <DIO_voidWritePortValue+0x58>
    1a18:	2b 81       	ldd	r18, Y+3	; 0x03
    1a1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a1c:	22 30       	cpi	r18, 0x02	; 2
    1a1e:	31 05       	cpc	r19, r1
    1a20:	2c f4       	brge	.+10     	; 0x1a2c <DIO_voidWritePortValue+0x38>
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	9c 81       	ldd	r25, Y+4	; 0x04
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	61 f0       	breq	.+24     	; 0x1a42 <DIO_voidWritePortValue+0x4e>
    1a2a:	1e c0       	rjmp	.+60     	; 0x1a68 <DIO_voidWritePortValue+0x74>
    1a2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a30:	22 30       	cpi	r18, 0x02	; 2
    1a32:	31 05       	cpc	r19, r1
    1a34:	81 f0       	breq	.+32     	; 0x1a56 <DIO_voidWritePortValue+0x62>
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3a:	83 30       	cpi	r24, 0x03	; 3
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	81 f0       	breq	.+32     	; 0x1a60 <DIO_voidWritePortValue+0x6c>
    1a40:	13 c0       	rjmp	.+38     	; 0x1a68 <DIO_voidWritePortValue+0x74>
		case DIO_PORT_A: DIO_PORTA = Copy_u8PortValue; break;
    1a42:	eb e3       	ldi	r30, 0x3B	; 59
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	80 83       	st	Z, r24
    1a4a:	0e c0       	rjmp	.+28     	; 0x1a68 <DIO_voidWritePortValue+0x74>
		case DIO_PORT_B: DIO_PORTB = Copy_u8PortValue; break;
    1a4c:	e8 e3       	ldi	r30, 0x38	; 56
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	80 83       	st	Z, r24
    1a54:	09 c0       	rjmp	.+18     	; 0x1a68 <DIO_voidWritePortValue+0x74>
		case DIO_PORT_C: DIO_PORTC = Copy_u8PortValue; break;
    1a56:	e5 e3       	ldi	r30, 0x35	; 53
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	80 83       	st	Z, r24
    1a5e:	04 c0       	rjmp	.+8      	; 0x1a68 <DIO_voidWritePortValue+0x74>
		case DIO_PORT_D: DIO_PORTD = Copy_u8PortValue; break;
    1a60:	e2 e3       	ldi	r30, 0x32	; 50
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	80 83       	st	Z, r24
		default: break;
	}
}
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <DIO_voidReadPortValue>:



u8 DIO_voidReadPortValue(DIO_PortId_t Copy_u8PortId) {
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <DIO_voidReadPortValue+0x6>
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <DIO_voidReadPortValue+0x8>
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortValue = 0;
    1a84:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortId) {
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	3c 83       	std	Y+4, r19	; 0x04
    1a8e:	2b 83       	std	Y+3, r18	; 0x03
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	91 05       	cpc	r25, r1
    1a98:	d1 f0       	breq	.+52     	; 0x1ace <DIO_voidReadPortValue+0x58>
    1a9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a9e:	22 30       	cpi	r18, 0x02	; 2
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	2c f4       	brge	.+10     	; 0x1aae <DIO_voidReadPortValue+0x38>
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	61 f0       	breq	.+24     	; 0x1ac4 <DIO_voidReadPortValue+0x4e>
    1aac:	1e c0       	rjmp	.+60     	; 0x1aea <DIO_voidReadPortValue+0x74>
    1aae:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab2:	22 30       	cpi	r18, 0x02	; 2
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	81 f0       	breq	.+32     	; 0x1ad8 <DIO_voidReadPortValue+0x62>
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	83 30       	cpi	r24, 0x03	; 3
    1abe:	91 05       	cpc	r25, r1
    1ac0:	81 f0       	breq	.+32     	; 0x1ae2 <DIO_voidReadPortValue+0x6c>
    1ac2:	13 c0       	rjmp	.+38     	; 0x1aea <DIO_voidReadPortValue+0x74>
		case DIO_PORT_A: Local_u8PortValue = DIO_PINA; break;
    1ac4:	e9 e3       	ldi	r30, 0x39	; 57
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	0e c0       	rjmp	.+28     	; 0x1aea <DIO_voidReadPortValue+0x74>
		case DIO_PORT_B: Local_u8PortValue = DIO_PINB; break;
    1ace:	e6 e3       	ldi	r30, 0x36	; 54
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	09 c0       	rjmp	.+18     	; 0x1aea <DIO_voidReadPortValue+0x74>
		case DIO_PORT_C: Local_u8PortValue = DIO_PINC; break;
    1ad8:	e3 e3       	ldi	r30, 0x33	; 51
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	89 83       	std	Y+1, r24	; 0x01
    1ae0:	04 c0       	rjmp	.+8      	; 0x1aea <DIO_voidReadPortValue+0x74>
		case DIO_PORT_D: Local_u8PortValue = DIO_PIND; break;
    1ae2:	e0 e3       	ldi	r30, 0x30	; 48
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	89 83       	std	Y+1, r24	; 0x01
		default: break;
	}
	return Local_u8PortValue;
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <DIO_voidSetPinMode>:



void DIO_voidSetPinMode(DIO_Pin_t Copy_u8Pin, DIO_PinMode_t Copy_u8PinMode) {
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	00 d0       	rcall	.+0      	; 0x1b00 <DIO_voidSetPinMode+0x6>
    1b00:	00 d0       	rcall	.+0      	; 0x1b02 <DIO_voidSetPinMode+0x8>
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <DIO_voidSetPinMode+0xa>
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	8b 83       	std	Y+3, r24	; 0x03
    1b0a:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8PinId = Copy_u8Pin % 10;
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9a e0       	ldi	r25, 0x0A	; 10
    1b10:	69 2f       	mov	r22, r25
    1b12:	0e 94 20 1b 	call	0x3640	; 0x3640 <__udivmodqi4>
    1b16:	89 2f       	mov	r24, r25
    1b18:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortId = (Copy_u8Pin / 10) - 1;
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	9a e0       	ldi	r25, 0x0A	; 10
    1b1e:	69 2f       	mov	r22, r25
    1b20:	0e 94 20 1b 	call	0x3640	; 0x3640 <__udivmodqi4>
    1b24:	81 50       	subi	r24, 0x01	; 1
    1b26:	89 83       	std	Y+1, r24	; 0x01

	switch(Local_u8PortId) {
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	3e 83       	std	Y+6, r19	; 0x06
    1b30:	2d 83       	std	Y+5, r18	; 0x05
    1b32:	6d 81       	ldd	r22, Y+5	; 0x05
    1b34:	7e 81       	ldd	r23, Y+6	; 0x06
    1b36:	61 30       	cpi	r22, 0x01	; 1
    1b38:	71 05       	cpc	r23, r1
    1b3a:	d1 f1       	breq	.+116    	; 0x1bb0 <DIO_voidSetPinMode+0xb6>
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b40:	82 30       	cpi	r24, 0x02	; 2
    1b42:	91 05       	cpc	r25, r1
    1b44:	34 f4       	brge	.+12     	; 0x1b52 <DIO_voidSetPinMode+0x58>
    1b46:	2d 81       	ldd	r18, Y+5	; 0x05
    1b48:	3e 81       	ldd	r19, Y+6	; 0x06
    1b4a:	21 15       	cp	r18, r1
    1b4c:	31 05       	cpc	r19, r1
    1b4e:	71 f0       	breq	.+28     	; 0x1b6c <DIO_voidSetPinMode+0x72>
    1b50:	94 c0       	rjmp	.+296    	; 0x1c7a <DIO_voidSetPinMode+0x180>
    1b52:	6d 81       	ldd	r22, Y+5	; 0x05
    1b54:	7e 81       	ldd	r23, Y+6	; 0x06
    1b56:	62 30       	cpi	r22, 0x02	; 2
    1b58:	71 05       	cpc	r23, r1
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <DIO_voidSetPinMode+0x64>
    1b5c:	4b c0       	rjmp	.+150    	; 0x1bf4 <DIO_voidSetPinMode+0xfa>
    1b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b60:	9e 81       	ldd	r25, Y+6	; 0x06
    1b62:	83 30       	cpi	r24, 0x03	; 3
    1b64:	91 05       	cpc	r25, r1
    1b66:	09 f4       	brne	.+2      	; 0x1b6a <DIO_voidSetPinMode+0x70>
    1b68:	67 c0       	rjmp	.+206    	; 0x1c38 <DIO_voidSetPinMode+0x13e>
    1b6a:	87 c0       	rjmp	.+270    	; 0x1c7a <DIO_voidSetPinMode+0x180>
		case DIO_PORT_A: WRT_BIT(DIO_DDRA, Local_u8PinId, Copy_u8PinMode); break;
    1b6c:	aa e3       	ldi	r26, 0x3A	; 58
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	ea e3       	ldi	r30, 0x3A	; 58
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	48 2f       	mov	r20, r24
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <DIO_voidSetPinMode+0x8e>
    1b84:	88 0f       	add	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	2a 95       	dec	r18
    1b8a:	e2 f7       	brpl	.-8      	; 0x1b84 <DIO_voidSetPinMode+0x8a>
    1b8c:	80 95       	com	r24
    1b8e:	48 23       	and	r20, r24
    1b90:	8c 81       	ldd	r24, Y+4	; 0x04
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	88 2f       	mov	r24, r24
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	b9 01       	movw	r22, r18
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <DIO_voidSetPinMode+0xaa>
    1ba0:	66 0f       	add	r22, r22
    1ba2:	77 1f       	adc	r23, r23
    1ba4:	8a 95       	dec	r24
    1ba6:	e2 f7       	brpl	.-8      	; 0x1ba0 <DIO_voidSetPinMode+0xa6>
    1ba8:	cb 01       	movw	r24, r22
    1baa:	84 2b       	or	r24, r20
    1bac:	8c 93       	st	X, r24
    1bae:	65 c0       	rjmp	.+202    	; 0x1c7a <DIO_voidSetPinMode+0x180>
		case DIO_PORT_B: WRT_BIT(DIO_DDRB, Local_u8PinId, Copy_u8PinMode); break;
    1bb0:	a7 e3       	ldi	r26, 0x37	; 55
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e7 e3       	ldi	r30, 0x37	; 55
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	48 2f       	mov	r20, r24
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <DIO_voidSetPinMode+0xd2>
    1bc8:	88 0f       	add	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	2a 95       	dec	r18
    1bce:	e2 f7       	brpl	.-8      	; 0x1bc8 <DIO_voidSetPinMode+0xce>
    1bd0:	80 95       	com	r24
    1bd2:	48 23       	and	r20, r24
    1bd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	88 2f       	mov	r24, r24
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	b9 01       	movw	r22, r18
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <DIO_voidSetPinMode+0xee>
    1be4:	66 0f       	add	r22, r22
    1be6:	77 1f       	adc	r23, r23
    1be8:	8a 95       	dec	r24
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <DIO_voidSetPinMode+0xea>
    1bec:	cb 01       	movw	r24, r22
    1bee:	84 2b       	or	r24, r20
    1bf0:	8c 93       	st	X, r24
    1bf2:	43 c0       	rjmp	.+134    	; 0x1c7a <DIO_voidSetPinMode+0x180>
		case DIO_PORT_C: WRT_BIT(DIO_DDRC, Local_u8PinId, Copy_u8PinMode); break;
    1bf4:	a4 e3       	ldi	r26, 0x34	; 52
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e4 e3       	ldi	r30, 0x34	; 52
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	48 2f       	mov	r20, r24
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <DIO_voidSetPinMode+0x116>
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	2a 95       	dec	r18
    1c12:	e2 f7       	brpl	.-8      	; 0x1c0c <DIO_voidSetPinMode+0x112>
    1c14:	80 95       	com	r24
    1c16:	48 23       	and	r20, r24
    1c18:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	88 2f       	mov	r24, r24
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	b9 01       	movw	r22, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <DIO_voidSetPinMode+0x132>
    1c28:	66 0f       	add	r22, r22
    1c2a:	77 1f       	adc	r23, r23
    1c2c:	8a 95       	dec	r24
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <DIO_voidSetPinMode+0x12e>
    1c30:	cb 01       	movw	r24, r22
    1c32:	84 2b       	or	r24, r20
    1c34:	8c 93       	st	X, r24
    1c36:	21 c0       	rjmp	.+66     	; 0x1c7a <DIO_voidSetPinMode+0x180>
		case DIO_PORT_D: WRT_BIT(DIO_DDRD, Local_u8PinId, Copy_u8PinMode); break;
    1c38:	a1 e3       	ldi	r26, 0x31	; 49
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e1 e3       	ldi	r30, 0x31	; 49
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	48 2f       	mov	r20, r24
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <DIO_voidSetPinMode+0x15a>
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	2a 95       	dec	r18
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <DIO_voidSetPinMode+0x156>
    1c58:	80 95       	com	r24
    1c5a:	48 23       	and	r20, r24
    1c5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	88 2f       	mov	r24, r24
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	b9 01       	movw	r22, r18
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <DIO_voidSetPinMode+0x176>
    1c6c:	66 0f       	add	r22, r22
    1c6e:	77 1f       	adc	r23, r23
    1c70:	8a 95       	dec	r24
    1c72:	e2 f7       	brpl	.-8      	; 0x1c6c <DIO_voidSetPinMode+0x172>
    1c74:	cb 01       	movw	r24, r22
    1c76:	84 2b       	or	r24, r20
    1c78:	8c 93       	st	X, r24
		default: break;
	}
}
    1c7a:	26 96       	adiw	r28, 0x06	; 6
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(DIO_Pin_t Copy_u8Pin) {
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <DIO_voidSetPinValue+0x6>
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <DIO_voidSetPinValue+0x8>
    1c94:	0f 92       	push	r0
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PinId = Copy_u8Pin % 10;
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	9a e0       	ldi	r25, 0x0A	; 10
    1ca0:	69 2f       	mov	r22, r25
    1ca2:	0e 94 20 1b 	call	0x3640	; 0x3640 <__udivmodqi4>
    1ca6:	89 2f       	mov	r24, r25
    1ca8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortId = (Copy_u8Pin / 10) - 1;
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	9a e0       	ldi	r25, 0x0A	; 10
    1cae:	69 2f       	mov	r22, r25
    1cb0:	0e 94 20 1b 	call	0x3640	; 0x3640 <__udivmodqi4>
    1cb4:	81 50       	subi	r24, 0x01	; 1
    1cb6:	89 83       	std	Y+1, r24	; 0x01

	switch(Local_u8PortId) {
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	3d 83       	std	Y+5, r19	; 0x05
    1cc0:	2c 83       	std	Y+4, r18	; 0x04
    1cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	91 05       	cpc	r25, r1
    1cca:	49 f1       	breq	.+82     	; 0x1d1e <DIO_voidSetPinValue+0x92>
    1ccc:	2c 81       	ldd	r18, Y+4	; 0x04
    1cce:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd0:	22 30       	cpi	r18, 0x02	; 2
    1cd2:	31 05       	cpc	r19, r1
    1cd4:	2c f4       	brge	.+10     	; 0x1ce0 <DIO_voidSetPinValue+0x54>
    1cd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	61 f0       	breq	.+24     	; 0x1cf6 <DIO_voidSetPinValue+0x6a>
    1cde:	5a c0       	rjmp	.+180    	; 0x1d94 <DIO_voidSetPinValue+0x108>
    1ce0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce4:	22 30       	cpi	r18, 0x02	; 2
    1ce6:	31 05       	cpc	r19, r1
    1ce8:	71 f1       	breq	.+92     	; 0x1d46 <DIO_voidSetPinValue+0xba>
    1cea:	8c 81       	ldd	r24, Y+4	; 0x04
    1cec:	9d 81       	ldd	r25, Y+5	; 0x05
    1cee:	83 30       	cpi	r24, 0x03	; 3
    1cf0:	91 05       	cpc	r25, r1
    1cf2:	e9 f1       	breq	.+122    	; 0x1d6e <DIO_voidSetPinValue+0xe2>
    1cf4:	4f c0       	rjmp	.+158    	; 0x1d94 <DIO_voidSetPinValue+0x108>
		case DIO_PORT_A: SET_BIT(DIO_PORTA, Local_u8PinId); break;
    1cf6:	ab e3       	ldi	r26, 0x3B	; 59
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	eb e3       	ldi	r30, 0x3B	; 59
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	48 2f       	mov	r20, r24
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 2e       	mov	r0, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <DIO_voidSetPinValue+0x88>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <DIO_voidSetPinValue+0x84>
    1d18:	84 2b       	or	r24, r20
    1d1a:	8c 93       	st	X, r24
    1d1c:	3b c0       	rjmp	.+118    	; 0x1d94 <DIO_voidSetPinValue+0x108>
		case DIO_PORT_B: SET_BIT(DIO_PORTB, Local_u8PinId); break;
    1d1e:	a8 e3       	ldi	r26, 0x38	; 56
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e8 e3       	ldi	r30, 0x38	; 56
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	48 2f       	mov	r20, r24
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	02 2e       	mov	r0, r18
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <DIO_voidSetPinValue+0xb0>
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	0a 94       	dec	r0
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <DIO_voidSetPinValue+0xac>
    1d40:	84 2b       	or	r24, r20
    1d42:	8c 93       	st	X, r24
    1d44:	27 c0       	rjmp	.+78     	; 0x1d94 <DIO_voidSetPinValue+0x108>
		case DIO_PORT_C: SET_BIT(DIO_PORTC, Local_u8PinId); break;
    1d46:	a5 e3       	ldi	r26, 0x35	; 53
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e5 e3       	ldi	r30, 0x35	; 53
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	48 2f       	mov	r20, r24
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	02 2e       	mov	r0, r18
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <DIO_voidSetPinValue+0xd8>
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	0a 94       	dec	r0
    1d66:	e2 f7       	brpl	.-8      	; 0x1d60 <DIO_voidSetPinValue+0xd4>
    1d68:	84 2b       	or	r24, r20
    1d6a:	8c 93       	st	X, r24
    1d6c:	13 c0       	rjmp	.+38     	; 0x1d94 <DIO_voidSetPinValue+0x108>
		case DIO_PORT_D: SET_BIT(DIO_PORTD, Local_u8PinId); break;
    1d6e:	a2 e3       	ldi	r26, 0x32	; 50
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e2 e3       	ldi	r30, 0x32	; 50
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	48 2f       	mov	r20, r24
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	02 2e       	mov	r0, r18
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <DIO_voidSetPinValue+0x100>
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	0a 94       	dec	r0
    1d8e:	e2 f7       	brpl	.-8      	; 0x1d88 <DIO_voidSetPinValue+0xfc>
    1d90:	84 2b       	or	r24, r20
    1d92:	8c 93       	st	X, r24
		default: break;
	}
}
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	08 95       	ret

00001da4 <DIO_voidClearPinValue>:




void DIO_voidClearPinValue(DIO_Pin_t Copy_u8Pin) {
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <DIO_voidClearPinValue+0x6>
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <DIO_voidClearPinValue+0x8>
    1dac:	0f 92       	push	r0
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    1db2:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PinId = Copy_u8Pin % 10;
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	9a e0       	ldi	r25, 0x0A	; 10
    1db8:	69 2f       	mov	r22, r25
    1dba:	0e 94 20 1b 	call	0x3640	; 0x3640 <__udivmodqi4>
    1dbe:	89 2f       	mov	r24, r25
    1dc0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortId = (Copy_u8Pin / 10) - 1;
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	9a e0       	ldi	r25, 0x0A	; 10
    1dc6:	69 2f       	mov	r22, r25
    1dc8:	0e 94 20 1b 	call	0x3640	; 0x3640 <__udivmodqi4>
    1dcc:	81 50       	subi	r24, 0x01	; 1
    1dce:	89 83       	std	Y+1, r24	; 0x01

	switch(Local_u8PortId) {
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	3d 83       	std	Y+5, r19	; 0x05
    1dd8:	2c 83       	std	Y+4, r18	; 0x04
    1dda:	8c 81       	ldd	r24, Y+4	; 0x04
    1ddc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dde:	81 30       	cpi	r24, 0x01	; 1
    1de0:	91 05       	cpc	r25, r1
    1de2:	59 f1       	breq	.+86     	; 0x1e3a <DIO_voidClearPinValue+0x96>
    1de4:	2c 81       	ldd	r18, Y+4	; 0x04
    1de6:	3d 81       	ldd	r19, Y+5	; 0x05
    1de8:	22 30       	cpi	r18, 0x02	; 2
    1dea:	31 05       	cpc	r19, r1
    1dec:	2c f4       	brge	.+10     	; 0x1df8 <DIO_voidClearPinValue+0x54>
    1dee:	8c 81       	ldd	r24, Y+4	; 0x04
    1df0:	9d 81       	ldd	r25, Y+5	; 0x05
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	69 f0       	breq	.+26     	; 0x1e10 <DIO_voidClearPinValue+0x6c>
    1df6:	5f c0       	rjmp	.+190    	; 0x1eb6 <DIO_voidClearPinValue+0x112>
    1df8:	2c 81       	ldd	r18, Y+4	; 0x04
    1dfa:	3d 81       	ldd	r19, Y+5	; 0x05
    1dfc:	22 30       	cpi	r18, 0x02	; 2
    1dfe:	31 05       	cpc	r19, r1
    1e00:	89 f1       	breq	.+98     	; 0x1e64 <DIO_voidClearPinValue+0xc0>
    1e02:	8c 81       	ldd	r24, Y+4	; 0x04
    1e04:	9d 81       	ldd	r25, Y+5	; 0x05
    1e06:	83 30       	cpi	r24, 0x03	; 3
    1e08:	91 05       	cpc	r25, r1
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <DIO_voidClearPinValue+0x6a>
    1e0c:	40 c0       	rjmp	.+128    	; 0x1e8e <DIO_voidClearPinValue+0xea>
    1e0e:	53 c0       	rjmp	.+166    	; 0x1eb6 <DIO_voidClearPinValue+0x112>
		case DIO_PORT_A: CLR_BIT(DIO_PORTA, Local_u8PinId); break;
    1e10:	ab e3       	ldi	r26, 0x3B	; 59
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	eb e3       	ldi	r30, 0x3B	; 59
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	48 2f       	mov	r20, r24
    1e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	02 2e       	mov	r0, r18
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <DIO_voidClearPinValue+0x8a>
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	0a 94       	dec	r0
    1e30:	e2 f7       	brpl	.-8      	; 0x1e2a <DIO_voidClearPinValue+0x86>
    1e32:	80 95       	com	r24
    1e34:	84 23       	and	r24, r20
    1e36:	8c 93       	st	X, r24
    1e38:	3e c0       	rjmp	.+124    	; 0x1eb6 <DIO_voidClearPinValue+0x112>
		case DIO_PORT_B: CLR_BIT(DIO_PORTB, Local_u8PinId); break;
    1e3a:	a8 e3       	ldi	r26, 0x38	; 56
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e8 e3       	ldi	r30, 0x38	; 56
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	48 2f       	mov	r20, r24
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	02 2e       	mov	r0, r18
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <DIO_voidClearPinValue+0xb4>
    1e54:	88 0f       	add	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	0a 94       	dec	r0
    1e5a:	e2 f7       	brpl	.-8      	; 0x1e54 <DIO_voidClearPinValue+0xb0>
    1e5c:	80 95       	com	r24
    1e5e:	84 23       	and	r24, r20
    1e60:	8c 93       	st	X, r24
    1e62:	29 c0       	rjmp	.+82     	; 0x1eb6 <DIO_voidClearPinValue+0x112>
		case DIO_PORT_C: CLR_BIT(DIO_PORTC, Local_u8PinId); break;
    1e64:	a5 e3       	ldi	r26, 0x35	; 53
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e5 e3       	ldi	r30, 0x35	; 53
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	48 2f       	mov	r20, r24
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	28 2f       	mov	r18, r24
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	02 2e       	mov	r0, r18
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <DIO_voidClearPinValue+0xde>
    1e7e:	88 0f       	add	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	0a 94       	dec	r0
    1e84:	e2 f7       	brpl	.-8      	; 0x1e7e <DIO_voidClearPinValue+0xda>
    1e86:	80 95       	com	r24
    1e88:	84 23       	and	r24, r20
    1e8a:	8c 93       	st	X, r24
    1e8c:	14 c0       	rjmp	.+40     	; 0x1eb6 <DIO_voidClearPinValue+0x112>
		case DIO_PORT_D: CLR_BIT(DIO_PORTD, Local_u8PinId); break;
    1e8e:	a2 e3       	ldi	r26, 0x32	; 50
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e2 e3       	ldi	r30, 0x32	; 50
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	48 2f       	mov	r20, r24
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	02 2e       	mov	r0, r18
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <DIO_voidClearPinValue+0x108>
    1ea8:	88 0f       	add	r24, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	0a 94       	dec	r0
    1eae:	e2 f7       	brpl	.-8      	; 0x1ea8 <DIO_voidClearPinValue+0x104>
    1eb0:	80 95       	com	r24
    1eb2:	84 23       	and	r24, r20
    1eb4:	8c 93       	st	X, r24
		default: break;
	}
}
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <DIO_voidTogglePinValue>:



void DIO_voidTogglePinValue(DIO_Pin_t Copy_u8Pin) {
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <DIO_voidTogglePinValue+0x6>
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <DIO_voidTogglePinValue+0x8>
    1ece:	0f 92       	push	r0
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PinId = Copy_u8Pin % 10;
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	9a e0       	ldi	r25, 0x0A	; 10
    1eda:	69 2f       	mov	r22, r25
    1edc:	0e 94 20 1b 	call	0x3640	; 0x3640 <__udivmodqi4>
    1ee0:	89 2f       	mov	r24, r25
    1ee2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortId = (Copy_u8Pin / 10) - 1;
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	9a e0       	ldi	r25, 0x0A	; 10
    1ee8:	69 2f       	mov	r22, r25
    1eea:	0e 94 20 1b 	call	0x3640	; 0x3640 <__udivmodqi4>
    1eee:	81 50       	subi	r24, 0x01	; 1
    1ef0:	89 83       	std	Y+1, r24	; 0x01

	switch(Local_u8PortId) {
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	3d 83       	std	Y+5, r19	; 0x05
    1efa:	2c 83       	std	Y+4, r18	; 0x04
    1efc:	8c 81       	ldd	r24, Y+4	; 0x04
    1efe:	9d 81       	ldd	r25, Y+5	; 0x05
    1f00:	81 30       	cpi	r24, 0x01	; 1
    1f02:	91 05       	cpc	r25, r1
    1f04:	49 f1       	breq	.+82     	; 0x1f58 <DIO_voidTogglePinValue+0x92>
    1f06:	2c 81       	ldd	r18, Y+4	; 0x04
    1f08:	3d 81       	ldd	r19, Y+5	; 0x05
    1f0a:	22 30       	cpi	r18, 0x02	; 2
    1f0c:	31 05       	cpc	r19, r1
    1f0e:	2c f4       	brge	.+10     	; 0x1f1a <DIO_voidTogglePinValue+0x54>
    1f10:	8c 81       	ldd	r24, Y+4	; 0x04
    1f12:	9d 81       	ldd	r25, Y+5	; 0x05
    1f14:	00 97       	sbiw	r24, 0x00	; 0
    1f16:	61 f0       	breq	.+24     	; 0x1f30 <DIO_voidTogglePinValue+0x6a>
    1f18:	5a c0       	rjmp	.+180    	; 0x1fce <DIO_voidTogglePinValue+0x108>
    1f1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f1e:	22 30       	cpi	r18, 0x02	; 2
    1f20:	31 05       	cpc	r19, r1
    1f22:	71 f1       	breq	.+92     	; 0x1f80 <DIO_voidTogglePinValue+0xba>
    1f24:	8c 81       	ldd	r24, Y+4	; 0x04
    1f26:	9d 81       	ldd	r25, Y+5	; 0x05
    1f28:	83 30       	cpi	r24, 0x03	; 3
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	e9 f1       	breq	.+122    	; 0x1fa8 <DIO_voidTogglePinValue+0xe2>
    1f2e:	4f c0       	rjmp	.+158    	; 0x1fce <DIO_voidTogglePinValue+0x108>
		case DIO_PORT_A: TOG_BIT(DIO_PORTA, Local_u8PinId); break;
    1f30:	ab e3       	ldi	r26, 0x3B	; 59
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	eb e3       	ldi	r30, 0x3B	; 59
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	48 2f       	mov	r20, r24
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	02 2e       	mov	r0, r18
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <DIO_voidTogglePinValue+0x88>
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	0a 94       	dec	r0
    1f50:	e2 f7       	brpl	.-8      	; 0x1f4a <DIO_voidTogglePinValue+0x84>
    1f52:	84 27       	eor	r24, r20
    1f54:	8c 93       	st	X, r24
    1f56:	3b c0       	rjmp	.+118    	; 0x1fce <DIO_voidTogglePinValue+0x108>
		case DIO_PORT_B: TOG_BIT(DIO_PORTB, Local_u8PinId); break;
    1f58:	a8 e3       	ldi	r26, 0x38	; 56
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e8 e3       	ldi	r30, 0x38	; 56
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	48 2f       	mov	r20, r24
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	02 2e       	mov	r0, r18
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <DIO_voidTogglePinValue+0xb0>
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	0a 94       	dec	r0
    1f78:	e2 f7       	brpl	.-8      	; 0x1f72 <DIO_voidTogglePinValue+0xac>
    1f7a:	84 27       	eor	r24, r20
    1f7c:	8c 93       	st	X, r24
    1f7e:	27 c0       	rjmp	.+78     	; 0x1fce <DIO_voidTogglePinValue+0x108>
		case DIO_PORT_C: TOG_BIT(DIO_PORTC, Local_u8PinId); break;
    1f80:	a5 e3       	ldi	r26, 0x35	; 53
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	e5 e3       	ldi	r30, 0x35	; 53
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	48 2f       	mov	r20, r24
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	02 2e       	mov	r0, r18
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <DIO_voidTogglePinValue+0xd8>
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	0a 94       	dec	r0
    1fa0:	e2 f7       	brpl	.-8      	; 0x1f9a <DIO_voidTogglePinValue+0xd4>
    1fa2:	84 27       	eor	r24, r20
    1fa4:	8c 93       	st	X, r24
    1fa6:	13 c0       	rjmp	.+38     	; 0x1fce <DIO_voidTogglePinValue+0x108>
		case DIO_PORT_D: TOG_BIT(DIO_PORTD, Local_u8PinId); break;
    1fa8:	a2 e3       	ldi	r26, 0x32	; 50
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e2 e3       	ldi	r30, 0x32	; 50
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	48 2f       	mov	r20, r24
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	02 2e       	mov	r0, r18
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <DIO_voidTogglePinValue+0x100>
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	0a 94       	dec	r0
    1fc8:	e2 f7       	brpl	.-8      	; 0x1fc2 <DIO_voidTogglePinValue+0xfc>
    1fca:	84 27       	eor	r24, r20
    1fcc:	8c 93       	st	X, r24
		default: break;
	}
}
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <DIO_voidWritePinValue>:



void DIO_voidWritePinValue(DIO_Pin_t Copy_u8Pin, DIO_PinValue_t Copy_u8Value) {
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	00 d0       	rcall	.+0      	; 0x1fe4 <DIO_voidWritePinValue+0x6>
    1fe4:	00 d0       	rcall	.+0      	; 0x1fe6 <DIO_voidWritePinValue+0x8>
    1fe6:	00 d0       	rcall	.+0      	; 0x1fe8 <DIO_voidWritePinValue+0xa>
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	8b 83       	std	Y+3, r24	; 0x03
    1fee:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8PinId = Copy_u8Pin % 10;
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	9a e0       	ldi	r25, 0x0A	; 10
    1ff4:	69 2f       	mov	r22, r25
    1ff6:	0e 94 20 1b 	call	0x3640	; 0x3640 <__udivmodqi4>
    1ffa:	89 2f       	mov	r24, r25
    1ffc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortId = (Copy_u8Pin / 10) - 1;
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	9a e0       	ldi	r25, 0x0A	; 10
    2002:	69 2f       	mov	r22, r25
    2004:	0e 94 20 1b 	call	0x3640	; 0x3640 <__udivmodqi4>
    2008:	81 50       	subi	r24, 0x01	; 1
    200a:	89 83       	std	Y+1, r24	; 0x01

	switch(Local_u8PortId) {
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	3e 83       	std	Y+6, r19	; 0x06
    2014:	2d 83       	std	Y+5, r18	; 0x05
    2016:	6d 81       	ldd	r22, Y+5	; 0x05
    2018:	7e 81       	ldd	r23, Y+6	; 0x06
    201a:	61 30       	cpi	r22, 0x01	; 1
    201c:	71 05       	cpc	r23, r1
    201e:	d1 f1       	breq	.+116    	; 0x2094 <DIO_voidWritePinValue+0xb6>
    2020:	8d 81       	ldd	r24, Y+5	; 0x05
    2022:	9e 81       	ldd	r25, Y+6	; 0x06
    2024:	82 30       	cpi	r24, 0x02	; 2
    2026:	91 05       	cpc	r25, r1
    2028:	34 f4       	brge	.+12     	; 0x2036 <DIO_voidWritePinValue+0x58>
    202a:	2d 81       	ldd	r18, Y+5	; 0x05
    202c:	3e 81       	ldd	r19, Y+6	; 0x06
    202e:	21 15       	cp	r18, r1
    2030:	31 05       	cpc	r19, r1
    2032:	71 f0       	breq	.+28     	; 0x2050 <DIO_voidWritePinValue+0x72>
    2034:	94 c0       	rjmp	.+296    	; 0x215e <DIO_voidWritePinValue+0x180>
    2036:	6d 81       	ldd	r22, Y+5	; 0x05
    2038:	7e 81       	ldd	r23, Y+6	; 0x06
    203a:	62 30       	cpi	r22, 0x02	; 2
    203c:	71 05       	cpc	r23, r1
    203e:	09 f4       	brne	.+2      	; 0x2042 <DIO_voidWritePinValue+0x64>
    2040:	4b c0       	rjmp	.+150    	; 0x20d8 <DIO_voidWritePinValue+0xfa>
    2042:	8d 81       	ldd	r24, Y+5	; 0x05
    2044:	9e 81       	ldd	r25, Y+6	; 0x06
    2046:	83 30       	cpi	r24, 0x03	; 3
    2048:	91 05       	cpc	r25, r1
    204a:	09 f4       	brne	.+2      	; 0x204e <DIO_voidWritePinValue+0x70>
    204c:	67 c0       	rjmp	.+206    	; 0x211c <DIO_voidWritePinValue+0x13e>
    204e:	87 c0       	rjmp	.+270    	; 0x215e <DIO_voidWritePinValue+0x180>
		case DIO_PORT_A: WRT_BIT(DIO_PORTA, Local_u8PinId, Copy_u8Value); break;
    2050:	ab e3       	ldi	r26, 0x3B	; 59
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	eb e3       	ldi	r30, 0x3B	; 59
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	48 2f       	mov	r20, r24
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	28 2f       	mov	r18, r24
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	02 c0       	rjmp	.+4      	; 0x206c <DIO_voidWritePinValue+0x8e>
    2068:	88 0f       	add	r24, r24
    206a:	99 1f       	adc	r25, r25
    206c:	2a 95       	dec	r18
    206e:	e2 f7       	brpl	.-8      	; 0x2068 <DIO_voidWritePinValue+0x8a>
    2070:	80 95       	com	r24
    2072:	48 23       	and	r20, r24
    2074:	8c 81       	ldd	r24, Y+4	; 0x04
    2076:	28 2f       	mov	r18, r24
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	88 2f       	mov	r24, r24
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	b9 01       	movw	r22, r18
    2082:	02 c0       	rjmp	.+4      	; 0x2088 <DIO_voidWritePinValue+0xaa>
    2084:	66 0f       	add	r22, r22
    2086:	77 1f       	adc	r23, r23
    2088:	8a 95       	dec	r24
    208a:	e2 f7       	brpl	.-8      	; 0x2084 <DIO_voidWritePinValue+0xa6>
    208c:	cb 01       	movw	r24, r22
    208e:	84 2b       	or	r24, r20
    2090:	8c 93       	st	X, r24
    2092:	65 c0       	rjmp	.+202    	; 0x215e <DIO_voidWritePinValue+0x180>
		case DIO_PORT_B: WRT_BIT(DIO_PORTB, Local_u8PinId, Copy_u8Value); break;
    2094:	a8 e3       	ldi	r26, 0x38	; 56
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e8 e3       	ldi	r30, 0x38	; 56
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	48 2f       	mov	r20, r24
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <DIO_voidWritePinValue+0xd2>
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	2a 95       	dec	r18
    20b2:	e2 f7       	brpl	.-8      	; 0x20ac <DIO_voidWritePinValue+0xce>
    20b4:	80 95       	com	r24
    20b6:	48 23       	and	r20, r24
    20b8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ba:	28 2f       	mov	r18, r24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	88 2f       	mov	r24, r24
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	b9 01       	movw	r22, r18
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <DIO_voidWritePinValue+0xee>
    20c8:	66 0f       	add	r22, r22
    20ca:	77 1f       	adc	r23, r23
    20cc:	8a 95       	dec	r24
    20ce:	e2 f7       	brpl	.-8      	; 0x20c8 <DIO_voidWritePinValue+0xea>
    20d0:	cb 01       	movw	r24, r22
    20d2:	84 2b       	or	r24, r20
    20d4:	8c 93       	st	X, r24
    20d6:	43 c0       	rjmp	.+134    	; 0x215e <DIO_voidWritePinValue+0x180>
		case DIO_PORT_C: WRT_BIT(DIO_PORTC, Local_u8PinId, Copy_u8Value); break;
    20d8:	a5 e3       	ldi	r26, 0x35	; 53
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	e5 e3       	ldi	r30, 0x35	; 53
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	48 2f       	mov	r20, r24
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	28 2f       	mov	r18, r24
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <DIO_voidWritePinValue+0x116>
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	2a 95       	dec	r18
    20f6:	e2 f7       	brpl	.-8      	; 0x20f0 <DIO_voidWritePinValue+0x112>
    20f8:	80 95       	com	r24
    20fa:	48 23       	and	r20, r24
    20fc:	8c 81       	ldd	r24, Y+4	; 0x04
    20fe:	28 2f       	mov	r18, r24
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	8a 81       	ldd	r24, Y+2	; 0x02
    2104:	88 2f       	mov	r24, r24
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	b9 01       	movw	r22, r18
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <DIO_voidWritePinValue+0x132>
    210c:	66 0f       	add	r22, r22
    210e:	77 1f       	adc	r23, r23
    2110:	8a 95       	dec	r24
    2112:	e2 f7       	brpl	.-8      	; 0x210c <DIO_voidWritePinValue+0x12e>
    2114:	cb 01       	movw	r24, r22
    2116:	84 2b       	or	r24, r20
    2118:	8c 93       	st	X, r24
    211a:	21 c0       	rjmp	.+66     	; 0x215e <DIO_voidWritePinValue+0x180>
		case DIO_PORT_D: WRT_BIT(DIO_PORTD, Local_u8PinId, Copy_u8Value); break;
    211c:	a2 e3       	ldi	r26, 0x32	; 50
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e2 e3       	ldi	r30, 0x32	; 50
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	48 2f       	mov	r20, r24
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	02 c0       	rjmp	.+4      	; 0x2138 <DIO_voidWritePinValue+0x15a>
    2134:	88 0f       	add	r24, r24
    2136:	99 1f       	adc	r25, r25
    2138:	2a 95       	dec	r18
    213a:	e2 f7       	brpl	.-8      	; 0x2134 <DIO_voidWritePinValue+0x156>
    213c:	80 95       	com	r24
    213e:	48 23       	and	r20, r24
    2140:	8c 81       	ldd	r24, Y+4	; 0x04
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	8a 81       	ldd	r24, Y+2	; 0x02
    2148:	88 2f       	mov	r24, r24
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	b9 01       	movw	r22, r18
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <DIO_voidWritePinValue+0x176>
    2150:	66 0f       	add	r22, r22
    2152:	77 1f       	adc	r23, r23
    2154:	8a 95       	dec	r24
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <DIO_voidWritePinValue+0x172>
    2158:	cb 01       	movw	r24, r22
    215a:	84 2b       	or	r24, r20
    215c:	8c 93       	st	X, r24
		default: break;
	}
}
    215e:	26 96       	adiw	r28, 0x06	; 6
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	08 95       	ret

00002170 <DIO_u8GetPinValue>:



DIO_PinValue_t DIO_u8GetPinValue(DIO_Pin_t Copy_u8Pin) {
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	00 d0       	rcall	.+0      	; 0x2176 <DIO_u8GetPinValue+0x6>
    2176:	00 d0       	rcall	.+0      	; 0x2178 <DIO_u8GetPinValue+0x8>
    2178:	00 d0       	rcall	.+0      	; 0x217a <DIO_u8GetPinValue+0xa>
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8PinId = Copy_u8Pin % 10;
    2180:	8c 81       	ldd	r24, Y+4	; 0x04
    2182:	9a e0       	ldi	r25, 0x0A	; 10
    2184:	69 2f       	mov	r22, r25
    2186:	0e 94 20 1b 	call	0x3640	; 0x3640 <__udivmodqi4>
    218a:	89 2f       	mov	r24, r25
    218c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PortId = (Copy_u8Pin / 10) - 1;
    218e:	8c 81       	ldd	r24, Y+4	; 0x04
    2190:	9a e0       	ldi	r25, 0x0A	; 10
    2192:	69 2f       	mov	r22, r25
    2194:	0e 94 20 1b 	call	0x3640	; 0x3640 <__udivmodqi4>
    2198:	81 50       	subi	r24, 0x01	; 1
    219a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue = 0;
    219c:	19 82       	std	Y+1, r1	; 0x01

	switch(Local_u8PortId) {
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	3e 83       	std	Y+6, r19	; 0x06
    21a6:	2d 83       	std	Y+5, r18	; 0x05
    21a8:	4d 81       	ldd	r20, Y+5	; 0x05
    21aa:	5e 81       	ldd	r21, Y+6	; 0x06
    21ac:	41 30       	cpi	r20, 0x01	; 1
    21ae:	51 05       	cpc	r21, r1
    21b0:	41 f1       	breq	.+80     	; 0x2202 <DIO_u8GetPinValue+0x92>
    21b2:	8d 81       	ldd	r24, Y+5	; 0x05
    21b4:	9e 81       	ldd	r25, Y+6	; 0x06
    21b6:	82 30       	cpi	r24, 0x02	; 2
    21b8:	91 05       	cpc	r25, r1
    21ba:	34 f4       	brge	.+12     	; 0x21c8 <DIO_u8GetPinValue+0x58>
    21bc:	2d 81       	ldd	r18, Y+5	; 0x05
    21be:	3e 81       	ldd	r19, Y+6	; 0x06
    21c0:	21 15       	cp	r18, r1
    21c2:	31 05       	cpc	r19, r1
    21c4:	61 f0       	breq	.+24     	; 0x21de <DIO_u8GetPinValue+0x6e>
    21c6:	52 c0       	rjmp	.+164    	; 0x226c <DIO_u8GetPinValue+0xfc>
    21c8:	4d 81       	ldd	r20, Y+5	; 0x05
    21ca:	5e 81       	ldd	r21, Y+6	; 0x06
    21cc:	42 30       	cpi	r20, 0x02	; 2
    21ce:	51 05       	cpc	r21, r1
    21d0:	51 f1       	breq	.+84     	; 0x2226 <DIO_u8GetPinValue+0xb6>
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	9e 81       	ldd	r25, Y+6	; 0x06
    21d6:	83 30       	cpi	r24, 0x03	; 3
    21d8:	91 05       	cpc	r25, r1
    21da:	b9 f1       	breq	.+110    	; 0x224a <DIO_u8GetPinValue+0xda>
    21dc:	47 c0       	rjmp	.+142    	; 0x226c <DIO_u8GetPinValue+0xfc>
		case DIO_PORT_A: Local_u8PinValue = GET_BIT(DIO_PINA, Local_u8PinId); break;
    21de:	e9 e3       	ldi	r30, 0x39	; 57
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	88 2f       	mov	r24, r24
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	a9 01       	movw	r20, r18
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <DIO_u8GetPinValue+0x86>
    21f2:	55 95       	asr	r21
    21f4:	47 95       	ror	r20
    21f6:	8a 95       	dec	r24
    21f8:	e2 f7       	brpl	.-8      	; 0x21f2 <DIO_u8GetPinValue+0x82>
    21fa:	ca 01       	movw	r24, r20
    21fc:	81 70       	andi	r24, 0x01	; 1
    21fe:	89 83       	std	Y+1, r24	; 0x01
    2200:	35 c0       	rjmp	.+106    	; 0x226c <DIO_u8GetPinValue+0xfc>
		case DIO_PORT_B: Local_u8PinValue = GET_BIT(DIO_PINB, Local_u8PinId); break;
    2202:	e6 e3       	ldi	r30, 0x36	; 54
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	88 2f       	mov	r24, r24
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	a9 01       	movw	r20, r18
    2214:	02 c0       	rjmp	.+4      	; 0x221a <DIO_u8GetPinValue+0xaa>
    2216:	55 95       	asr	r21
    2218:	47 95       	ror	r20
    221a:	8a 95       	dec	r24
    221c:	e2 f7       	brpl	.-8      	; 0x2216 <DIO_u8GetPinValue+0xa6>
    221e:	ca 01       	movw	r24, r20
    2220:	81 70       	andi	r24, 0x01	; 1
    2222:	89 83       	std	Y+1, r24	; 0x01
    2224:	23 c0       	rjmp	.+70     	; 0x226c <DIO_u8GetPinValue+0xfc>
		case DIO_PORT_C: Local_u8PinValue = GET_BIT(DIO_PINC, Local_u8PinId); break;
    2226:	e3 e3       	ldi	r30, 0x33	; 51
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	28 2f       	mov	r18, r24
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	88 2f       	mov	r24, r24
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	a9 01       	movw	r20, r18
    2238:	02 c0       	rjmp	.+4      	; 0x223e <DIO_u8GetPinValue+0xce>
    223a:	55 95       	asr	r21
    223c:	47 95       	ror	r20
    223e:	8a 95       	dec	r24
    2240:	e2 f7       	brpl	.-8      	; 0x223a <DIO_u8GetPinValue+0xca>
    2242:	ca 01       	movw	r24, r20
    2244:	81 70       	andi	r24, 0x01	; 1
    2246:	89 83       	std	Y+1, r24	; 0x01
    2248:	11 c0       	rjmp	.+34     	; 0x226c <DIO_u8GetPinValue+0xfc>
		case DIO_PORT_D: Local_u8PinValue = GET_BIT(DIO_PIND, Local_u8PinId); break;
    224a:	e0 e3       	ldi	r30, 0x30	; 48
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	28 2f       	mov	r18, r24
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	88 2f       	mov	r24, r24
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	a9 01       	movw	r20, r18
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <DIO_u8GetPinValue+0xf2>
    225e:	55 95       	asr	r21
    2260:	47 95       	ror	r20
    2262:	8a 95       	dec	r24
    2264:	e2 f7       	brpl	.-8      	; 0x225e <DIO_u8GetPinValue+0xee>
    2266:	ca 01       	movw	r24, r20
    2268:	81 70       	andi	r24, 0x01	; 1
    226a:	89 83       	std	Y+1, r24	; 0x01
		default: break;
	}
	return Local_u8PinValue;
    226c:	89 81       	ldd	r24, Y+1	; 0x01
}
    226e:	26 96       	adiw	r28, 0x06	; 6
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	de bf       	out	0x3e, r29	; 62
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	cd bf       	out	0x3d, r28	; 61
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <ADC_voidInit>:


/* functions definitions */


void ADC_voidInit() {
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
	/* VREF setting */
	WRT_2BITS(ADC_ADMUX, ADC_ADMUX_REFS0, ADC_VOLT_REF);
    2288:	a7 e2       	ldi	r26, 0x27	; 39
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	e7 e2       	ldi	r30, 0x27	; 39
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	8f 73       	andi	r24, 0x3F	; 63
    2294:	8c 93       	st	X, r24
	
	/* ADC Right Adjust  */
	CLR_BIT(ADC_ADMUX, ADC_ADMUX_ADLAR);
    2296:	a7 e2       	ldi	r26, 0x27	; 39
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	e7 e2       	ldi	r30, 0x27	; 39
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	8f 7d       	andi	r24, 0xDF	; 223
    22a2:	8c 93       	st	X, r24
	
	/* ADC Prescaler */ 
	WRT_3BITS(ADC_ADCSRA, ADC_ADCSRA_ADPS0, ADC_PRESCALER);
    22a4:	a6 e2       	ldi	r26, 0x26	; 38
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e6 e2       	ldi	r30, 0x26	; 38
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	87 60       	ori	r24, 0x07	; 7
    22b0:	8c 93       	st	X, r24
	
	/* ADC Auto Trigger State */
	WRT_BIT(ADC_ADCSRA, ADC_ADCSRA_ADATE, ADC_AUTO_TRIGGER_STATE);
    22b2:	a6 e2       	ldi	r26, 0x26	; 38
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e6 e2       	ldi	r30, 0x26	; 38
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	8f 7d       	andi	r24, 0xDF	; 223
    22be:	8c 93       	st	X, r24
	
	/* ADC Interrupt Enable/Disable */
	#if ADC_MODE == ADC_INTERRUPT_MODE
		SET_BIT(ADC_ADCSRA, ADC_ADCSRA_ADIE);
	#elif ADC_MODE == ADC_POLLING_MODE
		CLR_BIT(ADC_ADCSRA, ADC_ADCSRA_ADIE);
    22c0:	a6 e2       	ldi	r26, 0x26	; 38
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	e6 e2       	ldi	r30, 0x26	; 38
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	87 7f       	andi	r24, 0xF7	; 247
    22cc:	8c 93       	st	X, r24
	#endif
	
	/* ADC Auto Trigger Source */
	WRT_3BITS(ADC_SFIOR, ADC_SFIOR_ADTS0, ADC_TRIG_SRC);
    22ce:	a5 e2       	ldi	r26, 0x25	; 37
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e5 e2       	ldi	r30, 0x25	; 37
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	8f 71       	andi	r24, 0x1F	; 31
    22da:	8c 93       	st	X, r24
	
	/* ADC Enable */
	SET_BIT(ADC_ADCSRA, ADC_ADCSRA_ADEN);
    22dc:	a6 e2       	ldi	r26, 0x26	; 38
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e6 e2       	ldi	r30, 0x26	; 38
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	80 68       	ori	r24, 0x80	; 128
    22e8:	8c 93       	st	X, r24
}
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <ADC_u16Read>:




#if ADC_MODE == ADC_POLLING_MODE
u16 ADC_u16Read(u8 Copy_u8ChNumber) {
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	00 d0       	rcall	.+0      	; 0x22f6 <ADC_u16Read+0x6>
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <ADC_u16Read+0x8>
    22f8:	0f 92       	push	r0
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    22fe:	8b 83       	std	Y+3, r24	; 0x03
	/* select channel */
	switch(Copy_u8ChNumber) {
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	28 2f       	mov	r18, r24
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	3d 83       	std	Y+5, r19	; 0x05
    2308:	2c 83       	std	Y+4, r18	; 0x04
    230a:	8c 81       	ldd	r24, Y+4	; 0x04
    230c:	9d 81       	ldd	r25, Y+5	; 0x05
    230e:	83 30       	cpi	r24, 0x03	; 3
    2310:	91 05       	cpc	r25, r1
    2312:	09 f4       	brne	.+2      	; 0x2316 <ADC_u16Read+0x26>
    2314:	45 c0       	rjmp	.+138    	; 0x23a0 <ADC_u16Read+0xb0>
    2316:	2c 81       	ldd	r18, Y+4	; 0x04
    2318:	3d 81       	ldd	r19, Y+5	; 0x05
    231a:	24 30       	cpi	r18, 0x04	; 4
    231c:	31 05       	cpc	r19, r1
    231e:	7c f4       	brge	.+30     	; 0x233e <ADC_u16Read+0x4e>
    2320:	8c 81       	ldd	r24, Y+4	; 0x04
    2322:	9d 81       	ldd	r25, Y+5	; 0x05
    2324:	81 30       	cpi	r24, 0x01	; 1
    2326:	91 05       	cpc	r25, r1
    2328:	49 f1       	breq	.+82     	; 0x237c <ADC_u16Read+0x8c>
    232a:	2c 81       	ldd	r18, Y+4	; 0x04
    232c:	3d 81       	ldd	r19, Y+5	; 0x05
    232e:	22 30       	cpi	r18, 0x02	; 2
    2330:	31 05       	cpc	r19, r1
    2332:	6c f5       	brge	.+90     	; 0x238e <ADC_u16Read+0x9e>
    2334:	8c 81       	ldd	r24, Y+4	; 0x04
    2336:	9d 81       	ldd	r25, Y+5	; 0x05
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	c1 f0       	breq	.+48     	; 0x236c <ADC_u16Read+0x7c>
    233c:	5d c0       	rjmp	.+186    	; 0x23f8 <ADC_u16Read+0x108>
    233e:	2c 81       	ldd	r18, Y+4	; 0x04
    2340:	3d 81       	ldd	r19, Y+5	; 0x05
    2342:	25 30       	cpi	r18, 0x05	; 5
    2344:	31 05       	cpc	r19, r1
    2346:	09 f4       	brne	.+2      	; 0x234a <ADC_u16Read+0x5a>
    2348:	3d c0       	rjmp	.+122    	; 0x23c4 <ADC_u16Read+0xd4>
    234a:	8c 81       	ldd	r24, Y+4	; 0x04
    234c:	9d 81       	ldd	r25, Y+5	; 0x05
    234e:	85 30       	cpi	r24, 0x05	; 5
    2350:	91 05       	cpc	r25, r1
    2352:	7c f1       	brlt	.+94     	; 0x23b2 <ADC_u16Read+0xc2>
    2354:	2c 81       	ldd	r18, Y+4	; 0x04
    2356:	3d 81       	ldd	r19, Y+5	; 0x05
    2358:	26 30       	cpi	r18, 0x06	; 6
    235a:	31 05       	cpc	r19, r1
    235c:	e1 f1       	breq	.+120    	; 0x23d6 <ADC_u16Read+0xe6>
    235e:	8c 81       	ldd	r24, Y+4	; 0x04
    2360:	9d 81       	ldd	r25, Y+5	; 0x05
    2362:	87 30       	cpi	r24, 0x07	; 7
    2364:	91 05       	cpc	r25, r1
    2366:	09 f4       	brne	.+2      	; 0x236a <ADC_u16Read+0x7a>
    2368:	3f c0       	rjmp	.+126    	; 0x23e8 <ADC_u16Read+0xf8>
    236a:	46 c0       	rjmp	.+140    	; 0x23f8 <ADC_u16Read+0x108>
		case ADC_CH0: WRT_5BITS(ADC_ADMUX, ADC_ADMUX_MUX0, ADC_CH_ADC0); break;
    236c:	a7 e2       	ldi	r26, 0x27	; 39
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e7 e2       	ldi	r30, 0x27	; 39
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	80 7e       	andi	r24, 0xE0	; 224
    2378:	8c 93       	st	X, r24
    237a:	3e c0       	rjmp	.+124    	; 0x23f8 <ADC_u16Read+0x108>
		case ADC_CH1: WRT_5BITS(ADC_ADMUX, ADC_ADMUX_MUX0, ADC_CH_ADC1); break;
    237c:	a7 e2       	ldi	r26, 0x27	; 39
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	e7 e2       	ldi	r30, 0x27	; 39
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	80 7e       	andi	r24, 0xE0	; 224
    2388:	81 60       	ori	r24, 0x01	; 1
    238a:	8c 93       	st	X, r24
    238c:	35 c0       	rjmp	.+106    	; 0x23f8 <ADC_u16Read+0x108>
		case ADC_CH2: WRT_5BITS(ADC_ADMUX, ADC_ADMUX_MUX0, ADC_CH_ADC2); break;
    238e:	a7 e2       	ldi	r26, 0x27	; 39
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	e7 e2       	ldi	r30, 0x27	; 39
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	80 7e       	andi	r24, 0xE0	; 224
    239a:	82 60       	ori	r24, 0x02	; 2
    239c:	8c 93       	st	X, r24
    239e:	2c c0       	rjmp	.+88     	; 0x23f8 <ADC_u16Read+0x108>
		case ADC_CH3: WRT_5BITS(ADC_ADMUX, ADC_ADMUX_MUX0, ADC_CH_ADC3); break;
    23a0:	a7 e2       	ldi	r26, 0x27	; 39
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	e7 e2       	ldi	r30, 0x27	; 39
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	80 7e       	andi	r24, 0xE0	; 224
    23ac:	83 60       	ori	r24, 0x03	; 3
    23ae:	8c 93       	st	X, r24
    23b0:	23 c0       	rjmp	.+70     	; 0x23f8 <ADC_u16Read+0x108>
		case ADC_CH4: WRT_5BITS(ADC_ADMUX, ADC_ADMUX_MUX0, ADC_CH_ADC4); break;
    23b2:	a7 e2       	ldi	r26, 0x27	; 39
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	e7 e2       	ldi	r30, 0x27	; 39
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	80 7e       	andi	r24, 0xE0	; 224
    23be:	84 60       	ori	r24, 0x04	; 4
    23c0:	8c 93       	st	X, r24
    23c2:	1a c0       	rjmp	.+52     	; 0x23f8 <ADC_u16Read+0x108>
		case ADC_CH5: WRT_5BITS(ADC_ADMUX, ADC_ADMUX_MUX0, ADC_CH_ADC5); break;
    23c4:	a7 e2       	ldi	r26, 0x27	; 39
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e7 e2       	ldi	r30, 0x27	; 39
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	80 7e       	andi	r24, 0xE0	; 224
    23d0:	85 60       	ori	r24, 0x05	; 5
    23d2:	8c 93       	st	X, r24
    23d4:	11 c0       	rjmp	.+34     	; 0x23f8 <ADC_u16Read+0x108>
		case ADC_CH6: WRT_5BITS(ADC_ADMUX, ADC_ADMUX_MUX0, ADC_CH_ADC6); break;
    23d6:	a7 e2       	ldi	r26, 0x27	; 39
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	e7 e2       	ldi	r30, 0x27	; 39
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	80 7e       	andi	r24, 0xE0	; 224
    23e2:	86 60       	ori	r24, 0x06	; 6
    23e4:	8c 93       	st	X, r24
    23e6:	08 c0       	rjmp	.+16     	; 0x23f8 <ADC_u16Read+0x108>
		case ADC_CH7: WRT_5BITS(ADC_ADMUX, ADC_ADMUX_MUX0, ADC_CH_ADC7); break;
    23e8:	a7 e2       	ldi	r26, 0x27	; 39
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	e7 e2       	ldi	r30, 0x27	; 39
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	80 7e       	andi	r24, 0xE0	; 224
    23f4:	87 60       	ori	r24, 0x07	; 7
    23f6:	8c 93       	st	X, r24
		default: break;
	}

	/* ADC Start Conversion */
	SET_BIT(ADC_ADCSRA, ADC_ADCSRA_ADSC);
    23f8:	a6 e2       	ldi	r26, 0x26	; 38
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	e6 e2       	ldi	r30, 0x26	; 38
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	80 64       	ori	r24, 0x40	; 64
    2404:	8c 93       	st	X, r24

	/* polling till finish conversion */
	while(GET_BIT(ADC_ADCSRA, ADC_ADCSRA_ADIF) == 0);
    2406:	e6 e2       	ldi	r30, 0x26	; 38
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	82 95       	swap	r24
    240e:	8f 70       	andi	r24, 0x0F	; 15
    2410:	88 2f       	mov	r24, r24
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	81 70       	andi	r24, 0x01	; 1
    2416:	90 70       	andi	r25, 0x00	; 0
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	a9 f3       	breq	.-22     	; 0x2406 <ADC_u16Read+0x116>

	/* return ADC value in mVolt */
	u16 Local_u16AnalogRead = (u16)(((u32)ADC_VALUE * (u32)ADC_VOLT_REF_VALUE * (u32)1000) / (u32)1024);
    241c:	e4 e2       	ldi	r30, 0x24	; 36
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	91 81       	ldd	r25, Z+1	; 0x01
    2424:	cc 01       	movw	r24, r24
    2426:	a0 e0       	ldi	r26, 0x00	; 0
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	28 e8       	ldi	r18, 0x88	; 136
    242c:	33 e1       	ldi	r19, 0x13	; 19
    242e:	40 e0       	ldi	r20, 0x00	; 0
    2430:	50 e0       	ldi	r21, 0x00	; 0
    2432:	bc 01       	movw	r22, r24
    2434:	cd 01       	movw	r24, r26
    2436:	0e 94 01 1b 	call	0x3602	; 0x3602 <__mulsi3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	07 2e       	mov	r0, r23
    2440:	7a e0       	ldi	r23, 0x0A	; 10
    2442:	b6 95       	lsr	r27
    2444:	a7 95       	ror	r26
    2446:	97 95       	ror	r25
    2448:	87 95       	ror	r24
    244a:	7a 95       	dec	r23
    244c:	d1 f7       	brne	.-12     	; 0x2442 <ADC_u16Read+0x152>
    244e:	70 2d       	mov	r23, r0
    2450:	9a 83       	std	Y+2, r25	; 0x02
    2452:	89 83       	std	Y+1, r24	; 0x01
	return Local_u16AnalogRead;
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2458:	0f 90       	pop	r0
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <SensorLM35_voidInit>:

/* functions definition */


void SensorLM35_voidInit()
{
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
	ADC_voidInit();
    2470:	0e 94 40 11 	call	0x2280	; 0x2280 <ADC_voidInit>
}
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <SensorLM35_u16ReadTemp>:


u8 SensorLM35_u16ReadTemp(u8 local_u8Pin)
{
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	00 d0       	rcall	.+0      	; 0x2480 <SensorLM35_u16ReadTemp+0x6>
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u16Temp = 0;
    2486:	19 82       	std	Y+1, r1	; 0x01
	if(local_u8Pin == DIO_PA7)
    2488:	8a 81       	ldd	r24, Y+2	; 0x02
    248a:	81 31       	cpi	r24, 0x11	; 17
    248c:	51 f4       	brne	.+20     	; 0x24a2 <SensorLM35_u16ReadTemp+0x28>
	{
		local_u16Temp = (u8)(ADC_u16Read(ADC_CH7) / 10);
    248e:	87 e0       	ldi	r24, 0x07	; 7
    2490:	0e 94 78 11 	call	0x22f0	; 0x22f0 <ADC_u16Read>
    2494:	2a e0       	ldi	r18, 0x0A	; 10
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	b9 01       	movw	r22, r18
    249a:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__udivmodhi4>
    249e:	cb 01       	movw	r24, r22
    24a0:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u16Temp;
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <PushBtn_voidInit>:


/* functions definitions */

void PushBtn_voidInit(u8 local_u8PushBtnPin, u8 local_u8InterruptState, void (*ptr_callBack) (void))
{
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
    24b6:	28 97       	sbiw	r28, 0x08	; 8
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	de bf       	out	0x3e, r29	; 62
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	cd bf       	out	0x3d, r28	; 61
    24c2:	89 83       	std	Y+1, r24	; 0x01
    24c4:	6a 83       	std	Y+2, r22	; 0x02
    24c6:	5c 83       	std	Y+4, r21	; 0x04
    24c8:	4b 83       	std	Y+3, r20	; 0x03
	switch(local_u8InterruptState)
    24ca:	8a 81       	ldd	r24, Y+2	; 0x02
    24cc:	28 2f       	mov	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	38 87       	std	Y+8, r19	; 0x08
    24d2:	2f 83       	std	Y+7, r18	; 0x07
    24d4:	8f 81       	ldd	r24, Y+7	; 0x07
    24d6:	98 85       	ldd	r25, Y+8	; 0x08
    24d8:	00 97       	sbiw	r24, 0x00	; 0
    24da:	89 f1       	breq	.+98     	; 0x253e <PushBtn_voidInit+0x90>
    24dc:	2f 81       	ldd	r18, Y+7	; 0x07
    24de:	38 85       	ldd	r19, Y+8	; 0x08
    24e0:	21 30       	cpi	r18, 0x01	; 1
    24e2:	31 05       	cpc	r19, r1
    24e4:	81 f5       	brne	.+96     	; 0x2546 <PushBtn_voidInit+0x98>
	{
		case PUSH_BTN_INTERRUPT_EN:
			ExtInt_voidInit();
    24e6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <ExtInt_voidInit>
			switch(local_u8PushBtnPin)
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	28 2f       	mov	r18, r24
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	3e 83       	std	Y+6, r19	; 0x06
    24f2:	2d 83       	std	Y+5, r18	; 0x05
    24f4:	8d 81       	ldd	r24, Y+5	; 0x05
    24f6:	9e 81       	ldd	r25, Y+6	; 0x06
    24f8:	8a 32       	cpi	r24, 0x2A	; 42
    24fa:	91 05       	cpc	r25, r1
    24fc:	59 f0       	breq	.+22     	; 0x2514 <PushBtn_voidInit+0x66>
    24fe:	2d 81       	ldd	r18, Y+5	; 0x05
    2500:	3e 81       	ldd	r19, Y+6	; 0x06
    2502:	2b 32       	cpi	r18, 0x2B	; 43
    2504:	31 05       	cpc	r19, r1
    2506:	69 f0       	breq	.+26     	; 0x2522 <PushBtn_voidInit+0x74>
    2508:	8d 81       	ldd	r24, Y+5	; 0x05
    250a:	9e 81       	ldd	r25, Y+6	; 0x06
    250c:	86 31       	cpi	r24, 0x16	; 22
    250e:	91 05       	cpc	r25, r1
    2510:	79 f0       	breq	.+30     	; 0x2530 <PushBtn_voidInit+0x82>
    2512:	19 c0       	rjmp	.+50     	; 0x2546 <PushBtn_voidInit+0x98>
			{
				case DIO_PD2: ExtInt_voidEnableInt0(); ExtInt_SetCallBack0(ptr_callBack); break;
    2514:	0e 94 8f 0c 	call	0x191e	; 0x191e <ExtInt_voidEnableInt0>
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	9c 81       	ldd	r25, Y+4	; 0x04
    251c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <ExtInt_SetCallBack0>
    2520:	12 c0       	rjmp	.+36     	; 0x2546 <PushBtn_voidInit+0x98>
				case DIO_PD3: ExtInt_voidEnableInt1(); ExtInt_SetCallBack1(ptr_callBack); break;
    2522:	0e 94 9d 0c 	call	0x193a	; 0x193a <ExtInt_voidEnableInt1>
    2526:	8b 81       	ldd	r24, Y+3	; 0x03
    2528:	9c 81       	ldd	r25, Y+4	; 0x04
    252a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <ExtInt_SetCallBack1>
    252e:	0b c0       	rjmp	.+22     	; 0x2546 <PushBtn_voidInit+0x98>
				case DIO_PB2: ExtInt_voidEnableInt2(); ExtInt_SetCallBack2(ptr_callBack); break;
    2530:	0e 94 ab 0c 	call	0x1956	; 0x1956 <ExtInt_voidEnableInt2>
    2534:	8b 81       	ldd	r24, Y+3	; 0x03
    2536:	9c 81       	ldd	r25, Y+4	; 0x04
    2538:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <ExtInt_SetCallBack2>
    253c:	04 c0       	rjmp	.+8      	; 0x2546 <PushBtn_voidInit+0x98>
				default: break;
			}
			break;
		case PUSH_BTN_INTERRUPT_DIS:
			DIO_voidSetPinMode(local_u8PushBtnPin, DIO_PIN_INPUT);
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <DIO_voidSetPinMode>
			#if PUSH_BTN_CONNECTION == PUSH_BTN_PULL_UP
				DIO_voidSetPinValue(loclocal_u8PushBtnPin);
			#endif
			break;
	}
}
    2546:	28 96       	adiw	r28, 0x08	; 8
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <PushBtn_voidEnable>:


void PushBtn_voidEnable(u8 local_u8PushBtnPin)
{
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	00 d0       	rcall	.+0      	; 0x255e <PushBtn_voidEnable+0x6>
    255e:	0f 92       	push	r0
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
    2564:	89 83       	std	Y+1, r24	; 0x01
	switch(local_u8PushBtnPin)
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	3b 83       	std	Y+3, r19	; 0x03
    256e:	2a 83       	std	Y+2, r18	; 0x02
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	9b 81       	ldd	r25, Y+3	; 0x03
    2574:	8a 32       	cpi	r24, 0x2A	; 42
    2576:	91 05       	cpc	r25, r1
    2578:	59 f0       	breq	.+22     	; 0x2590 <PushBtn_voidEnable+0x38>
    257a:	2a 81       	ldd	r18, Y+2	; 0x02
    257c:	3b 81       	ldd	r19, Y+3	; 0x03
    257e:	2b 32       	cpi	r18, 0x2B	; 43
    2580:	31 05       	cpc	r19, r1
    2582:	49 f0       	breq	.+18     	; 0x2596 <PushBtn_voidEnable+0x3e>
    2584:	8a 81       	ldd	r24, Y+2	; 0x02
    2586:	9b 81       	ldd	r25, Y+3	; 0x03
    2588:	86 31       	cpi	r24, 0x16	; 22
    258a:	91 05       	cpc	r25, r1
    258c:	39 f0       	breq	.+14     	; 0x259c <PushBtn_voidEnable+0x44>
    258e:	08 c0       	rjmp	.+16     	; 0x25a0 <PushBtn_voidEnable+0x48>
	{
		case DIO_PD2: ExtInt_voidEnableInt0(); break;
    2590:	0e 94 8f 0c 	call	0x191e	; 0x191e <ExtInt_voidEnableInt0>
    2594:	05 c0       	rjmp	.+10     	; 0x25a0 <PushBtn_voidEnable+0x48>
		case DIO_PD3: ExtInt_voidEnableInt1(); break;
    2596:	0e 94 9d 0c 	call	0x193a	; 0x193a <ExtInt_voidEnableInt1>
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <PushBtn_voidEnable+0x48>
		case DIO_PB2: ExtInt_voidEnableInt2(); break;
    259c:	0e 94 ab 0c 	call	0x1956	; 0x1956 <ExtInt_voidEnableInt2>
		default: break;
	}
}
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	08 95       	ret

000025ac <PushBtn_voidDisable>:


void PushBtn_voidDisable(u8 local_u8PushBtnPin)
{
    25ac:	df 93       	push	r29
    25ae:	cf 93       	push	r28
    25b0:	00 d0       	rcall	.+0      	; 0x25b2 <PushBtn_voidDisable+0x6>
    25b2:	0f 92       	push	r0
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	89 83       	std	Y+1, r24	; 0x01
	switch(local_u8PushBtnPin)
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	28 2f       	mov	r18, r24
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	3b 83       	std	Y+3, r19	; 0x03
    25c2:	2a 83       	std	Y+2, r18	; 0x02
    25c4:	8a 81       	ldd	r24, Y+2	; 0x02
    25c6:	9b 81       	ldd	r25, Y+3	; 0x03
    25c8:	8a 32       	cpi	r24, 0x2A	; 42
    25ca:	91 05       	cpc	r25, r1
    25cc:	59 f0       	breq	.+22     	; 0x25e4 <PushBtn_voidDisable+0x38>
    25ce:	2a 81       	ldd	r18, Y+2	; 0x02
    25d0:	3b 81       	ldd	r19, Y+3	; 0x03
    25d2:	2b 32       	cpi	r18, 0x2B	; 43
    25d4:	31 05       	cpc	r19, r1
    25d6:	49 f0       	breq	.+18     	; 0x25ea <PushBtn_voidDisable+0x3e>
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	9b 81       	ldd	r25, Y+3	; 0x03
    25dc:	86 31       	cpi	r24, 0x16	; 22
    25de:	91 05       	cpc	r25, r1
    25e0:	39 f0       	breq	.+14     	; 0x25f0 <PushBtn_voidDisable+0x44>
    25e2:	08 c0       	rjmp	.+16     	; 0x25f4 <PushBtn_voidDisable+0x48>
	{
		case DIO_PD2: ExtInt_voidDisableInt0(); break;
    25e4:	0e 94 65 0c 	call	0x18ca	; 0x18ca <ExtInt_voidDisableInt0>
    25e8:	05 c0       	rjmp	.+10     	; 0x25f4 <PushBtn_voidDisable+0x48>
		case DIO_PD3: ExtInt_voidDisableInt1(); break;
    25ea:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <ExtInt_voidDisableInt1>
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <PushBtn_voidDisable+0x48>
		case DIO_PB2: ExtInt_voidDisableInt2(); break;
    25f0:	0e 94 81 0c 	call	0x1902	; 0x1902 <ExtInt_voidDisableInt2>
		default: break;
	}
}
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	08 95       	ret

00002600 <PushBtn_voidGetStatus>:


u8 PushBtn_voidGetStatus(u8 local_u8PushBtnPin)
{
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	00 d0       	rcall	.+0      	; 0x2606 <PushBtn_voidGetStatus+0x6>
    2606:	0f 92       	push	r0
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    260c:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8BtnState = DIO_u8GetPinValue(local_u8PushBtnPin);
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	0e 94 b8 10 	call	0x2170	; 0x2170 <DIO_u8GetPinValue>
    2614:	89 83       	std	Y+1, r24	; 0x01
	#if PUSH_BTN_CONNECTION == PUSH_BTN_PULL_UP
		local_u8BtnState = local_u8BtnState ? PUSH_BTN_RELEASED : PUSH_BTN_PRESSED;
	#elif PUSH_BTN_CONNECTION == PUSH_BTN_PULL_DOWN
		local_u8BtnState = local_u8BtnState ? PUSH_BTN_PRESSED : PUSH_BTN_NOT_PRESSED;
    2616:	1b 82       	std	Y+3, r1	; 0x03
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	88 23       	and	r24, r24
    261c:	11 f0       	breq	.+4      	; 0x2622 <PushBtn_voidGetStatus+0x22>
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	8b 83       	std	Y+3, r24	; 0x03
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	89 83       	std	Y+1, r24	; 0x01
	#endif
	return local_u8BtnState;
    2626:	89 81       	ldd	r24, Y+1	; 0x01
}
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	08 95       	ret

00002634 <LED_voidInit>:


/* functions definitions */

void LED_voidInit(u8 local_u8LedPin)
{
    2634:	df 93       	push	r29
    2636:	cf 93       	push	r28
    2638:	0f 92       	push	r0
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinMode(local_u8LedPin, DIO_PIN_OUTPUT);
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	61 e0       	ldi	r22, 0x01	; 1
    2644:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <DIO_voidSetPinMode>
}
    2648:	0f 90       	pop	r0
    264a:	cf 91       	pop	r28
    264c:	df 91       	pop	r29
    264e:	08 95       	ret

00002650 <LED_voidTurnOn>:

void LED_voidTurnOn(u8 local_u8LedPin)
{
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	0f 92       	push	r0
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidWritePinValue(local_u8LedPin, DIO_PIN_HIGH);
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	61 e0       	ldi	r22, 0x01	; 1
    2660:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
}
    2664:	0f 90       	pop	r0
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	08 95       	ret

0000266c <LED_voidTurnOff>:

void LED_voidTurnOff(u8 local_u8LedPin)
{
    266c:	df 93       	push	r29
    266e:	cf 93       	push	r28
    2670:	0f 92       	push	r0
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidWritePinValue(local_u8LedPin, DIO_PIN_LOW);
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	60 e0       	ldi	r22, 0x00	; 0
    267c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
}
    2680:	0f 90       	pop	r0
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	08 95       	ret

00002688 <LED_voidToggle>:

void LED_voidToggle(u8 local_u8LedPin)
{
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	0f 92       	push	r0
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    2692:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidTogglePinValue(local_u8LedPin);
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <DIO_voidTogglePinValue>
}
    269a:	0f 90       	pop	r0
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	08 95       	ret

000026a2 <Heater_voidInit>:


/* functions declaration */

void Heater_voidInit(u8 local_u8HeaterPin)
{
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	0f 92       	push	r0
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
    26ac:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinMode(local_u8HeaterPin, DIO_PIN_OUTPUT);
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	61 e0       	ldi	r22, 0x01	; 1
    26b2:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <DIO_voidSetPinMode>
}
    26b6:	0f 90       	pop	r0
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <Heater_voidTurnOn>:

void Heater_voidTurnOn(u8 local_u8HeaterPin)
{
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	0f 92       	push	r0
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(local_u8HeaterPin);
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <DIO_voidSetPinValue>
}
    26d0:	0f 90       	pop	r0
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	08 95       	ret

000026d8 <Heater_voidTurnOff>:

void Heater_voidTurnOff(u8 local_u8HeaterPin)
{
    26d8:	df 93       	push	r29
    26da:	cf 93       	push	r28
    26dc:	0f 92       	push	r0
    26de:	cd b7       	in	r28, 0x3d	; 61
    26e0:	de b7       	in	r29, 0x3e	; 62
    26e2:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidClearPinValue(local_u8HeaterPin);
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <DIO_voidClearPinValue>
}
    26ea:	0f 90       	pop	r0
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <EEPROM_voidInit>:
#include "EEPROM_Interface.h"


/* Functions definitions */

void EEPROM_voidInit() {
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
	IIC_voidInit();
    26fa:	0e 94 e6 07 	call	0xfcc	; 0xfcc <IIC_voidInit>
}
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <EEPROM_voidWriteByte>:


EEPROM_State_t EEPROM_voidWriteByte(u8 local_u8DataByte, u8 local_u8PageAddress, u8 local_u8ByteAddress) {
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	00 d0       	rcall	.+0      	; 0x270a <EEPROM_voidWriteByte+0x6>
    270a:	00 d0       	rcall	.+0      	; 0x270c <EEPROM_voidWriteByte+0x8>
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
    2710:	8a 83       	std	Y+2, r24	; 0x02
    2712:	6b 83       	std	Y+3, r22	; 0x03
    2714:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8State = IIC_NOK;
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	89 83       	std	Y+1, r24	; 0x01
	local_u8State = IIC_enumStartCondition();
    271a:	0e 94 11 08 	call	0x1022	; 0x1022 <IIC_enumStartCondition>
    271e:	89 83       	std	Y+1, r24	; 0x01
	if(local_u8State == IIC_OK)
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	88 23       	and	r24, r24
    2724:	29 f4       	brne	.+10     	; 0x2730 <EEPROM_voidWriteByte+0x2c>
		local_u8State = IIC_enumSendSlaveAddressWithWrite(EEPROM_MSB_ADDRESS | local_u8PageAddress);
    2726:	8b 81       	ldd	r24, Y+3	; 0x03
    2728:	80 65       	ori	r24, 0x50	; 80
    272a:	0e 94 c9 08 	call	0x1192	; 0x1192 <IIC_enumSendSlaveAddressWithWrite>
    272e:	89 83       	std	Y+1, r24	; 0x01
	if(local_u8State == IIC_OK)
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	88 23       	and	r24, r24
    2734:	21 f4       	brne	.+8      	; 0x273e <EEPROM_voidWriteByte+0x3a>
		local_u8State = IIC_enumSendByte(local_u8ByteAddress);
    2736:	8c 81       	ldd	r24, Y+4	; 0x04
    2738:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <IIC_enumSendByte>
    273c:	89 83       	std	Y+1, r24	; 0x01
	if(local_u8State == IIC_OK)
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	88 23       	and	r24, r24
    2742:	21 f4       	brne	.+8      	; 0x274c <EEPROM_voidWriteByte+0x48>
		local_u8State = IIC_enumSendByte(local_u8DataByte);
    2744:	8a 81       	ldd	r24, Y+2	; 0x02
    2746:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <IIC_enumSendByte>
    274a:	89 83       	std	Y+1, r24	; 0x01
	if(local_u8State == IIC_OK)
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	88 23       	and	r24, r24
    2750:	19 f4       	brne	.+6      	; 0x2758 <EEPROM_voidWriteByte+0x54>
		local_u8State = IIC_enumStopCondition();
    2752:	0e 94 6f 08 	call	0x10de	; 0x10de <IIC_enumStopCondition>
    2756:	89 83       	std	Y+1, r24	; 0x01

	if(local_u8State == IIC_OK) local_u8State = EEPROM_OK;
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	88 23       	and	r24, r24
    275c:	11 f4       	brne	.+4      	; 0x2762 <EEPROM_voidWriteByte+0x5e>
    275e:	19 82       	std	Y+1, r1	; 0x01
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <EEPROM_voidWriteByte+0x62>
	else local_u8State = EEPROM_NOK;
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	89 83       	std	Y+1, r24	; 0x01
	return local_u8State;
    2766:	89 81       	ldd	r24, Y+1	; 0x01
}
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	0f 90       	pop	r0
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	08 95       	ret

00002776 <EEPROM_u8ReadByte>:

EEPROM_State_t EEPROM_u8ReadByte(u8 local_u8PageAddress, u8 local_u8ByteAddress, u8 *local_u8PtrReceivedData) {
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	00 d0       	rcall	.+0      	; 0x277c <EEPROM_u8ReadByte+0x6>
    277c:	00 d0       	rcall	.+0      	; 0x277e <EEPROM_u8ReadByte+0x8>
    277e:	0f 92       	push	r0
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    2784:	8a 83       	std	Y+2, r24	; 0x02
    2786:	6b 83       	std	Y+3, r22	; 0x03
    2788:	5d 83       	std	Y+5, r21	; 0x05
    278a:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8State = IIC_NOK;
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	89 83       	std	Y+1, r24	; 0x01
	local_u8State = IIC_enumStartCondition();
    2790:	0e 94 11 08 	call	0x1022	; 0x1022 <IIC_enumStartCondition>
    2794:	89 83       	std	Y+1, r24	; 0x01
	if(local_u8State == IIC_OK)
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	88 23       	and	r24, r24
    279a:	29 f4       	brne	.+10     	; 0x27a6 <EEPROM_u8ReadByte+0x30>
		local_u8State = IIC_enumSendSlaveAddressWithWrite(EEPROM_MSB_ADDRESS | local_u8PageAddress);
    279c:	8a 81       	ldd	r24, Y+2	; 0x02
    279e:	80 65       	ori	r24, 0x50	; 80
    27a0:	0e 94 c9 08 	call	0x1192	; 0x1192 <IIC_enumSendSlaveAddressWithWrite>
    27a4:	89 83       	std	Y+1, r24	; 0x01
	if(local_u8State == IIC_OK)
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	88 23       	and	r24, r24
    27aa:	21 f4       	brne	.+8      	; 0x27b4 <EEPROM_u8ReadByte+0x3e>
		local_u8State = IIC_enumSendByte(local_u8ByteAddress);
    27ac:	8b 81       	ldd	r24, Y+3	; 0x03
    27ae:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <IIC_enumSendByte>
    27b2:	89 83       	std	Y+1, r24	; 0x01
	if(local_u8State == IIC_OK)
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	88 23       	and	r24, r24
    27b8:	19 f4       	brne	.+6      	; 0x27c0 <EEPROM_u8ReadByte+0x4a>
		local_u8State = IIC_enumRepeatStart();
    27ba:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <IIC_enumRepeatStart>
    27be:	89 83       	std	Y+1, r24	; 0x01
	if(local_u8State == IIC_OK)
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	88 23       	and	r24, r24
    27c4:	29 f4       	brne	.+10     	; 0x27d0 <EEPROM_u8ReadByte+0x5a>
		local_u8State = IIC_enumSendSlaveAddressWithRead(EEPROM_MSB_ADDRESS | local_u8PageAddress);
    27c6:	8a 81       	ldd	r24, Y+2	; 0x02
    27c8:	80 65       	ori	r24, 0x50	; 80
    27ca:	0e 94 4f 09 	call	0x129e	; 0x129e <IIC_enumSendSlaveAddressWithRead>
    27ce:	89 83       	std	Y+1, r24	; 0x01
	if(local_u8State == IIC_OK)
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	88 23       	and	r24, r24
    27d4:	29 f4       	brne	.+10     	; 0x27e0 <EEPROM_u8ReadByte+0x6a>
		local_u8State = IIC_enumReceiveByte(local_u8PtrReceivedData);
    27d6:	8c 81       	ldd	r24, Y+4	; 0x04
    27d8:	9d 81       	ldd	r25, Y+5	; 0x05
    27da:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <IIC_enumReceiveByte>
    27de:	89 83       	std	Y+1, r24	; 0x01
	if(local_u8State == IIC_OK)
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	88 23       	and	r24, r24
    27e4:	19 f4       	brne	.+6      	; 0x27ec <EEPROM_u8ReadByte+0x76>
		local_u8State = IIC_enumStopCondition();
    27e6:	0e 94 6f 08 	call	0x10de	; 0x10de <IIC_enumStopCondition>
    27ea:	89 83       	std	Y+1, r24	; 0x01

	if(local_u8State == IIC_OK) local_u8State = EEPROM_OK;
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	88 23       	and	r24, r24
    27f0:	11 f4       	brne	.+4      	; 0x27f6 <EEPROM_u8ReadByte+0x80>
    27f2:	19 82       	std	Y+1, r1	; 0x01
    27f4:	02 c0       	rjmp	.+4      	; 0x27fa <EEPROM_u8ReadByte+0x84>
	else local_u8State = EEPROM_NOK;
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	89 83       	std	Y+1, r24	; 0x01
	return local_u8State;
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	08 95       	ret

0000280c <DSSD_voidInit>:
static void displaySelected(u8 local_u8Num);


/* functions definition */

void DSSD_voidInit() {
    280c:	df 93       	push	r29
    280e:	cf 93       	push	r28
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62

	/// drive data and control pins as a outputs
	DIO_voidSetPinMode(DSSD_EN1, DIO_PIN_OUTPUT);
    2814:	85 e1       	ldi	r24, 0x15	; 21
    2816:	61 e0       	ldi	r22, 0x01	; 1
    2818:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <DIO_voidSetPinMode>
	DIO_voidSetPinMode(DSSD_EN2, DIO_PIN_OUTPUT);
    281c:	84 e1       	ldi	r24, 0x14	; 20
    281e:	61 e0       	ldi	r22, 0x01	; 1
    2820:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <DIO_voidSetPinMode>
	DIO_voidSetPinMode(DSSD_DIP, DIO_PIN_OUTPUT);
    2824:	81 e1       	ldi	r24, 0x11	; 17
    2826:	61 e0       	ldi	r22, 0x01	; 1
    2828:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <DIO_voidSetPinMode>
	
	DIO_voidSetPinMode(DSSD_A, DIO_PIN_OUTPUT);
    282c:	8a e0       	ldi	r24, 0x0A	; 10
    282e:	61 e0       	ldi	r22, 0x01	; 1
    2830:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <DIO_voidSetPinMode>
	DIO_voidSetPinMode(DSSD_B, DIO_PIN_OUTPUT);
    2834:	8b e0       	ldi	r24, 0x0B	; 11
    2836:	61 e0       	ldi	r22, 0x01	; 1
    2838:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <DIO_voidSetPinMode>
	DIO_voidSetPinMode(DSSD_C, DIO_PIN_OUTPUT);
    283c:	8c e0       	ldi	r24, 0x0C	; 12
    283e:	61 e0       	ldi	r22, 0x01	; 1
    2840:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <DIO_voidSetPinMode>
	DIO_voidSetPinMode(DSSD_D, DIO_PIN_OUTPUT);
    2844:	8d e0       	ldi	r24, 0x0D	; 13
    2846:	61 e0       	ldi	r22, 0x01	; 1
    2848:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <DIO_voidSetPinMode>
	
	#if DSSD_MODE == DSSD_NORMAL_MODE
		DIO_voidSetPinMode(DSSD_E, DIO_PIN_OUTPUT);
    284c:	8e e0       	ldi	r24, 0x0E	; 14
    284e:	61 e0       	ldi	r22, 0x01	; 1
    2850:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <DIO_voidSetPinMode>
		DIO_voidSetPinMode(DSSD_F, DIO_PIN_OUTPUT);
    2854:	8f e0       	ldi	r24, 0x0F	; 15
    2856:	61 e0       	ldi	r22, 0x01	; 1
    2858:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <DIO_voidSetPinMode>
		DIO_voidSetPinMode(DSSD_G, DIO_PIN_OUTPUT);
    285c:	80 e1       	ldi	r24, 0x10	; 16
    285e:	61 e0       	ldi	r22, 0x01	; 1
    2860:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <DIO_voidSetPinMode>
	#endif

}
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	08 95       	ret

0000286a <DSSD_voidEN1>:

void DSSD_voidEN1() {
    286a:	df 93       	push	r29
    286c:	cf 93       	push	r28
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62

	/// enable EN1
	DIO_voidSetPinValue(DSSD_EN1);
    2872:	85 e1       	ldi	r24, 0x15	; 21
    2874:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <DIO_voidSetPinValue>

	/// disable EN2
	DIO_voidClearPinValue(DSSD_EN2);
    2878:	84 e1       	ldi	r24, 0x14	; 20
    287a:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <DIO_voidClearPinValue>
}
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <DSSD_voidEN2>:

void DSSD_voidEN2() {
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62

	/// enable EN2
	DIO_voidSetPinValue(DSSD_EN2);
    288c:	84 e1       	ldi	r24, 0x14	; 20
    288e:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <DIO_voidSetPinValue>

	/// disable EN1
	DIO_voidClearPinValue(DSSD_EN1);
    2892:	85 e1       	ldi	r24, 0x15	; 21
    2894:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <DIO_voidClearPinValue>
}
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	08 95       	ret

0000289e <DSSD_voidDisableAll>:


void DSSD_voidDisableAll()
{
    289e:	df 93       	push	r29
    28a0:	cf 93       	push	r28
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
	/// disable EN1 and EN2
	DIO_voidSetPinValue(DSSD_EN1);
    28a6:	85 e1       	ldi	r24, 0x15	; 21
    28a8:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DSSD_EN2);
    28ac:	84 e1       	ldi	r24, 0x14	; 20
    28ae:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <DIO_voidSetPinValue>
}
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <DSSD_voidDisplayOnes>:

void DSSD_voidDisplayOnes(u8 local_u8Num)
{
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	0f 92       	push	r0
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62
    28c2:	89 83       	std	Y+1, r24	; 0x01
	/// enable EN1 then get and display the right digit from the number
	DSSD_voidEN1();
    28c4:	0e 94 35 14 	call	0x286a	; 0x286a <DSSD_voidEN1>
	displaySelected(local_u8Num - (local_u8Num / 10) * 10);
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	9a e0       	ldi	r25, 0x0A	; 10
    28cc:	69 2f       	mov	r22, r25
    28ce:	0e 94 20 1b 	call	0x3640	; 0x3640 <__udivmodqi4>
    28d2:	88 2f       	mov	r24, r24
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	9c 01       	movw	r18, r24
    28d8:	22 0f       	add	r18, r18
    28da:	33 1f       	adc	r19, r19
    28dc:	c9 01       	movw	r24, r18
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	82 0f       	add	r24, r18
    28e8:	93 1f       	adc	r25, r19
    28ea:	90 95       	com	r25
    28ec:	81 95       	neg	r24
    28ee:	9f 4f       	sbci	r25, 0xFF	; 255
    28f0:	98 2f       	mov	r25, r24
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	89 0f       	add	r24, r25
    28f6:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <displaySelected>
}
    28fa:	0f 90       	pop	r0
    28fc:	cf 91       	pop	r28
    28fe:	df 91       	pop	r29
    2900:	08 95       	ret

00002902 <DSSD_voidDisplayTens>:

void DSSD_voidDisplayTens(u8 local_u8Num)
{
    2902:	df 93       	push	r29
    2904:	cf 93       	push	r28
    2906:	0f 92       	push	r0
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	89 83       	std	Y+1, r24	; 0x01
	/// enable EN2 then get and display the left digit from the number
	DSSD_voidEN2();
    290e:	0e 94 42 14 	call	0x2884	; 0x2884 <DSSD_voidEN2>
	displaySelected(local_u8Num / 10);
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	9a e0       	ldi	r25, 0x0A	; 10
    2916:	69 2f       	mov	r22, r25
    2918:	0e 94 20 1b 	call	0x3640	; 0x3640 <__udivmodqi4>
    291c:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <displaySelected>
}
    2920:	0f 90       	pop	r0
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	08 95       	ret

00002928 <DSSD_voidDisplay>:

void DSSD_voidDisplay(u8 local_u8Num, u8 u8Digit)
{
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	00 d0       	rcall	.+0      	; 0x292e <DSSD_voidDisplay+0x6>
    292e:	00 d0       	rcall	.+0      	; 0x2930 <DSSD_voidDisplay+0x8>
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	89 83       	std	Y+1, r24	; 0x01
    2936:	6a 83       	std	Y+2, r22	; 0x02
	/// according to desired digit, display it
	switch(u8Digit)
    2938:	8a 81       	ldd	r24, Y+2	; 0x02
    293a:	28 2f       	mov	r18, r24
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	3c 83       	std	Y+4, r19	; 0x04
    2940:	2b 83       	std	Y+3, r18	; 0x03
    2942:	8b 81       	ldd	r24, Y+3	; 0x03
    2944:	9c 81       	ldd	r25, Y+4	; 0x04
    2946:	00 97       	sbiw	r24, 0x00	; 0
    2948:	31 f0       	breq	.+12     	; 0x2956 <DSSD_voidDisplay+0x2e>
    294a:	2b 81       	ldd	r18, Y+3	; 0x03
    294c:	3c 81       	ldd	r19, Y+4	; 0x04
    294e:	21 30       	cpi	r18, 0x01	; 1
    2950:	31 05       	cpc	r19, r1
    2952:	29 f0       	breq	.+10     	; 0x295e <DSSD_voidDisplay+0x36>
    2954:	07 c0       	rjmp	.+14     	; 0x2964 <DSSD_voidDisplay+0x3c>
	{
		case DSSD_DISPLAY_ONES: DSSD_voidDisplayOnes(local_u8Num); break;
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <DSSD_voidDisplayOnes>
    295c:	03 c0       	rjmp	.+6      	; 0x2964 <DSSD_voidDisplay+0x3c>
		case DSSD_DISPLAY_TENS: DSSD_voidDisplayTens(local_u8Num); break;
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	0e 94 81 14 	call	0x2902	; 0x2902 <DSSD_voidDisplayTens>
	}
}
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <DSSD_u8Status>:

//////////////////////////////////////////////////////////////////////

u8 DSSD_u8Status()
{
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	0f 92       	push	r0
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
	/// if EN1 and EN2 are low then, DSSD is OFF. Otherwise, it is ON
	u8 local_u8state = 0;
    297c:	19 82       	std	Y+1, r1	; 0x01
	if(GET_BIT(DSSD_CTRL_REG, DSSD_EN1 % 10) && GET_BIT(DSSD_CTRL_REG, DSSD_EN2 % 10))
    297e:	e8 e3       	ldi	r30, 0x38	; 56
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
    2984:	86 95       	lsr	r24
    2986:	88 2f       	mov	r24, r24
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	81 70       	andi	r24, 0x01	; 1
    298c:	90 70       	andi	r25, 0x00	; 0
    298e:	98 2f       	mov	r25, r24
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	89 27       	eor	r24, r25
    2994:	88 23       	and	r24, r24
    2996:	71 f4       	brne	.+28     	; 0x29b4 <DSSD_u8Status+0x42>
    2998:	e8 e3       	ldi	r30, 0x38	; 56
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	88 2f       	mov	r24, r24
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	81 70       	andi	r24, 0x01	; 1
    29a4:	90 70       	andi	r25, 0x00	; 0
    29a6:	98 2f       	mov	r25, r24
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	89 27       	eor	r24, r25
    29ac:	88 23       	and	r24, r24
    29ae:	11 f4       	brne	.+4      	; 0x29b4 <DSSD_u8Status+0x42>
	{
		local_u8state = DSSD_OFF;
    29b0:	19 82       	std	Y+1, r1	; 0x01
    29b2:	02 c0       	rjmp	.+4      	; 0x29b8 <DSSD_u8Status+0x46>
	}
	else
	{
		local_u8state = DSSD_ON;
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8state;
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    29ba:	0f 90       	pop	r0
    29bc:	cf 91       	pop	r28
    29be:	df 91       	pop	r29
    29c0:	08 95       	ret

000029c2 <display_0>:

//////////////////////////////////////////////////////////////////////

static void display_0() {
    29c2:	df 93       	push	r29
    29c4:	cf 93       	push	r28
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
		DIO_voidWritePinValue(DSSD_A, DIO_PIN_LOW);
		DIO_voidWritePinValue(DSSD_B, DIO_PIN_LOW);
		DIO_voidWritePinValue(DSSD_C, DIO_PIN_LOW);
		DIO_voidWritePinValue(DSSD_D, DIO_PIN_LOW);
	#elif DSSD_MODE == DSSD_NORMAL_MODE
		DIO_voidWritePinValue(DSSD_A, DIO_PIN_HIGH);
    29ca:	8a e0       	ldi	r24, 0x0A	; 10
    29cc:	61 e0       	ldi	r22, 0x01	; 1
    29ce:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_B, DIO_PIN_HIGH);
    29d2:	8b e0       	ldi	r24, 0x0B	; 11
    29d4:	61 e0       	ldi	r22, 0x01	; 1
    29d6:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_C, DIO_PIN_HIGH);
    29da:	8c e0       	ldi	r24, 0x0C	; 12
    29dc:	61 e0       	ldi	r22, 0x01	; 1
    29de:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_D, DIO_PIN_HIGH);
    29e2:	8d e0       	ldi	r24, 0x0D	; 13
    29e4:	61 e0       	ldi	r22, 0x01	; 1
    29e6:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_E, DIO_PIN_HIGH);
    29ea:	8e e0       	ldi	r24, 0x0E	; 14
    29ec:	61 e0       	ldi	r22, 0x01	; 1
    29ee:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_F, DIO_PIN_HIGH);
    29f2:	8f e0       	ldi	r24, 0x0F	; 15
    29f4:	61 e0       	ldi	r22, 0x01	; 1
    29f6:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_G, DIO_PIN_LOW);
    29fa:	80 e1       	ldi	r24, 0x10	; 16
    29fc:	60 e0       	ldi	r22, 0x00	; 0
    29fe:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
	#endif
}
    2a02:	cf 91       	pop	r28
    2a04:	df 91       	pop	r29
    2a06:	08 95       	ret

00002a08 <display_1>:

static void display_1() {
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
		DIO_voidWritePinValue(DSSD_A, DIO_PIN_HIGH);
		DIO_voidWritePinValue(DSSD_B, DIO_PIN_LOW);
		DIO_voidWritePinValue(DSSD_C, DIO_PIN_LOW);
		DIO_voidWritePinValue(DSSD_D, DIO_PIN_LOW);
	#elif DSSD_MODE == DSSD_NORMAL_MODE
		DIO_voidWritePinValue(DSSD_A, DIO_PIN_LOW);
    2a10:	8a e0       	ldi	r24, 0x0A	; 10
    2a12:	60 e0       	ldi	r22, 0x00	; 0
    2a14:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_B, DIO_PIN_HIGH);
    2a18:	8b e0       	ldi	r24, 0x0B	; 11
    2a1a:	61 e0       	ldi	r22, 0x01	; 1
    2a1c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_C, DIO_PIN_HIGH);
    2a20:	8c e0       	ldi	r24, 0x0C	; 12
    2a22:	61 e0       	ldi	r22, 0x01	; 1
    2a24:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_D, DIO_PIN_LOW);
    2a28:	8d e0       	ldi	r24, 0x0D	; 13
    2a2a:	60 e0       	ldi	r22, 0x00	; 0
    2a2c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_E, DIO_PIN_LOW);
    2a30:	8e e0       	ldi	r24, 0x0E	; 14
    2a32:	60 e0       	ldi	r22, 0x00	; 0
    2a34:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_F, DIO_PIN_LOW);
    2a38:	8f e0       	ldi	r24, 0x0F	; 15
    2a3a:	60 e0       	ldi	r22, 0x00	; 0
    2a3c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_G, DIO_PIN_LOW);
    2a40:	80 e1       	ldi	r24, 0x10	; 16
    2a42:	60 e0       	ldi	r22, 0x00	; 0
    2a44:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
	#endif
}
    2a48:	cf 91       	pop	r28
    2a4a:	df 91       	pop	r29
    2a4c:	08 95       	ret

00002a4e <display_2>:

static void display_2() {
    2a4e:	df 93       	push	r29
    2a50:	cf 93       	push	r28
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
		DIO_voidWritePinValue(DSSD_A, DIO_PIN_LOW);
		DIO_voidWritePinValue(DSSD_B, DIO_PIN_HIGH);
		DIO_voidWritePinValue(DSSD_C, DIO_PIN_LOW);
		DIO_voidWritePinValue(DSSD_D, DIO_PIN_LOW);
	#elif DSSD_MODE == DSSD_NORMAL_MODE
		DIO_voidWritePinValue(DSSD_A, DIO_PIN_HIGH);
    2a56:	8a e0       	ldi	r24, 0x0A	; 10
    2a58:	61 e0       	ldi	r22, 0x01	; 1
    2a5a:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_B, DIO_PIN_HIGH);
    2a5e:	8b e0       	ldi	r24, 0x0B	; 11
    2a60:	61 e0       	ldi	r22, 0x01	; 1
    2a62:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_C, DIO_PIN_LOW);
    2a66:	8c e0       	ldi	r24, 0x0C	; 12
    2a68:	60 e0       	ldi	r22, 0x00	; 0
    2a6a:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_D, DIO_PIN_HIGH);
    2a6e:	8d e0       	ldi	r24, 0x0D	; 13
    2a70:	61 e0       	ldi	r22, 0x01	; 1
    2a72:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_E, DIO_PIN_HIGH);
    2a76:	8e e0       	ldi	r24, 0x0E	; 14
    2a78:	61 e0       	ldi	r22, 0x01	; 1
    2a7a:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_F, DIO_PIN_LOW);
    2a7e:	8f e0       	ldi	r24, 0x0F	; 15
    2a80:	60 e0       	ldi	r22, 0x00	; 0
    2a82:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_G, DIO_PIN_HIGH);
    2a86:	80 e1       	ldi	r24, 0x10	; 16
    2a88:	61 e0       	ldi	r22, 0x01	; 1
    2a8a:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
	#endif
}
    2a8e:	cf 91       	pop	r28
    2a90:	df 91       	pop	r29
    2a92:	08 95       	ret

00002a94 <display_3>:

static void display_3() {
    2a94:	df 93       	push	r29
    2a96:	cf 93       	push	r28
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
		DIO_voidWritePinValue(DSSD_A, DIO_PIN_HIGH);
		DIO_voidWritePinValue(DSSD_B, DIO_PIN_HIGH);
		DIO_voidWritePinValue(DSSD_C, DIO_PIN_LOW);
		DIO_voidWritePinValue(DSSD_D, DIO_PIN_LOW);
	#elif DSSD_MODE == DSSD_NORMAL_MODE
		DIO_voidWritePinValue(DSSD_A, DIO_PIN_HIGH);
    2a9c:	8a e0       	ldi	r24, 0x0A	; 10
    2a9e:	61 e0       	ldi	r22, 0x01	; 1
    2aa0:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_B, DIO_PIN_HIGH);
    2aa4:	8b e0       	ldi	r24, 0x0B	; 11
    2aa6:	61 e0       	ldi	r22, 0x01	; 1
    2aa8:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_C, DIO_PIN_HIGH);
    2aac:	8c e0       	ldi	r24, 0x0C	; 12
    2aae:	61 e0       	ldi	r22, 0x01	; 1
    2ab0:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_D, DIO_PIN_HIGH);
    2ab4:	8d e0       	ldi	r24, 0x0D	; 13
    2ab6:	61 e0       	ldi	r22, 0x01	; 1
    2ab8:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_E, DIO_PIN_LOW);
    2abc:	8e e0       	ldi	r24, 0x0E	; 14
    2abe:	60 e0       	ldi	r22, 0x00	; 0
    2ac0:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_F, DIO_PIN_LOW);
    2ac4:	8f e0       	ldi	r24, 0x0F	; 15
    2ac6:	60 e0       	ldi	r22, 0x00	; 0
    2ac8:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_G, DIO_PIN_HIGH);
    2acc:	80 e1       	ldi	r24, 0x10	; 16
    2ace:	61 e0       	ldi	r22, 0x01	; 1
    2ad0:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
	#endif
}
    2ad4:	cf 91       	pop	r28
    2ad6:	df 91       	pop	r29
    2ad8:	08 95       	ret

00002ada <display_4>:

static void display_4() {
    2ada:	df 93       	push	r29
    2adc:	cf 93       	push	r28
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
		DIO_voidWritePinValue(DSSD_A, DIO_PIN_LOW);
		DIO_voidWritePinValue(DSSD_B, DIO_PIN_LOW);
		DIO_voidWritePinValue(DSSD_C, DIO_PIN_HIGH);
		DIO_voidWritePinValue(DSSD_D, DIO_PIN_LOW);
	#elif DSSD_MODE == DSSD_NORMAL_MODE
		DIO_voidWritePinValue(DSSD_A, DIO_PIN_LOW);
    2ae2:	8a e0       	ldi	r24, 0x0A	; 10
    2ae4:	60 e0       	ldi	r22, 0x00	; 0
    2ae6:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_B, DIO_PIN_HIGH);
    2aea:	8b e0       	ldi	r24, 0x0B	; 11
    2aec:	61 e0       	ldi	r22, 0x01	; 1
    2aee:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_C, DIO_PIN_HIGH);
    2af2:	8c e0       	ldi	r24, 0x0C	; 12
    2af4:	61 e0       	ldi	r22, 0x01	; 1
    2af6:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_D, DIO_PIN_LOW);
    2afa:	8d e0       	ldi	r24, 0x0D	; 13
    2afc:	60 e0       	ldi	r22, 0x00	; 0
    2afe:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_E, DIO_PIN_LOW);
    2b02:	8e e0       	ldi	r24, 0x0E	; 14
    2b04:	60 e0       	ldi	r22, 0x00	; 0
    2b06:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_F, DIO_PIN_HIGH);
    2b0a:	8f e0       	ldi	r24, 0x0F	; 15
    2b0c:	61 e0       	ldi	r22, 0x01	; 1
    2b0e:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_G, DIO_PIN_HIGH);
    2b12:	80 e1       	ldi	r24, 0x10	; 16
    2b14:	61 e0       	ldi	r22, 0x01	; 1
    2b16:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
	#endif
}
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	08 95       	ret

00002b20 <display_5>:

static void display_5() {
    2b20:	df 93       	push	r29
    2b22:	cf 93       	push	r28
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
		DIO_voidWritePinValue(DSSD_A, DIO_PIN_HIGH);
		DIO_voidWritePinValue(DSSD_B, DIO_PIN_LOW);
		DIO_voidWritePinValue(DSSD_C, DIO_PIN_HIGH);
		DIO_voidWritePinValue(DSSD_D, DIO_PIN_LOW);
	#elif DSSD_MODE == DSSD_NORMAL_MODE
		DIO_voidWritePinValue(DSSD_A, DIO_PIN_HIGH);
    2b28:	8a e0       	ldi	r24, 0x0A	; 10
    2b2a:	61 e0       	ldi	r22, 0x01	; 1
    2b2c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_B, DIO_PIN_LOW);
    2b30:	8b e0       	ldi	r24, 0x0B	; 11
    2b32:	60 e0       	ldi	r22, 0x00	; 0
    2b34:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_C, DIO_PIN_HIGH);
    2b38:	8c e0       	ldi	r24, 0x0C	; 12
    2b3a:	61 e0       	ldi	r22, 0x01	; 1
    2b3c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_D, DIO_PIN_HIGH);
    2b40:	8d e0       	ldi	r24, 0x0D	; 13
    2b42:	61 e0       	ldi	r22, 0x01	; 1
    2b44:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_E, DIO_PIN_LOW);
    2b48:	8e e0       	ldi	r24, 0x0E	; 14
    2b4a:	60 e0       	ldi	r22, 0x00	; 0
    2b4c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_F, DIO_PIN_HIGH);
    2b50:	8f e0       	ldi	r24, 0x0F	; 15
    2b52:	61 e0       	ldi	r22, 0x01	; 1
    2b54:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_G, DIO_PIN_HIGH);
    2b58:	80 e1       	ldi	r24, 0x10	; 16
    2b5a:	61 e0       	ldi	r22, 0x01	; 1
    2b5c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
	#endif
}
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	08 95       	ret

00002b66 <display_6>:

static void display_6() {
    2b66:	df 93       	push	r29
    2b68:	cf 93       	push	r28
    2b6a:	cd b7       	in	r28, 0x3d	; 61
    2b6c:	de b7       	in	r29, 0x3e	; 62
		DIO_voidWritePinValue(DSSD_A, DIO_PIN_LOW);
		DIO_voidWritePinValue(DSSD_B, DIO_PIN_HIGH);
		DIO_voidWritePinValue(DSSD_C, DIO_PIN_HIGH);
		DIO_voidWritePinValue(DSSD_D, DIO_PIN_LOW);
	#elif DSSD_MODE == DSSD_NORMAL_MODE
		DIO_voidWritePinValue(DSSD_A, DIO_PIN_HIGH);
    2b6e:	8a e0       	ldi	r24, 0x0A	; 10
    2b70:	61 e0       	ldi	r22, 0x01	; 1
    2b72:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_B, DIO_PIN_LOW);
    2b76:	8b e0       	ldi	r24, 0x0B	; 11
    2b78:	60 e0       	ldi	r22, 0x00	; 0
    2b7a:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_C, DIO_PIN_HIGH);
    2b7e:	8c e0       	ldi	r24, 0x0C	; 12
    2b80:	61 e0       	ldi	r22, 0x01	; 1
    2b82:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_D, DIO_PIN_HIGH);
    2b86:	8d e0       	ldi	r24, 0x0D	; 13
    2b88:	61 e0       	ldi	r22, 0x01	; 1
    2b8a:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_E, DIO_PIN_HIGH);
    2b8e:	8e e0       	ldi	r24, 0x0E	; 14
    2b90:	61 e0       	ldi	r22, 0x01	; 1
    2b92:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_F, DIO_PIN_HIGH);
    2b96:	8f e0       	ldi	r24, 0x0F	; 15
    2b98:	61 e0       	ldi	r22, 0x01	; 1
    2b9a:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_G, DIO_PIN_HIGH);
    2b9e:	80 e1       	ldi	r24, 0x10	; 16
    2ba0:	61 e0       	ldi	r22, 0x01	; 1
    2ba2:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
	#endif
}
    2ba6:	cf 91       	pop	r28
    2ba8:	df 91       	pop	r29
    2baa:	08 95       	ret

00002bac <display_7>:

static void display_7() {
    2bac:	df 93       	push	r29
    2bae:	cf 93       	push	r28
    2bb0:	cd b7       	in	r28, 0x3d	; 61
    2bb2:	de b7       	in	r29, 0x3e	; 62
		DIO_voidWritePinValue(DSSD_A, DIO_PIN_HIGH);
		DIO_voidWritePinValue(DSSD_B, DIO_PIN_HIGH);
		DIO_voidWritePinValue(DSSD_C, DIO_PIN_HIGH);
		DIO_voidWritePinValue(DSSD_D, DIO_PIN_LOW);
	#elif DSSD_MODE == DSSD_NORMAL_MODE
		DIO_voidWritePinValue(DSSD_A, DIO_PIN_HIGH);
    2bb4:	8a e0       	ldi	r24, 0x0A	; 10
    2bb6:	61 e0       	ldi	r22, 0x01	; 1
    2bb8:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_B, DIO_PIN_HIGH);
    2bbc:	8b e0       	ldi	r24, 0x0B	; 11
    2bbe:	61 e0       	ldi	r22, 0x01	; 1
    2bc0:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_C, DIO_PIN_HIGH);
    2bc4:	8c e0       	ldi	r24, 0x0C	; 12
    2bc6:	61 e0       	ldi	r22, 0x01	; 1
    2bc8:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_D, DIO_PIN_LOW);
    2bcc:	8d e0       	ldi	r24, 0x0D	; 13
    2bce:	60 e0       	ldi	r22, 0x00	; 0
    2bd0:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_E, DIO_PIN_LOW);
    2bd4:	8e e0       	ldi	r24, 0x0E	; 14
    2bd6:	60 e0       	ldi	r22, 0x00	; 0
    2bd8:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_F, DIO_PIN_LOW);
    2bdc:	8f e0       	ldi	r24, 0x0F	; 15
    2bde:	60 e0       	ldi	r22, 0x00	; 0
    2be0:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_G, DIO_PIN_LOW);
    2be4:	80 e1       	ldi	r24, 0x10	; 16
    2be6:	60 e0       	ldi	r22, 0x00	; 0
    2be8:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
	#endif
}
    2bec:	cf 91       	pop	r28
    2bee:	df 91       	pop	r29
    2bf0:	08 95       	ret

00002bf2 <display_8>:

static void display_8() {
    2bf2:	df 93       	push	r29
    2bf4:	cf 93       	push	r28
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
		DIO_voidWritePinValue(DSSD_A, DIO_PIN_LOW);
		DIO_voidWritePinValue(DSSD_B, DIO_PIN_LOW);
		DIO_voidWritePinValue(DSSD_C, DIO_PIN_LOW);
		DIO_voidWritePinValue(DSSD_D, DIO_PIN_HIGH);
	#elif DSSD_MODE == DSSD_NORMAL_MODE
		DIO_voidWritePinValue(DSSD_A, DIO_PIN_HIGH);
    2bfa:	8a e0       	ldi	r24, 0x0A	; 10
    2bfc:	61 e0       	ldi	r22, 0x01	; 1
    2bfe:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_B, DIO_PIN_HIGH);
    2c02:	8b e0       	ldi	r24, 0x0B	; 11
    2c04:	61 e0       	ldi	r22, 0x01	; 1
    2c06:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_C, DIO_PIN_HIGH);
    2c0a:	8c e0       	ldi	r24, 0x0C	; 12
    2c0c:	61 e0       	ldi	r22, 0x01	; 1
    2c0e:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_D, DIO_PIN_HIGH);
    2c12:	8d e0       	ldi	r24, 0x0D	; 13
    2c14:	61 e0       	ldi	r22, 0x01	; 1
    2c16:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_E, DIO_PIN_HIGH);
    2c1a:	8e e0       	ldi	r24, 0x0E	; 14
    2c1c:	61 e0       	ldi	r22, 0x01	; 1
    2c1e:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_F, DIO_PIN_HIGH);
    2c22:	8f e0       	ldi	r24, 0x0F	; 15
    2c24:	61 e0       	ldi	r22, 0x01	; 1
    2c26:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_G, DIO_PIN_HIGH);
    2c2a:	80 e1       	ldi	r24, 0x10	; 16
    2c2c:	61 e0       	ldi	r22, 0x01	; 1
    2c2e:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
	#endif
}
    2c32:	cf 91       	pop	r28
    2c34:	df 91       	pop	r29
    2c36:	08 95       	ret

00002c38 <display_9>:

static void display_9() {
    2c38:	df 93       	push	r29
    2c3a:	cf 93       	push	r28
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
		DIO_voidWritePinValue(DSSD_A, DIO_PIN_HIGH);
		DIO_voidWritePinValue(DSSD_B, DIO_PIN_LOW);
		DIO_voidWritePinValue(DSSD_C, DIO_PIN_LOW);
		DIO_voidWritePinValue(DSSD_D, DIO_PIN_HIGH);
	#elif DSSD_MODE == DSSD_NORMAL_MODE
		DIO_voidWritePinValue(DSSD_A, DIO_PIN_HIGH);
    2c40:	8a e0       	ldi	r24, 0x0A	; 10
    2c42:	61 e0       	ldi	r22, 0x01	; 1
    2c44:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_B, DIO_PIN_HIGH);
    2c48:	8b e0       	ldi	r24, 0x0B	; 11
    2c4a:	61 e0       	ldi	r22, 0x01	; 1
    2c4c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_C, DIO_PIN_HIGH);
    2c50:	8c e0       	ldi	r24, 0x0C	; 12
    2c52:	61 e0       	ldi	r22, 0x01	; 1
    2c54:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_D, DIO_PIN_HIGH);
    2c58:	8d e0       	ldi	r24, 0x0D	; 13
    2c5a:	61 e0       	ldi	r22, 0x01	; 1
    2c5c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_E, DIO_PIN_LOW);
    2c60:	8e e0       	ldi	r24, 0x0E	; 14
    2c62:	60 e0       	ldi	r22, 0x00	; 0
    2c64:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_F, DIO_PIN_HIGH);
    2c68:	8f e0       	ldi	r24, 0x0F	; 15
    2c6a:	61 e0       	ldi	r22, 0x01	; 1
    2c6c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
		DIO_voidWritePinValue(DSSD_G, DIO_PIN_HIGH);
    2c70:	80 e1       	ldi	r24, 0x10	; 16
    2c72:	61 e0       	ldi	r22, 0x01	; 1
    2c74:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <DIO_voidWritePinValue>
	#endif
}
    2c78:	cf 91       	pop	r28
    2c7a:	df 91       	pop	r29
    2c7c:	08 95       	ret

00002c7e <displaySelected>:

static void displaySelected(u8 local_u8Num) {
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	00 d0       	rcall	.+0      	; 0x2c84 <displaySelected+0x6>
    2c84:	0f 92       	push	r0
    2c86:	cd b7       	in	r28, 0x3d	; 61
    2c88:	de b7       	in	r29, 0x3e	; 62
    2c8a:	89 83       	std	Y+1, r24	; 0x01
	switch(local_u8Num) {
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	28 2f       	mov	r18, r24
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	3b 83       	std	Y+3, r19	; 0x03
    2c94:	2a 83       	std	Y+2, r18	; 0x02
    2c96:	8a 81       	ldd	r24, Y+2	; 0x02
    2c98:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9a:	84 30       	cpi	r24, 0x04	; 4
    2c9c:	91 05       	cpc	r25, r1
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <displaySelected+0x24>
    2ca0:	4b c0       	rjmp	.+150    	; 0x2d38 <displaySelected+0xba>
    2ca2:	2a 81       	ldd	r18, Y+2	; 0x02
    2ca4:	3b 81       	ldd	r19, Y+3	; 0x03
    2ca6:	25 30       	cpi	r18, 0x05	; 5
    2ca8:	31 05       	cpc	r19, r1
    2caa:	d4 f4       	brge	.+52     	; 0x2ce0 <displaySelected+0x62>
    2cac:	8a 81       	ldd	r24, Y+2	; 0x02
    2cae:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb0:	81 30       	cpi	r24, 0x01	; 1
    2cb2:	91 05       	cpc	r25, r1
    2cb4:	c1 f1       	breq	.+112    	; 0x2d26 <displaySelected+0xa8>
    2cb6:	2a 81       	ldd	r18, Y+2	; 0x02
    2cb8:	3b 81       	ldd	r19, Y+3	; 0x03
    2cba:	22 30       	cpi	r18, 0x02	; 2
    2cbc:	31 05       	cpc	r19, r1
    2cbe:	2c f4       	brge	.+10     	; 0x2cca <displaySelected+0x4c>
    2cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc4:	00 97       	sbiw	r24, 0x00	; 0
    2cc6:	61 f1       	breq	.+88     	; 0x2d20 <displaySelected+0xa2>
    2cc8:	49 c0       	rjmp	.+146    	; 0x2d5c <displaySelected+0xde>
    2cca:	2a 81       	ldd	r18, Y+2	; 0x02
    2ccc:	3b 81       	ldd	r19, Y+3	; 0x03
    2cce:	22 30       	cpi	r18, 0x02	; 2
    2cd0:	31 05       	cpc	r19, r1
    2cd2:	61 f1       	breq	.+88     	; 0x2d2c <displaySelected+0xae>
    2cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd8:	83 30       	cpi	r24, 0x03	; 3
    2cda:	91 05       	cpc	r25, r1
    2cdc:	51 f1       	breq	.+84     	; 0x2d32 <displaySelected+0xb4>
    2cde:	3e c0       	rjmp	.+124    	; 0x2d5c <displaySelected+0xde>
    2ce0:	2a 81       	ldd	r18, Y+2	; 0x02
    2ce2:	3b 81       	ldd	r19, Y+3	; 0x03
    2ce4:	27 30       	cpi	r18, 0x07	; 7
    2ce6:	31 05       	cpc	r19, r1
    2ce8:	81 f1       	breq	.+96     	; 0x2d4a <displaySelected+0xcc>
    2cea:	8a 81       	ldd	r24, Y+2	; 0x02
    2cec:	9b 81       	ldd	r25, Y+3	; 0x03
    2cee:	88 30       	cpi	r24, 0x08	; 8
    2cf0:	91 05       	cpc	r25, r1
    2cf2:	5c f4       	brge	.+22     	; 0x2d0a <displaySelected+0x8c>
    2cf4:	2a 81       	ldd	r18, Y+2	; 0x02
    2cf6:	3b 81       	ldd	r19, Y+3	; 0x03
    2cf8:	25 30       	cpi	r18, 0x05	; 5
    2cfa:	31 05       	cpc	r19, r1
    2cfc:	01 f1       	breq	.+64     	; 0x2d3e <displaySelected+0xc0>
    2cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2d00:	9b 81       	ldd	r25, Y+3	; 0x03
    2d02:	86 30       	cpi	r24, 0x06	; 6
    2d04:	91 05       	cpc	r25, r1
    2d06:	f1 f0       	breq	.+60     	; 0x2d44 <displaySelected+0xc6>
    2d08:	29 c0       	rjmp	.+82     	; 0x2d5c <displaySelected+0xde>
    2d0a:	2a 81       	ldd	r18, Y+2	; 0x02
    2d0c:	3b 81       	ldd	r19, Y+3	; 0x03
    2d0e:	28 30       	cpi	r18, 0x08	; 8
    2d10:	31 05       	cpc	r19, r1
    2d12:	f1 f0       	breq	.+60     	; 0x2d50 <displaySelected+0xd2>
    2d14:	8a 81       	ldd	r24, Y+2	; 0x02
    2d16:	9b 81       	ldd	r25, Y+3	; 0x03
    2d18:	89 30       	cpi	r24, 0x09	; 9
    2d1a:	91 05       	cpc	r25, r1
    2d1c:	e1 f0       	breq	.+56     	; 0x2d56 <displaySelected+0xd8>
    2d1e:	1e c0       	rjmp	.+60     	; 0x2d5c <displaySelected+0xde>
		case 0: 	display_0(); 	break;
    2d20:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <display_0>
    2d24:	1d c0       	rjmp	.+58     	; 0x2d60 <displaySelected+0xe2>
		case 1: 	display_1(); 	break;
    2d26:	0e 94 04 15 	call	0x2a08	; 0x2a08 <display_1>
    2d2a:	1a c0       	rjmp	.+52     	; 0x2d60 <displaySelected+0xe2>
		case 2: 	display_2(); 	break;
    2d2c:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <display_2>
    2d30:	17 c0       	rjmp	.+46     	; 0x2d60 <displaySelected+0xe2>
		case 3: 	display_3(); 	break;
    2d32:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <display_3>
    2d36:	14 c0       	rjmp	.+40     	; 0x2d60 <displaySelected+0xe2>
		case 4: 	display_4(); 	break;
    2d38:	0e 94 6d 15 	call	0x2ada	; 0x2ada <display_4>
    2d3c:	11 c0       	rjmp	.+34     	; 0x2d60 <displaySelected+0xe2>
		case 5: 	display_5(); 	break;
    2d3e:	0e 94 90 15 	call	0x2b20	; 0x2b20 <display_5>
    2d42:	0e c0       	rjmp	.+28     	; 0x2d60 <displaySelected+0xe2>
		case 6: 	display_6(); 	break;
    2d44:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <display_6>
    2d48:	0b c0       	rjmp	.+22     	; 0x2d60 <displaySelected+0xe2>
		case 7: 	display_7();	break;
    2d4a:	0e 94 d6 15 	call	0x2bac	; 0x2bac <display_7>
    2d4e:	08 c0       	rjmp	.+16     	; 0x2d60 <displaySelected+0xe2>
		case 8:	 	display_8(); 	break;
    2d50:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <display_8>
    2d54:	05 c0       	rjmp	.+10     	; 0x2d60 <displaySelected+0xe2>
		case 9: 	display_9(); 	break;
    2d56:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <display_9>
    2d5a:	02 c0       	rjmp	.+4      	; 0x2d60 <displaySelected+0xe2>
		default: 	display_0();	break;
    2d5c:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <display_0>
	}
}
    2d60:	0f 90       	pop	r0
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	cf 91       	pop	r28
    2d68:	df 91       	pop	r29
    2d6a:	08 95       	ret

00002d6c <Cooler_voidInit>:


/* functions definition */

void Cooler_voidInit(u8 local_u8CoolerPin)
{
    2d6c:	df 93       	push	r29
    2d6e:	cf 93       	push	r28
    2d70:	0f 92       	push	r0
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinMode(local_u8CoolerPin, DIO_PIN_OUTPUT);
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	61 e0       	ldi	r22, 0x01	; 1
    2d7c:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <DIO_voidSetPinMode>
}
    2d80:	0f 90       	pop	r0
    2d82:	cf 91       	pop	r28
    2d84:	df 91       	pop	r29
    2d86:	08 95       	ret

00002d88 <Cooler_voidTurnOn>:

void Cooler_voidTurnOn(u8 local_u8CoolerPin)
{
    2d88:	df 93       	push	r29
    2d8a:	cf 93       	push	r28
    2d8c:	0f 92       	push	r0
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
    2d92:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(local_u8CoolerPin);
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <DIO_voidSetPinValue>
}
    2d9a:	0f 90       	pop	r0
    2d9c:	cf 91       	pop	r28
    2d9e:	df 91       	pop	r29
    2da0:	08 95       	ret

00002da2 <Cooler_voidTurnOff>:

void Cooler_voidTurnOff(u8 local_u8CoolerPin)
{
    2da2:	df 93       	push	r29
    2da4:	cf 93       	push	r28
    2da6:	0f 92       	push	r0
    2da8:	cd b7       	in	r28, 0x3d	; 61
    2daa:	de b7       	in	r29, 0x3e	; 62
    2dac:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidClearPinValue(local_u8CoolerPin);
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <DIO_voidClearPinValue>
}
    2db4:	0f 90       	pop	r0
    2db6:	cf 91       	pop	r28
    2db8:	df 91       	pop	r29
    2dba:	08 95       	ret

00002dbc <App_DefaultOnOffBtnHandler>:
 * 		- start system timer
 * 		- enable Up and DOWN buttons
 *
 * */
static void App_DefaultOnOffBtnHandler(void)
{
    2dbc:	df 93       	push	r29
    2dbe:	cf 93       	push	r28
    2dc0:	cd b7       	in	r28, 0x3d	; 61
    2dc2:	de b7       	in	r29, 0x3e	; 62
	if(App_u8SystemState == SYSTEM_RUNNING)
    2dc4:	80 91 8c 01 	lds	r24, 0x018C
    2dc8:	81 30       	cpi	r24, 0x01	; 1
    2dca:	f1 f4       	brne	.+60     	; 0x2e08 <App_DefaultOnOffBtnHandler+0x4c>
	{
		App_u8SystemState = SYSTEM_STOPPED;
    2dcc:	10 92 8c 01 	sts	0x018C, r1
		App_u8SettingModeState = SETTING_MODE_DIS;
    2dd0:	10 92 8e 01 	sts	0x018E, r1
		App_u16SetModeTimerCounter = 0;
    2dd4:	10 92 91 01 	sts	0x0191, r1
    2dd8:	10 92 90 01 	sts	0x0190, r1
		App_u8TempTimerCounter = 0;
    2ddc:	10 92 8f 01 	sts	0x018F, r1
		App_TimerStop();
    2de0:	0e 94 98 18 	call	0x3130	; 0x3130 <App_TimerStop>
		DSSD_voidDisableAll();
    2de4:	0e 94 4f 14 	call	0x289e	; 0x289e <DSSD_voidDisableAll>
		Heater_voidTurnOff(HEATER_RELAY_PIN);
    2de8:	81 e2       	ldi	r24, 0x21	; 33
    2dea:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <Heater_voidTurnOff>
		Cooler_voidTurnOff(COOLER_RELAY_PIN);
    2dee:	83 e2       	ldi	r24, 0x23	; 35
    2df0:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <Cooler_voidTurnOff>
		LED_voidTurnOff(LED_C_H);
    2df4:	82 e2       	ldi	r24, 0x22	; 34
    2df6:	0e 94 36 13 	call	0x266c	; 0x266c <LED_voidTurnOff>
		PushBtn_voidDisable(BTN_UP_CTRL);
    2dfa:	8a e2       	ldi	r24, 0x2A	; 42
    2dfc:	0e 94 d6 12 	call	0x25ac	; 0x25ac <PushBtn_voidDisable>
		PushBtn_voidDisable(BTN_DOWN_CTRL);
    2e00:	8b e2       	ldi	r24, 0x2B	; 43
    2e02:	0e 94 d6 12 	call	0x25ac	; 0x25ac <PushBtn_voidDisable>
    2e06:	0b c0       	rjmp	.+22     	; 0x2e1e <App_DefaultOnOffBtnHandler+0x62>
	}
	else
	{
		App_u8SystemState = SYSTEM_RUNNING;
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	80 93 8c 01 	sts	0x018C, r24
		App_TimerBegin();
    2e0e:	0e 94 8f 18 	call	0x311e	; 0x311e <App_TimerBegin>
		PushBtn_voidEnable(BTN_UP_CTRL);
    2e12:	8a e2       	ldi	r24, 0x2A	; 42
    2e14:	0e 94 ac 12 	call	0x2558	; 0x2558 <PushBtn_voidEnable>
		PushBtn_voidEnable(BTN_DOWN_CTRL);
    2e18:	8b e2       	ldi	r24, 0x2B	; 43
    2e1a:	0e 94 ac 12 	call	0x2558	; 0x2558 <PushBtn_voidEnable>
	}
}
    2e1e:	cf 91       	pop	r28
    2e20:	df 91       	pop	r29
    2e22:	08 95       	ret

00002e24 <App_DefaultUpBtnHandler>:
 * 	- If it lower, increment the temperature set point value by 5 degrees and write it into the EEPROM. If not, do nothing.
 * 	- In addition that, enable setting mode and reset setting mode counter.
 *
 * */
static void App_DefaultUpBtnHandler(void)
{
    2e24:	df 93       	push	r29
    2e26:	cf 93       	push	r28
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
	if((App_u8TempSetPoint < TEMP_MAX_SET_POINT) && (App_u8SettingModeState == SETTING_MODE_EN))
    2e2c:	80 91 68 01 	lds	r24, 0x0168
    2e30:	8b 34       	cpi	r24, 0x4B	; 75
    2e32:	78 f4       	brcc	.+30     	; 0x2e52 <App_DefaultUpBtnHandler+0x2e>
    2e34:	80 91 8e 01 	lds	r24, 0x018E
    2e38:	81 30       	cpi	r24, 0x01	; 1
    2e3a:	59 f4       	brne	.+22     	; 0x2e52 <App_DefaultUpBtnHandler+0x2e>
	{
		App_u8TempSetPoint += TEMP_ON_CHANGE_VALUE;
    2e3c:	80 91 68 01 	lds	r24, 0x0168
    2e40:	8b 5f       	subi	r24, 0xFB	; 251
    2e42:	80 93 68 01 	sts	0x0168, r24
		EEPROM_voidWriteByte(App_u8TempSetPoint, 0, 0);
    2e46:	80 91 68 01 	lds	r24, 0x0168
    2e4a:	60 e0       	ldi	r22, 0x00	; 0
    2e4c:	40 e0       	ldi	r20, 0x00	; 0
    2e4e:	0e 94 82 13 	call	0x2704	; 0x2704 <EEPROM_voidWriteByte>
	}
	App_u8SettingModeState = SETTING_MODE_EN;
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	80 93 8e 01 	sts	0x018E, r24
	App_u16SetModeTimerCounter = 0;
    2e58:	10 92 91 01 	sts	0x0191, r1
    2e5c:	10 92 90 01 	sts	0x0190, r1
}
    2e60:	cf 91       	pop	r28
    2e62:	df 91       	pop	r29
    2e64:	08 95       	ret

00002e66 <App_DefaultDownBtnHandler>:
 *
 * */
/*=====================================================================================================================================*/

static void App_DefaultDownBtnHandler(void)
{
    2e66:	df 93       	push	r29
    2e68:	cf 93       	push	r28
    2e6a:	cd b7       	in	r28, 0x3d	; 61
    2e6c:	de b7       	in	r29, 0x3e	; 62
	if((App_u8TempSetPoint > TEMP_MIN_SET_POINT) && (App_u8SettingModeState == SETTING_MODE_EN))
    2e6e:	80 91 68 01 	lds	r24, 0x0168
    2e72:	84 32       	cpi	r24, 0x24	; 36
    2e74:	78 f0       	brcs	.+30     	; 0x2e94 <App_DefaultDownBtnHandler+0x2e>
    2e76:	80 91 8e 01 	lds	r24, 0x018E
    2e7a:	81 30       	cpi	r24, 0x01	; 1
    2e7c:	59 f4       	brne	.+22     	; 0x2e94 <App_DefaultDownBtnHandler+0x2e>
	{
		App_u8TempSetPoint -= TEMP_ON_CHANGE_VALUE;
    2e7e:	80 91 68 01 	lds	r24, 0x0168
    2e82:	85 50       	subi	r24, 0x05	; 5
    2e84:	80 93 68 01 	sts	0x0168, r24
		EEPROM_voidWriteByte(App_u8TempSetPoint, 0, 0);
    2e88:	80 91 68 01 	lds	r24, 0x0168
    2e8c:	60 e0       	ldi	r22, 0x00	; 0
    2e8e:	40 e0       	ldi	r20, 0x00	; 0
    2e90:	0e 94 82 13 	call	0x2704	; 0x2704 <EEPROM_voidWriteByte>
	}
	App_u8SettingModeState = SETTING_MODE_EN;
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	80 93 8e 01 	sts	0x018E, r24
	App_u16SetModeTimerCounter = 0;
    2e9a:	10 92 91 01 	sts	0x0191, r1
    2e9e:	10 92 90 01 	sts	0x0190, r1
}
    2ea2:	cf 91       	pop	r28
    2ea4:	df 91       	pop	r29
    2ea6:	08 95       	ret

00002ea8 <App_DefaultTimerHandler>:
 *
 *
 * */

static void App_DefaultTimerHandler(void)
{
    2ea8:	ef 92       	push	r14
    2eaa:	ff 92       	push	r15
    2eac:	0f 93       	push	r16
    2eae:	1f 93       	push	r17
    2eb0:	df 93       	push	r29
    2eb2:	cf 93       	push	r28
    2eb4:	00 d0       	rcall	.+0      	; 0x2eb6 <App_DefaultTimerHandler+0xe>
    2eb6:	cd b7       	in	r28, 0x3d	; 61
    2eb8:	de b7       	in	r29, 0x3e	; 62
	App_u8TempTimerCounter++;
    2eba:	80 91 8f 01 	lds	r24, 0x018F
    2ebe:	8f 5f       	subi	r24, 0xFF	; 255
    2ec0:	80 93 8f 01 	sts	0x018F, r24
	if(App_u8TempTimerCounter % 10 == 0)
    2ec4:	80 91 8f 01 	lds	r24, 0x018F
    2ec8:	9a e0       	ldi	r25, 0x0A	; 10
    2eca:	69 2f       	mov	r22, r25
    2ecc:	0e 94 20 1b 	call	0x3640	; 0x3640 <__udivmodqi4>
    2ed0:	89 2f       	mov	r24, r25
    2ed2:	88 23       	and	r24, r24
    2ed4:	09 f0       	breq	.+2      	; 0x2ed8 <App_DefaultTimerHandler+0x30>
    2ed6:	a4 c0       	rjmp	.+328    	; 0x3020 <App_DefaultTimerHandler+0x178>
	{
		App_u8CurrentTemp = SensorLM35_u16ReadTemp(LM35_PIN);
    2ed8:	81 e1       	ldi	r24, 0x11	; 17
    2eda:	0e 94 3d 12 	call	0x247a	; 0x247a <SensorLM35_u16ReadTemp>
    2ede:	80 93 7f 01 	sts	0x017F, r24
		App_u8TempAverage[(App_u8TempTimerCounter / 10) - 1] = App_u8CurrentTemp;
    2ee2:	80 91 8f 01 	lds	r24, 0x018F
    2ee6:	9a e0       	ldi	r25, 0x0A	; 10
    2ee8:	69 2f       	mov	r22, r25
    2eea:	0e 94 20 1b 	call	0x3640	; 0x3640 <__udivmodqi4>
    2eee:	88 2f       	mov	r24, r24
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	01 97       	sbiw	r24, 0x01	; 1
    2ef4:	20 91 7f 01 	lds	r18, 0x017F
    2ef8:	fc 01       	movw	r30, r24
    2efa:	e0 58       	subi	r30, 0x80	; 128
    2efc:	fe 4f       	sbci	r31, 0xFE	; 254
    2efe:	20 83       	st	Z, r18
		for(u8 i = 0; i < 10; i++)
    2f00:	19 82       	std	Y+1, r1	; 0x01
    2f02:	16 c0       	rjmp	.+44     	; 0x2f30 <App_DefaultTimerHandler+0x88>
		{
			App_u16TempAverageCalc += App_u8TempAverage[i];
    2f04:	89 81       	ldd	r24, Y+1	; 0x01
    2f06:	88 2f       	mov	r24, r24
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	fc 01       	movw	r30, r24
    2f0c:	e0 58       	subi	r30, 0x80	; 128
    2f0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f10:	80 81       	ld	r24, Z
    2f12:	28 2f       	mov	r18, r24
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	80 91 8a 01 	lds	r24, 0x018A
    2f1a:	90 91 8b 01 	lds	r25, 0x018B
    2f1e:	82 0f       	add	r24, r18
    2f20:	93 1f       	adc	r25, r19
    2f22:	90 93 8b 01 	sts	0x018B, r25
    2f26:	80 93 8a 01 	sts	0x018A, r24
	App_u8TempTimerCounter++;
	if(App_u8TempTimerCounter % 10 == 0)
	{
		App_u8CurrentTemp = SensorLM35_u16ReadTemp(LM35_PIN);
		App_u8TempAverage[(App_u8TempTimerCounter / 10) - 1] = App_u8CurrentTemp;
		for(u8 i = 0; i < 10; i++)
    2f2a:	89 81       	ldd	r24, Y+1	; 0x01
    2f2c:	8f 5f       	subi	r24, 0xFF	; 255
    2f2e:	89 83       	std	Y+1, r24	; 0x01
    2f30:	89 81       	ldd	r24, Y+1	; 0x01
    2f32:	8a 30       	cpi	r24, 0x0A	; 10
    2f34:	38 f3       	brcs	.-50     	; 0x2f04 <App_DefaultTimerHandler+0x5c>
		{
			App_u16TempAverageCalc += App_u8TempAverage[i];
		}
		if(((f32)(App_u16TempAverageCalc / 10)) > ((f32)(App_u8TempSetPoint + TEMP_TOLERANCE)))
    2f36:	80 91 8a 01 	lds	r24, 0x018A
    2f3a:	90 91 8b 01 	lds	r25, 0x018B
    2f3e:	2a e0       	ldi	r18, 0x0A	; 10
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	b9 01       	movw	r22, r18
    2f44:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__udivmodhi4>
    2f48:	cb 01       	movw	r24, r22
    2f4a:	cc 01       	movw	r24, r24
    2f4c:	a0 e0       	ldi	r26, 0x00	; 0
    2f4e:	b0 e0       	ldi	r27, 0x00	; 0
    2f50:	bc 01       	movw	r22, r24
    2f52:	cd 01       	movw	r24, r26
    2f54:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    2f58:	7b 01       	movw	r14, r22
    2f5a:	8c 01       	movw	r16, r24
    2f5c:	80 91 68 01 	lds	r24, 0x0168
    2f60:	88 2f       	mov	r24, r24
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	05 96       	adiw	r24, 0x05	; 5
    2f66:	aa 27       	eor	r26, r26
    2f68:	97 fd       	sbrc	r25, 7
    2f6a:	a0 95       	com	r26
    2f6c:	ba 2f       	mov	r27, r26
    2f6e:	bc 01       	movw	r22, r24
    2f70:	cd 01       	movw	r24, r26
    2f72:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2f76:	9b 01       	movw	r18, r22
    2f78:	ac 01       	movw	r20, r24
    2f7a:	c8 01       	movw	r24, r16
    2f7c:	b7 01       	movw	r22, r14
    2f7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f82:	18 16       	cp	r1, r24
    2f84:	54 f4       	brge	.+20     	; 0x2f9a <App_DefaultTimerHandler+0xf2>
		{
			Cooler_voidTurnOn(COOLER_RELAY_PIN);
    2f86:	83 e2       	ldi	r24, 0x23	; 35
    2f88:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <Cooler_voidTurnOn>
			Heater_voidTurnOff(HEATER_RELAY_PIN);
    2f8c:	81 e2       	ldi	r24, 0x21	; 33
    2f8e:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <Heater_voidTurnOff>
			LED_voidTurnOn(LED_C_H);
    2f92:	82 e2       	ldi	r24, 0x22	; 34
    2f94:	0e 94 28 13 	call	0x2650	; 0x2650 <LED_voidTurnOn>
    2f98:	3f c0       	rjmp	.+126    	; 0x3018 <App_DefaultTimerHandler+0x170>
		}
		else if(((f32)(App_u16TempAverageCalc / 10)) < ((f32)(App_u8TempSetPoint - TEMP_TOLERANCE)))
    2f9a:	80 91 8a 01 	lds	r24, 0x018A
    2f9e:	90 91 8b 01 	lds	r25, 0x018B
    2fa2:	2a e0       	ldi	r18, 0x0A	; 10
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	b9 01       	movw	r22, r18
    2fa8:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__udivmodhi4>
    2fac:	cb 01       	movw	r24, r22
    2fae:	cc 01       	movw	r24, r24
    2fb0:	a0 e0       	ldi	r26, 0x00	; 0
    2fb2:	b0 e0       	ldi	r27, 0x00	; 0
    2fb4:	bc 01       	movw	r22, r24
    2fb6:	cd 01       	movw	r24, r26
    2fb8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    2fbc:	7b 01       	movw	r14, r22
    2fbe:	8c 01       	movw	r16, r24
    2fc0:	80 91 68 01 	lds	r24, 0x0168
    2fc4:	88 2f       	mov	r24, r24
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	05 97       	sbiw	r24, 0x05	; 5
    2fca:	aa 27       	eor	r26, r26
    2fcc:	97 fd       	sbrc	r25, 7
    2fce:	a0 95       	com	r26
    2fd0:	ba 2f       	mov	r27, r26
    2fd2:	bc 01       	movw	r22, r24
    2fd4:	cd 01       	movw	r24, r26
    2fd6:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2fda:	9b 01       	movw	r18, r22
    2fdc:	ac 01       	movw	r20, r24
    2fde:	c8 01       	movw	r24, r16
    2fe0:	b7 01       	movw	r22, r14
    2fe2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fe6:	88 23       	and	r24, r24
    2fe8:	74 f4       	brge	.+28     	; 0x3006 <App_DefaultTimerHandler+0x15e>
		{
			Heater_voidTurnOn(HEATER_RELAY_PIN);
    2fea:	81 e2       	ldi	r24, 0x21	; 33
    2fec:	0e 94 5f 13 	call	0x26be	; 0x26be <Heater_voidTurnOn>
			Cooler_voidTurnOff(COOLER_RELAY_PIN);
    2ff0:	83 e2       	ldi	r24, 0x23	; 35
    2ff2:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <Cooler_voidTurnOff>
			if(App_u8TempTimerCounter >= 100) LED_voidToggle(LED_C_H);
    2ff6:	80 91 8f 01 	lds	r24, 0x018F
    2ffa:	84 36       	cpi	r24, 0x64	; 100
    2ffc:	68 f0       	brcs	.+26     	; 0x3018 <App_DefaultTimerHandler+0x170>
    2ffe:	82 e2       	ldi	r24, 0x22	; 34
    3000:	0e 94 44 13 	call	0x2688	; 0x2688 <LED_voidToggle>
    3004:	09 c0       	rjmp	.+18     	; 0x3018 <App_DefaultTimerHandler+0x170>
		}
		else
		{
			Heater_voidTurnOff(HEATER_RELAY_PIN);
    3006:	81 e2       	ldi	r24, 0x21	; 33
    3008:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <Heater_voidTurnOff>
			Cooler_voidTurnOff(COOLER_RELAY_PIN);
    300c:	83 e2       	ldi	r24, 0x23	; 35
    300e:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <Cooler_voidTurnOff>
			LED_voidTurnOff(LED_C_H);
    3012:	82 e2       	ldi	r24, 0x22	; 34
    3014:	0e 94 36 13 	call	0x266c	; 0x266c <LED_voidTurnOff>
		}
		App_u16TempAverageCalc = 0;
    3018:	10 92 8b 01 	sts	0x018B, r1
    301c:	10 92 8a 01 	sts	0x018A, r1
	}
	if(App_u8TempTimerCounter >= 100)
    3020:	80 91 8f 01 	lds	r24, 0x018F
    3024:	84 36       	cpi	r24, 0x64	; 100
    3026:	10 f0       	brcs	.+4      	; 0x302c <App_DefaultTimerHandler+0x184>
	{
		App_u8TempTimerCounter = 0;
    3028:	10 92 8f 01 	sts	0x018F, r1
	}

	if(App_u8SettingModeState == SETTING_MODE_EN)
    302c:	80 91 8e 01 	lds	r24, 0x018E
    3030:	81 30       	cpi	r24, 0x01	; 1
    3032:	09 f0       	breq	.+2      	; 0x3036 <App_DefaultTimerHandler+0x18e>
    3034:	41 c0       	rjmp	.+130    	; 0x30b8 <App_DefaultTimerHandler+0x210>
	{
		App_u16SetModeTimerCounter++;
    3036:	80 91 90 01 	lds	r24, 0x0190
    303a:	90 91 91 01 	lds	r25, 0x0191
    303e:	01 96       	adiw	r24, 0x01	; 1
    3040:	90 93 91 01 	sts	0x0191, r25
    3044:	80 93 90 01 	sts	0x0190, r24
		if(App_u16SetModeTimerCounter % 100 == 0)
    3048:	80 91 90 01 	lds	r24, 0x0190
    304c:	90 91 91 01 	lds	r25, 0x0191
    3050:	24 e6       	ldi	r18, 0x64	; 100
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	b9 01       	movw	r22, r18
    3056:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__udivmodhi4>
    305a:	00 97       	sbiw	r24, 0x00	; 0
    305c:	69 f4       	brne	.+26     	; 0x3078 <App_DefaultTimerHandler+0x1d0>
		{
			if(DSSD_u8Status() == DSSD_ON)
    305e:	0e 94 b9 14 	call	0x2972	; 0x2972 <DSSD_u8Status>
    3062:	81 30       	cpi	r24, 0x01	; 1
    3064:	19 f4       	brne	.+6      	; 0x306c <App_DefaultTimerHandler+0x1c4>
			{
				DSSD_voidDisableAll();
    3066:	0e 94 4f 14 	call	0x289e	; 0x289e <DSSD_voidDisableAll>
    306a:	06 c0       	rjmp	.+12     	; 0x3078 <App_DefaultTimerHandler+0x1d0>
			}

			else if(DSSD_u8Status() == DSSD_OFF)
    306c:	0e 94 b9 14 	call	0x2972	; 0x2972 <DSSD_u8Status>
    3070:	88 23       	and	r24, r24
    3072:	11 f4       	brne	.+4      	; 0x3078 <App_DefaultTimerHandler+0x1d0>
			{
				DSSD_voidEN1();
    3074:	0e 94 35 14 	call	0x286a	; 0x286a <DSSD_voidEN1>
			}
		}
		if(DSSD_u8Status() == DSSD_ON)
    3078:	0e 94 b9 14 	call	0x2972	; 0x2972 <DSSD_u8Status>
    307c:	81 30       	cpi	r24, 0x01	; 1
    307e:	39 f4       	brne	.+14     	; 0x308e <App_DefaultTimerHandler+0x1e6>
		{
			DSSD_voidDisplay(App_u8TempSetPoint, App_u8SevenSegDigit);
    3080:	80 91 68 01 	lds	r24, 0x0168
    3084:	90 91 8d 01 	lds	r25, 0x018D
    3088:	69 2f       	mov	r22, r25
    308a:	0e 94 94 14 	call	0x2928	; 0x2928 <DSSD_voidDisplay>
		}
		if(App_u16SetModeTimerCounter >= 500)
    308e:	80 91 90 01 	lds	r24, 0x0190
    3092:	90 91 91 01 	lds	r25, 0x0191
    3096:	21 e0       	ldi	r18, 0x01	; 1
    3098:	84 3f       	cpi	r24, 0xF4	; 244
    309a:	92 07       	cpc	r25, r18
    309c:	c0 f0       	brcs	.+48     	; 0x30ce <App_DefaultTimerHandler+0x226>
		{
			App_u8SettingModeState = SETTING_MODE_DIS;
    309e:	10 92 8e 01 	sts	0x018E, r1
			App_u16SetModeTimerCounter = 0;
    30a2:	10 92 91 01 	sts	0x0191, r1
    30a6:	10 92 90 01 	sts	0x0190, r1
			EEPROM_voidWriteByte(App_u8TempSetPoint, 0, 0);
    30aa:	80 91 68 01 	lds	r24, 0x0168
    30ae:	60 e0       	ldi	r22, 0x00	; 0
    30b0:	40 e0       	ldi	r20, 0x00	; 0
    30b2:	0e 94 82 13 	call	0x2704	; 0x2704 <EEPROM_voidWriteByte>
    30b6:	0b c0       	rjmp	.+22     	; 0x30ce <App_DefaultTimerHandler+0x226>
		}
	}
	else if(App_u8SettingModeState == SETTING_MODE_DIS)
    30b8:	80 91 8e 01 	lds	r24, 0x018E
    30bc:	88 23       	and	r24, r24
    30be:	39 f4       	brne	.+14     	; 0x30ce <App_DefaultTimerHandler+0x226>
	{
		DSSD_voidDisplay(App_u8CurrentTemp, App_u8SevenSegDigit);
    30c0:	80 91 7f 01 	lds	r24, 0x017F
    30c4:	90 91 8d 01 	lds	r25, 0x018D
    30c8:	69 2f       	mov	r22, r25
    30ca:	0e 94 94 14 	call	0x2928	; 0x2928 <DSSD_voidDisplay>
	}
	App_u8SevenSegDigit = App_u8SevenSegDigit == DSSD_DISPLAY_ONES ? DSSD_DISPLAY_TENS : DSSD_DISPLAY_ONES;
    30ce:	80 91 8d 01 	lds	r24, 0x018D
    30d2:	1a 82       	std	Y+2, r1	; 0x02
    30d4:	88 23       	and	r24, r24
    30d6:	11 f4       	brne	.+4      	; 0x30dc <App_DefaultTimerHandler+0x234>
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	8a 83       	std	Y+2, r24	; 0x02
    30dc:	2a 81       	ldd	r18, Y+2	; 0x02
    30de:	20 93 8d 01 	sts	0x018D, r18
}
    30e2:	0f 90       	pop	r0
    30e4:	0f 90       	pop	r0
    30e6:	cf 91       	pop	r28
    30e8:	df 91       	pop	r29
    30ea:	1f 91       	pop	r17
    30ec:	0f 91       	pop	r16
    30ee:	ff 90       	pop	r15
    30f0:	ef 90       	pop	r14
    30f2:	08 95       	ret

000030f4 <App_TimerInit>:
 * 		- set the timer period
 * 		- set call back handler for the timer
 *
 * */
static void App_TimerInit(void)
{
    30f4:	df 93       	push	r29
    30f6:	cf 93       	push	r28
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
	Timer0_voidInit();
    30fc:	0e 94 c9 06 	call	0xd92	; 0xd92 <Timer0_voidInit>
	Timer0_voidSetTime(TIMER_PERIOD_MSEC);
    3100:	6a e0       	ldi	r22, 0x0A	; 10
    3102:	70 e0       	ldi	r23, 0x00	; 0
    3104:	80 e0       	ldi	r24, 0x00	; 0
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	0e 94 e5 06 	call	0xdca	; 0xdca <Timer0_voidSetTime>
	Timer0_voidSetCallBack(App_ptrTimerHandler);
    310c:	80 91 98 01 	lds	r24, 0x0198
    3110:	90 91 99 01 	lds	r25, 0x0199
    3114:	0e 94 71 07 	call	0xee2	; 0xee2 <Timer0_voidSetCallBack>
}
    3118:	cf 91       	pop	r28
    311a:	df 91       	pop	r29
    311c:	08 95       	ret

0000311e <App_TimerBegin>:

/*=====================================================================================================================================*/


static void App_TimerBegin(void)
{
    311e:	df 93       	push	r29
    3120:	cf 93       	push	r28
    3122:	cd b7       	in	r28, 0x3d	; 61
    3124:	de b7       	in	r29, 0x3e	; 62
	Timer0_voidStart();
    3126:	0e 94 54 07 	call	0xea8	; 0xea8 <Timer0_voidStart>
}
    312a:	cf 91       	pop	r28
    312c:	df 91       	pop	r29
    312e:	08 95       	ret

00003130 <App_TimerStop>:
/*=====================================================================================================================================*/

/*=====================================================================================================================================*/

static void App_TimerStop(void)
{
    3130:	df 93       	push	r29
    3132:	cf 93       	push	r28
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
	Timer0_voidStop();
    3138:	0e 94 63 07 	call	0xec6	; 0xec6 <Timer0_voidStop>
}
    313c:	cf 91       	pop	r28
    313e:	df 91       	pop	r29
    3140:	08 95       	ret

00003142 <App_SystemInit>:
 * 	- getting the the the temperature set point value which saved on EEPROM.
 * 	  if EEPROM is used for first time, write into it the initial set point which configured in the macros file.
 *
 * */
void App_SystemInit(void)
{
    3142:	df 93       	push	r29
    3144:	cf 93       	push	r28
    3146:	cd b7       	in	r28, 0x3d	; 61
    3148:	de b7       	in	r29, 0x3e	; 62
    314a:	ab 97       	sbiw	r28, 0x2b	; 43
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	de bf       	out	0x3e, r29	; 62
    3152:	0f be       	out	0x3f, r0	; 63
    3154:	cd bf       	out	0x3d, r28	; 61
	GIE_voidEnableGlobalINT();
    3156:	0e 94 41 0b 	call	0x1682	; 0x1682 <GIE_voidEnableGlobalINT>

	if(App_ptrOnOffBtnHandler == NULL) 	App_ptrOnOffBtnHandler 	= App_DefaultOnOffBtnHandler;
    315a:	80 91 92 01 	lds	r24, 0x0192
    315e:	90 91 93 01 	lds	r25, 0x0193
    3162:	00 97       	sbiw	r24, 0x00	; 0
    3164:	31 f4       	brne	.+12     	; 0x3172 <App_SystemInit+0x30>
    3166:	8e ed       	ldi	r24, 0xDE	; 222
    3168:	96 e1       	ldi	r25, 0x16	; 22
    316a:	90 93 93 01 	sts	0x0193, r25
    316e:	80 93 92 01 	sts	0x0192, r24
	if(App_ptrUpBtnHandler == NULL) 	App_ptrUpBtnHandler 	= App_DefaultUpBtnHandler;
    3172:	80 91 94 01 	lds	r24, 0x0194
    3176:	90 91 95 01 	lds	r25, 0x0195
    317a:	00 97       	sbiw	r24, 0x00	; 0
    317c:	31 f4       	brne	.+12     	; 0x318a <App_SystemInit+0x48>
    317e:	82 e1       	ldi	r24, 0x12	; 18
    3180:	97 e1       	ldi	r25, 0x17	; 23
    3182:	90 93 95 01 	sts	0x0195, r25
    3186:	80 93 94 01 	sts	0x0194, r24
	if(App_ptrDownBtnHandler == NULL) 	App_ptrDownBtnHandler 	= App_DefaultDownBtnHandler;
    318a:	80 91 96 01 	lds	r24, 0x0196
    318e:	90 91 97 01 	lds	r25, 0x0197
    3192:	00 97       	sbiw	r24, 0x00	; 0
    3194:	31 f4       	brne	.+12     	; 0x31a2 <App_SystemInit+0x60>
    3196:	83 e3       	ldi	r24, 0x33	; 51
    3198:	97 e1       	ldi	r25, 0x17	; 23
    319a:	90 93 97 01 	sts	0x0197, r25
    319e:	80 93 96 01 	sts	0x0196, r24
	if(App_ptrTimerHandler == NULL) 	App_ptrTimerHandler 	= App_DefaultTimerHandler;
    31a2:	80 91 98 01 	lds	r24, 0x0198
    31a6:	90 91 99 01 	lds	r25, 0x0199
    31aa:	00 97       	sbiw	r24, 0x00	; 0
    31ac:	31 f4       	brne	.+12     	; 0x31ba <App_SystemInit+0x78>
    31ae:	84 e5       	ldi	r24, 0x54	; 84
    31b0:	97 e1       	ldi	r25, 0x17	; 23
    31b2:	90 93 99 01 	sts	0x0199, r25
    31b6:	80 93 98 01 	sts	0x0198, r24

	PushBtn_voidInit(BTN_ON_OFF, PUSH_BTN_INTERRUPT_EN, App_ptrOnOffBtnHandler);
    31ba:	20 91 92 01 	lds	r18, 0x0192
    31be:	30 91 93 01 	lds	r19, 0x0193
    31c2:	86 e1       	ldi	r24, 0x16	; 22
    31c4:	61 e0       	ldi	r22, 0x01	; 1
    31c6:	a9 01       	movw	r20, r18
    31c8:	0e 94 57 12 	call	0x24ae	; 0x24ae <PushBtn_voidInit>
	PushBtn_voidInit(BTN_UP_CTRL, PUSH_BTN_INTERRUPT_EN, App_ptrUpBtnHandler);
    31cc:	20 91 94 01 	lds	r18, 0x0194
    31d0:	30 91 95 01 	lds	r19, 0x0195
    31d4:	8a e2       	ldi	r24, 0x2A	; 42
    31d6:	61 e0       	ldi	r22, 0x01	; 1
    31d8:	a9 01       	movw	r20, r18
    31da:	0e 94 57 12 	call	0x24ae	; 0x24ae <PushBtn_voidInit>
	PushBtn_voidInit(BTN_DOWN_CTRL, PUSH_BTN_INTERRUPT_EN, App_ptrDownBtnHandler);
    31de:	20 91 96 01 	lds	r18, 0x0196
    31e2:	30 91 97 01 	lds	r19, 0x0197
    31e6:	8b e2       	ldi	r24, 0x2B	; 43
    31e8:	61 e0       	ldi	r22, 0x01	; 1
    31ea:	a9 01       	movw	r20, r18
    31ec:	0e 94 57 12 	call	0x24ae	; 0x24ae <PushBtn_voidInit>

	App_TimerInit();
    31f0:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <App_TimerInit>
	DSSD_voidInit();
    31f4:	0e 94 06 14 	call	0x280c	; 0x280c <DSSD_voidInit>
	SensorLM35_voidInit();
    31f8:	0e 94 34 12 	call	0x2468	; 0x2468 <SensorLM35_voidInit>

	App_u8CurrentTemp = SensorLM35_u16ReadTemp(LM35_PIN);
    31fc:	81 e1       	ldi	r24, 0x11	; 17
    31fe:	0e 94 3d 12 	call	0x247a	; 0x247a <SensorLM35_u16ReadTemp>
    3202:	80 93 7f 01 	sts	0x017F, r24
	for(u8 i = 0; i < 10; i++)
    3206:	1b a6       	std	Y+43, r1	; 0x2b
    3208:	0c c0       	rjmp	.+24     	; 0x3222 <App_SystemInit+0xe0>
	{
		App_u8TempAverage[i] = App_u8CurrentTemp;
    320a:	8b a5       	ldd	r24, Y+43	; 0x2b
    320c:	88 2f       	mov	r24, r24
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	20 91 7f 01 	lds	r18, 0x017F
    3214:	fc 01       	movw	r30, r24
    3216:	e0 58       	subi	r30, 0x80	; 128
    3218:	fe 4f       	sbci	r31, 0xFE	; 254
    321a:	20 83       	st	Z, r18
	App_TimerInit();
	DSSD_voidInit();
	SensorLM35_voidInit();

	App_u8CurrentTemp = SensorLM35_u16ReadTemp(LM35_PIN);
	for(u8 i = 0; i < 10; i++)
    321c:	8b a5       	ldd	r24, Y+43	; 0x2b
    321e:	8f 5f       	subi	r24, 0xFF	; 255
    3220:	8b a7       	std	Y+43, r24	; 0x2b
    3222:	8b a5       	ldd	r24, Y+43	; 0x2b
    3224:	8a 30       	cpi	r24, 0x0A	; 10
    3226:	88 f3       	brcs	.-30     	; 0x320a <App_SystemInit+0xc8>
	{
		App_u8TempAverage[i] = App_u8CurrentTemp;
	}

	Heater_voidInit(HEATER_RELAY_PIN);
    3228:	81 e2       	ldi	r24, 0x21	; 33
    322a:	0e 94 51 13 	call	0x26a2	; 0x26a2 <Heater_voidInit>
	LED_voidInit(LED_C_H);
    322e:	82 e2       	ldi	r24, 0x22	; 34
    3230:	0e 94 1a 13 	call	0x2634	; 0x2634 <LED_voidInit>
	Cooler_voidInit(COOLER_RELAY_PIN);
    3234:	83 e2       	ldi	r24, 0x23	; 35
    3236:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <Cooler_voidInit>
	EEPROM_voidInit();
    323a:	0e 94 79 13 	call	0x26f2	; 0x26f2 <EEPROM_voidInit>
    323e:	80 e0       	ldi	r24, 0x00	; 0
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	a0 e8       	ldi	r26, 0x80	; 128
    3244:	bf e3       	ldi	r27, 0x3F	; 63
    3246:	8f a3       	std	Y+39, r24	; 0x27
    3248:	98 a7       	std	Y+40, r25	; 0x28
    324a:	a9 a7       	std	Y+41, r26	; 0x29
    324c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    324e:	6f a1       	ldd	r22, Y+39	; 0x27
    3250:	78 a5       	ldd	r23, Y+40	; 0x28
    3252:	89 a5       	ldd	r24, Y+41	; 0x29
    3254:	9a a5       	ldd	r25, Y+42	; 0x2a
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	4a e7       	ldi	r20, 0x7A	; 122
    325c:	55 e4       	ldi	r21, 0x45	; 69
    325e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	8b a3       	std	Y+35, r24	; 0x23
    3268:	9c a3       	std	Y+36, r25	; 0x24
    326a:	ad a3       	std	Y+37, r26	; 0x25
    326c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    326e:	6b a1       	ldd	r22, Y+35	; 0x23
    3270:	7c a1       	ldd	r23, Y+36	; 0x24
    3272:	8d a1       	ldd	r24, Y+37	; 0x25
    3274:	9e a1       	ldd	r25, Y+38	; 0x26
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	40 e8       	ldi	r20, 0x80	; 128
    327c:	5f e3       	ldi	r21, 0x3F	; 63
    327e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3282:	88 23       	and	r24, r24
    3284:	2c f4       	brge	.+10     	; 0x3290 <App_SystemInit+0x14e>
		__ticks = 1;
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	9a a3       	std	Y+34, r25	; 0x22
    328c:	89 a3       	std	Y+33, r24	; 0x21
    328e:	3f c0       	rjmp	.+126    	; 0x330e <App_SystemInit+0x1cc>
	else if (__tmp > 65535)
    3290:	6b a1       	ldd	r22, Y+35	; 0x23
    3292:	7c a1       	ldd	r23, Y+36	; 0x24
    3294:	8d a1       	ldd	r24, Y+37	; 0x25
    3296:	9e a1       	ldd	r25, Y+38	; 0x26
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	3f ef       	ldi	r19, 0xFF	; 255
    329c:	4f e7       	ldi	r20, 0x7F	; 127
    329e:	57 e4       	ldi	r21, 0x47	; 71
    32a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32a4:	18 16       	cp	r1, r24
    32a6:	4c f5       	brge	.+82     	; 0x32fa <App_SystemInit+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a8:	6f a1       	ldd	r22, Y+39	; 0x27
    32aa:	78 a5       	ldd	r23, Y+40	; 0x28
    32ac:	89 a5       	ldd	r24, Y+41	; 0x29
    32ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	40 e2       	ldi	r20, 0x20	; 32
    32b6:	51 e4       	ldi	r21, 0x41	; 65
    32b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	bc 01       	movw	r22, r24
    32c2:	cd 01       	movw	r24, r26
    32c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	9a a3       	std	Y+34, r25	; 0x22
    32ce:	89 a3       	std	Y+33, r24	; 0x21
    32d0:	0f c0       	rjmp	.+30     	; 0x32f0 <App_SystemInit+0x1ae>
    32d2:	80 e9       	ldi	r24, 0x90	; 144
    32d4:	91 e0       	ldi	r25, 0x01	; 1
    32d6:	98 a3       	std	Y+32, r25	; 0x20
    32d8:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32dc:	98 a1       	ldd	r25, Y+32	; 0x20
    32de:	01 97       	sbiw	r24, 0x01	; 1
    32e0:	f1 f7       	brne	.-4      	; 0x32de <App_SystemInit+0x19c>
    32e2:	98 a3       	std	Y+32, r25	; 0x20
    32e4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e6:	89 a1       	ldd	r24, Y+33	; 0x21
    32e8:	9a a1       	ldd	r25, Y+34	; 0x22
    32ea:	01 97       	sbiw	r24, 0x01	; 1
    32ec:	9a a3       	std	Y+34, r25	; 0x22
    32ee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f0:	89 a1       	ldd	r24, Y+33	; 0x21
    32f2:	9a a1       	ldd	r25, Y+34	; 0x22
    32f4:	00 97       	sbiw	r24, 0x00	; 0
    32f6:	69 f7       	brne	.-38     	; 0x32d2 <App_SystemInit+0x190>
    32f8:	14 c0       	rjmp	.+40     	; 0x3322 <App_SystemInit+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32fa:	6b a1       	ldd	r22, Y+35	; 0x23
    32fc:	7c a1       	ldd	r23, Y+36	; 0x24
    32fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3300:	9e a1       	ldd	r25, Y+38	; 0x26
    3302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3306:	dc 01       	movw	r26, r24
    3308:	cb 01       	movw	r24, r22
    330a:	9a a3       	std	Y+34, r25	; 0x22
    330c:	89 a3       	std	Y+33, r24	; 0x21
    330e:	89 a1       	ldd	r24, Y+33	; 0x21
    3310:	9a a1       	ldd	r25, Y+34	; 0x22
    3312:	9e 8f       	std	Y+30, r25	; 0x1e
    3314:	8d 8f       	std	Y+29, r24	; 0x1d
    3316:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3318:	9e 8d       	ldd	r25, Y+30	; 0x1e
    331a:	01 97       	sbiw	r24, 0x01	; 1
    331c:	f1 f7       	brne	.-4      	; 0x331a <App_SystemInit+0x1d8>
    331e:	9e 8f       	std	Y+30, r25	; 0x1e
    3320:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	EEPROM_u8ReadByte(0, 0, &App_u8TempSetPoint);
    3322:	28 e6       	ldi	r18, 0x68	; 104
    3324:	31 e0       	ldi	r19, 0x01	; 1
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	60 e0       	ldi	r22, 0x00	; 0
    332a:	a9 01       	movw	r20, r18
    332c:	0e 94 bb 13 	call	0x2776	; 0x2776 <EEPROM_u8ReadByte>
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	a0 e8       	ldi	r26, 0x80	; 128
    3336:	bf e3       	ldi	r27, 0x3F	; 63
    3338:	89 8f       	std	Y+25, r24	; 0x19
    333a:	9a 8f       	std	Y+26, r25	; 0x1a
    333c:	ab 8f       	std	Y+27, r26	; 0x1b
    333e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3340:	69 8d       	ldd	r22, Y+25	; 0x19
    3342:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3344:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3346:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	4a e7       	ldi	r20, 0x7A	; 122
    334e:	55 e4       	ldi	r21, 0x45	; 69
    3350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	8d 8b       	std	Y+21, r24	; 0x15
    335a:	9e 8b       	std	Y+22, r25	; 0x16
    335c:	af 8b       	std	Y+23, r26	; 0x17
    335e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3360:	6d 89       	ldd	r22, Y+21	; 0x15
    3362:	7e 89       	ldd	r23, Y+22	; 0x16
    3364:	8f 89       	ldd	r24, Y+23	; 0x17
    3366:	98 8d       	ldd	r25, Y+24	; 0x18
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e8       	ldi	r20, 0x80	; 128
    336e:	5f e3       	ldi	r21, 0x3F	; 63
    3370:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3374:	88 23       	and	r24, r24
    3376:	2c f4       	brge	.+10     	; 0x3382 <App_SystemInit+0x240>
		__ticks = 1;
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	9c 8b       	std	Y+20, r25	; 0x14
    337e:	8b 8b       	std	Y+19, r24	; 0x13
    3380:	3f c0       	rjmp	.+126    	; 0x3400 <App_SystemInit+0x2be>
	else if (__tmp > 65535)
    3382:	6d 89       	ldd	r22, Y+21	; 0x15
    3384:	7e 89       	ldd	r23, Y+22	; 0x16
    3386:	8f 89       	ldd	r24, Y+23	; 0x17
    3388:	98 8d       	ldd	r25, Y+24	; 0x18
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	3f ef       	ldi	r19, 0xFF	; 255
    338e:	4f e7       	ldi	r20, 0x7F	; 127
    3390:	57 e4       	ldi	r21, 0x47	; 71
    3392:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3396:	18 16       	cp	r1, r24
    3398:	4c f5       	brge	.+82     	; 0x33ec <App_SystemInit+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339a:	69 8d       	ldd	r22, Y+25	; 0x19
    339c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    339e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	40 e2       	ldi	r20, 0x20	; 32
    33a8:	51 e4       	ldi	r21, 0x41	; 65
    33aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	bc 01       	movw	r22, r24
    33b4:	cd 01       	movw	r24, r26
    33b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ba:	dc 01       	movw	r26, r24
    33bc:	cb 01       	movw	r24, r22
    33be:	9c 8b       	std	Y+20, r25	; 0x14
    33c0:	8b 8b       	std	Y+19, r24	; 0x13
    33c2:	0f c0       	rjmp	.+30     	; 0x33e2 <App_SystemInit+0x2a0>
    33c4:	80 e9       	ldi	r24, 0x90	; 144
    33c6:	91 e0       	ldi	r25, 0x01	; 1
    33c8:	9a 8b       	std	Y+18, r25	; 0x12
    33ca:	89 8b       	std	Y+17, r24	; 0x11
    33cc:	89 89       	ldd	r24, Y+17	; 0x11
    33ce:	9a 89       	ldd	r25, Y+18	; 0x12
    33d0:	01 97       	sbiw	r24, 0x01	; 1
    33d2:	f1 f7       	brne	.-4      	; 0x33d0 <App_SystemInit+0x28e>
    33d4:	9a 8b       	std	Y+18, r25	; 0x12
    33d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d8:	8b 89       	ldd	r24, Y+19	; 0x13
    33da:	9c 89       	ldd	r25, Y+20	; 0x14
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	9c 8b       	std	Y+20, r25	; 0x14
    33e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e2:	8b 89       	ldd	r24, Y+19	; 0x13
    33e4:	9c 89       	ldd	r25, Y+20	; 0x14
    33e6:	00 97       	sbiw	r24, 0x00	; 0
    33e8:	69 f7       	brne	.-38     	; 0x33c4 <App_SystemInit+0x282>
    33ea:	14 c0       	rjmp	.+40     	; 0x3414 <App_SystemInit+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ec:	6d 89       	ldd	r22, Y+21	; 0x15
    33ee:	7e 89       	ldd	r23, Y+22	; 0x16
    33f0:	8f 89       	ldd	r24, Y+23	; 0x17
    33f2:	98 8d       	ldd	r25, Y+24	; 0x18
    33f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	9c 8b       	std	Y+20, r25	; 0x14
    33fe:	8b 8b       	std	Y+19, r24	; 0x13
    3400:	8b 89       	ldd	r24, Y+19	; 0x13
    3402:	9c 89       	ldd	r25, Y+20	; 0x14
    3404:	98 8b       	std	Y+16, r25	; 0x10
    3406:	8f 87       	std	Y+15, r24	; 0x0f
    3408:	8f 85       	ldd	r24, Y+15	; 0x0f
    340a:	98 89       	ldd	r25, Y+16	; 0x10
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	f1 f7       	brne	.-4      	; 0x340c <App_SystemInit+0x2ca>
    3410:	98 8b       	std	Y+16, r25	; 0x10
    3412:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	if(App_u8TempSetPoint == 255)
    3414:	80 91 68 01 	lds	r24, 0x0168
    3418:	8f 3f       	cpi	r24, 0xFF	; 255
    341a:	09 f0       	breq	.+2      	; 0x341e <App_SystemInit+0x2dc>
    341c:	7a c0       	rjmp	.+244    	; 0x3512 <App_SystemInit+0x3d0>
	{
		App_u8TempSetPoint = TEMP_INITIAL_SET_POINT;
    341e:	8c e3       	ldi	r24, 0x3C	; 60
    3420:	80 93 68 01 	sts	0x0168, r24
		EEPROM_voidWriteByte(TEMP_INITIAL_SET_POINT, 0, 0);
    3424:	8c e3       	ldi	r24, 0x3C	; 60
    3426:	60 e0       	ldi	r22, 0x00	; 0
    3428:	40 e0       	ldi	r20, 0x00	; 0
    342a:	0e 94 82 13 	call	0x2704	; 0x2704 <EEPROM_voidWriteByte>
    342e:	80 e0       	ldi	r24, 0x00	; 0
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	a0 e8       	ldi	r26, 0x80	; 128
    3434:	bf e3       	ldi	r27, 0x3F	; 63
    3436:	8b 87       	std	Y+11, r24	; 0x0b
    3438:	9c 87       	std	Y+12, r25	; 0x0c
    343a:	ad 87       	std	Y+13, r26	; 0x0d
    343c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    343e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3440:	7c 85       	ldd	r23, Y+12	; 0x0c
    3442:	8d 85       	ldd	r24, Y+13	; 0x0d
    3444:	9e 85       	ldd	r25, Y+14	; 0x0e
    3446:	20 e0       	ldi	r18, 0x00	; 0
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	4a e7       	ldi	r20, 0x7A	; 122
    344c:	55 e4       	ldi	r21, 0x45	; 69
    344e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	8f 83       	std	Y+7, r24	; 0x07
    3458:	98 87       	std	Y+8, r25	; 0x08
    345a:	a9 87       	std	Y+9, r26	; 0x09
    345c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    345e:	6f 81       	ldd	r22, Y+7	; 0x07
    3460:	78 85       	ldd	r23, Y+8	; 0x08
    3462:	89 85       	ldd	r24, Y+9	; 0x09
    3464:	9a 85       	ldd	r25, Y+10	; 0x0a
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	40 e8       	ldi	r20, 0x80	; 128
    346c:	5f e3       	ldi	r21, 0x3F	; 63
    346e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3472:	88 23       	and	r24, r24
    3474:	2c f4       	brge	.+10     	; 0x3480 <App_SystemInit+0x33e>
		__ticks = 1;
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	9e 83       	std	Y+6, r25	; 0x06
    347c:	8d 83       	std	Y+5, r24	; 0x05
    347e:	3f c0       	rjmp	.+126    	; 0x34fe <App_SystemInit+0x3bc>
	else if (__tmp > 65535)
    3480:	6f 81       	ldd	r22, Y+7	; 0x07
    3482:	78 85       	ldd	r23, Y+8	; 0x08
    3484:	89 85       	ldd	r24, Y+9	; 0x09
    3486:	9a 85       	ldd	r25, Y+10	; 0x0a
    3488:	20 e0       	ldi	r18, 0x00	; 0
    348a:	3f ef       	ldi	r19, 0xFF	; 255
    348c:	4f e7       	ldi	r20, 0x7F	; 127
    348e:	57 e4       	ldi	r21, 0x47	; 71
    3490:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3494:	18 16       	cp	r1, r24
    3496:	4c f5       	brge	.+82     	; 0x34ea <App_SystemInit+0x3a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3498:	6b 85       	ldd	r22, Y+11	; 0x0b
    349a:	7c 85       	ldd	r23, Y+12	; 0x0c
    349c:	8d 85       	ldd	r24, Y+13	; 0x0d
    349e:	9e 85       	ldd	r25, Y+14	; 0x0e
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	40 e2       	ldi	r20, 0x20	; 32
    34a6:	51 e4       	ldi	r21, 0x41	; 65
    34a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ac:	dc 01       	movw	r26, r24
    34ae:	cb 01       	movw	r24, r22
    34b0:	bc 01       	movw	r22, r24
    34b2:	cd 01       	movw	r24, r26
    34b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	9e 83       	std	Y+6, r25	; 0x06
    34be:	8d 83       	std	Y+5, r24	; 0x05
    34c0:	0f c0       	rjmp	.+30     	; 0x34e0 <App_SystemInit+0x39e>
    34c2:	80 e9       	ldi	r24, 0x90	; 144
    34c4:	91 e0       	ldi	r25, 0x01	; 1
    34c6:	9c 83       	std	Y+4, r25	; 0x04
    34c8:	8b 83       	std	Y+3, r24	; 0x03
    34ca:	8b 81       	ldd	r24, Y+3	; 0x03
    34cc:	9c 81       	ldd	r25, Y+4	; 0x04
    34ce:	01 97       	sbiw	r24, 0x01	; 1
    34d0:	f1 f7       	brne	.-4      	; 0x34ce <App_SystemInit+0x38c>
    34d2:	9c 83       	std	Y+4, r25	; 0x04
    34d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34d6:	8d 81       	ldd	r24, Y+5	; 0x05
    34d8:	9e 81       	ldd	r25, Y+6	; 0x06
    34da:	01 97       	sbiw	r24, 0x01	; 1
    34dc:	9e 83       	std	Y+6, r25	; 0x06
    34de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34e0:	8d 81       	ldd	r24, Y+5	; 0x05
    34e2:	9e 81       	ldd	r25, Y+6	; 0x06
    34e4:	00 97       	sbiw	r24, 0x00	; 0
    34e6:	69 f7       	brne	.-38     	; 0x34c2 <App_SystemInit+0x380>
    34e8:	14 c0       	rjmp	.+40     	; 0x3512 <App_SystemInit+0x3d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ea:	6f 81       	ldd	r22, Y+7	; 0x07
    34ec:	78 85       	ldd	r23, Y+8	; 0x08
    34ee:	89 85       	ldd	r24, Y+9	; 0x09
    34f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	9e 83       	std	Y+6, r25	; 0x06
    34fc:	8d 83       	std	Y+5, r24	; 0x05
    34fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3500:	9e 81       	ldd	r25, Y+6	; 0x06
    3502:	9a 83       	std	Y+2, r25	; 0x02
    3504:	89 83       	std	Y+1, r24	; 0x01
    3506:	89 81       	ldd	r24, Y+1	; 0x01
    3508:	9a 81       	ldd	r25, Y+2	; 0x02
    350a:	01 97       	sbiw	r24, 0x01	; 1
    350c:	f1 f7       	brne	.-4      	; 0x350a <App_SystemInit+0x3c8>
    350e:	9a 83       	std	Y+2, r25	; 0x02
    3510:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
}
    3512:	ab 96       	adiw	r28, 0x2b	; 43
    3514:	0f b6       	in	r0, 0x3f	; 63
    3516:	f8 94       	cli
    3518:	de bf       	out	0x3e, r29	; 62
    351a:	0f be       	out	0x3f, r0	; 63
    351c:	cd bf       	out	0x3d, r28	; 61
    351e:	cf 91       	pop	r28
    3520:	df 91       	pop	r29
    3522:	08 95       	ret

00003524 <App_SetOnOffBtnHandler>:

/*=====================================================================================================================================*/

void App_SetOnOffBtnHandler(void (*onOffBtnCallBack) (void))
{
    3524:	df 93       	push	r29
    3526:	cf 93       	push	r28
    3528:	00 d0       	rcall	.+0      	; 0x352a <App_SetOnOffBtnHandler+0x6>
    352a:	cd b7       	in	r28, 0x3d	; 61
    352c:	de b7       	in	r29, 0x3e	; 62
    352e:	9a 83       	std	Y+2, r25	; 0x02
    3530:	89 83       	std	Y+1, r24	; 0x01
	if(onOffBtnCallBack != NULL) App_ptrOnOffBtnHandler = onOffBtnCallBack;
    3532:	89 81       	ldd	r24, Y+1	; 0x01
    3534:	9a 81       	ldd	r25, Y+2	; 0x02
    3536:	00 97       	sbiw	r24, 0x00	; 0
    3538:	31 f0       	breq	.+12     	; 0x3546 <App_SetOnOffBtnHandler+0x22>
    353a:	89 81       	ldd	r24, Y+1	; 0x01
    353c:	9a 81       	ldd	r25, Y+2	; 0x02
    353e:	90 93 93 01 	sts	0x0193, r25
    3542:	80 93 92 01 	sts	0x0192, r24
}
    3546:	0f 90       	pop	r0
    3548:	0f 90       	pop	r0
    354a:	cf 91       	pop	r28
    354c:	df 91       	pop	r29
    354e:	08 95       	ret

00003550 <App_SetUpBtnHandler>:

/*=====================================================================================================================================*/

void App_SetUpBtnHandler(void (*upBtnCallBack) (void))
{
    3550:	df 93       	push	r29
    3552:	cf 93       	push	r28
    3554:	00 d0       	rcall	.+0      	; 0x3556 <App_SetUpBtnHandler+0x6>
    3556:	cd b7       	in	r28, 0x3d	; 61
    3558:	de b7       	in	r29, 0x3e	; 62
    355a:	9a 83       	std	Y+2, r25	; 0x02
    355c:	89 83       	std	Y+1, r24	; 0x01
	if(upBtnCallBack != NULL) App_ptrUpBtnHandler = upBtnCallBack;
    355e:	89 81       	ldd	r24, Y+1	; 0x01
    3560:	9a 81       	ldd	r25, Y+2	; 0x02
    3562:	00 97       	sbiw	r24, 0x00	; 0
    3564:	31 f0       	breq	.+12     	; 0x3572 <App_SetUpBtnHandler+0x22>
    3566:	89 81       	ldd	r24, Y+1	; 0x01
    3568:	9a 81       	ldd	r25, Y+2	; 0x02
    356a:	90 93 95 01 	sts	0x0195, r25
    356e:	80 93 94 01 	sts	0x0194, r24
}
    3572:	0f 90       	pop	r0
    3574:	0f 90       	pop	r0
    3576:	cf 91       	pop	r28
    3578:	df 91       	pop	r29
    357a:	08 95       	ret

0000357c <App_SetDownBtnHandler>:

/*=====================================================================================================================================*/

void App_SetDownBtnHandler(void (*downBtnCallBack) (void))
{
    357c:	df 93       	push	r29
    357e:	cf 93       	push	r28
    3580:	00 d0       	rcall	.+0      	; 0x3582 <App_SetDownBtnHandler+0x6>
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62
    3586:	9a 83       	std	Y+2, r25	; 0x02
    3588:	89 83       	std	Y+1, r24	; 0x01
	if(downBtnCallBack != NULL) App_ptrDownBtnHandler = downBtnCallBack;
    358a:	89 81       	ldd	r24, Y+1	; 0x01
    358c:	9a 81       	ldd	r25, Y+2	; 0x02
    358e:	00 97       	sbiw	r24, 0x00	; 0
    3590:	31 f0       	breq	.+12     	; 0x359e <App_SetDownBtnHandler+0x22>
    3592:	89 81       	ldd	r24, Y+1	; 0x01
    3594:	9a 81       	ldd	r25, Y+2	; 0x02
    3596:	90 93 97 01 	sts	0x0197, r25
    359a:	80 93 96 01 	sts	0x0196, r24
}
    359e:	0f 90       	pop	r0
    35a0:	0f 90       	pop	r0
    35a2:	cf 91       	pop	r28
    35a4:	df 91       	pop	r29
    35a6:	08 95       	ret

000035a8 <App_SetTimerHandler>:

/*=====================================================================================================================================*/

void App_SetTimerHandler(void (*timerCallBack) (void))
{
    35a8:	df 93       	push	r29
    35aa:	cf 93       	push	r28
    35ac:	00 d0       	rcall	.+0      	; 0x35ae <App_SetTimerHandler+0x6>
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
    35b2:	9a 83       	std	Y+2, r25	; 0x02
    35b4:	89 83       	std	Y+1, r24	; 0x01
	if(timerCallBack != NULL) App_ptrTimerHandler = timerCallBack;
    35b6:	89 81       	ldd	r24, Y+1	; 0x01
    35b8:	9a 81       	ldd	r25, Y+2	; 0x02
    35ba:	00 97       	sbiw	r24, 0x00	; 0
    35bc:	31 f0       	breq	.+12     	; 0x35ca <App_SetTimerHandler+0x22>
    35be:	89 81       	ldd	r24, Y+1	; 0x01
    35c0:	9a 81       	ldd	r25, Y+2	; 0x02
    35c2:	90 93 99 01 	sts	0x0199, r25
    35c6:	80 93 98 01 	sts	0x0198, r24
}
    35ca:	0f 90       	pop	r0
    35cc:	0f 90       	pop	r0
    35ce:	cf 91       	pop	r28
    35d0:	df 91       	pop	r29
    35d2:	08 95       	ret

000035d4 <main>:
#include "Drivers/LIB/StdTypes.h"
#include "App.h"


int main()
{
    35d4:	df 93       	push	r29
    35d6:	cf 93       	push	r28
    35d8:	cd b7       	in	r28, 0x3d	; 61
    35da:	de b7       	in	r29, 0x3e	; 62
	/// setting handlers
	App_SetOnOffBtnHandler(NULL);
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	0e 94 92 1a 	call	0x3524	; 0x3524 <App_SetOnOffBtnHandler>
	App_SetUpBtnHandler(NULL);
    35e4:	80 e0       	ldi	r24, 0x00	; 0
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	0e 94 a8 1a 	call	0x3550	; 0x3550 <App_SetUpBtnHandler>
	App_SetDownBtnHandler(NULL);
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	0e 94 be 1a 	call	0x357c	; 0x357c <App_SetDownBtnHandler>
	App_SetTimerHandler(NULL);
    35f4:	80 e0       	ldi	r24, 0x00	; 0
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <App_SetTimerHandler>


	/// System Initialise
	App_SystemInit();
    35fc:	0e 94 a1 18 	call	0x3142	; 0x3142 <App_SystemInit>
    3600:	ff cf       	rjmp	.-2      	; 0x3600 <main+0x2c>

00003602 <__mulsi3>:
    3602:	62 9f       	mul	r22, r18
    3604:	d0 01       	movw	r26, r0
    3606:	73 9f       	mul	r23, r19
    3608:	f0 01       	movw	r30, r0
    360a:	82 9f       	mul	r24, r18
    360c:	e0 0d       	add	r30, r0
    360e:	f1 1d       	adc	r31, r1
    3610:	64 9f       	mul	r22, r20
    3612:	e0 0d       	add	r30, r0
    3614:	f1 1d       	adc	r31, r1
    3616:	92 9f       	mul	r25, r18
    3618:	f0 0d       	add	r31, r0
    361a:	83 9f       	mul	r24, r19
    361c:	f0 0d       	add	r31, r0
    361e:	74 9f       	mul	r23, r20
    3620:	f0 0d       	add	r31, r0
    3622:	65 9f       	mul	r22, r21
    3624:	f0 0d       	add	r31, r0
    3626:	99 27       	eor	r25, r25
    3628:	72 9f       	mul	r23, r18
    362a:	b0 0d       	add	r27, r0
    362c:	e1 1d       	adc	r30, r1
    362e:	f9 1f       	adc	r31, r25
    3630:	63 9f       	mul	r22, r19
    3632:	b0 0d       	add	r27, r0
    3634:	e1 1d       	adc	r30, r1
    3636:	f9 1f       	adc	r31, r25
    3638:	bd 01       	movw	r22, r26
    363a:	cf 01       	movw	r24, r30
    363c:	11 24       	eor	r1, r1
    363e:	08 95       	ret

00003640 <__udivmodqi4>:
    3640:	99 1b       	sub	r25, r25
    3642:	79 e0       	ldi	r23, 0x09	; 9
    3644:	04 c0       	rjmp	.+8      	; 0x364e <__udivmodqi4_ep>

00003646 <__udivmodqi4_loop>:
    3646:	99 1f       	adc	r25, r25
    3648:	96 17       	cp	r25, r22
    364a:	08 f0       	brcs	.+2      	; 0x364e <__udivmodqi4_ep>
    364c:	96 1b       	sub	r25, r22

0000364e <__udivmodqi4_ep>:
    364e:	88 1f       	adc	r24, r24
    3650:	7a 95       	dec	r23
    3652:	c9 f7       	brne	.-14     	; 0x3646 <__udivmodqi4_loop>
    3654:	80 95       	com	r24
    3656:	08 95       	ret

00003658 <__udivmodhi4>:
    3658:	aa 1b       	sub	r26, r26
    365a:	bb 1b       	sub	r27, r27
    365c:	51 e1       	ldi	r21, 0x11	; 17
    365e:	07 c0       	rjmp	.+14     	; 0x366e <__udivmodhi4_ep>

00003660 <__udivmodhi4_loop>:
    3660:	aa 1f       	adc	r26, r26
    3662:	bb 1f       	adc	r27, r27
    3664:	a6 17       	cp	r26, r22
    3666:	b7 07       	cpc	r27, r23
    3668:	10 f0       	brcs	.+4      	; 0x366e <__udivmodhi4_ep>
    366a:	a6 1b       	sub	r26, r22
    366c:	b7 0b       	sbc	r27, r23

0000366e <__udivmodhi4_ep>:
    366e:	88 1f       	adc	r24, r24
    3670:	99 1f       	adc	r25, r25
    3672:	5a 95       	dec	r21
    3674:	a9 f7       	brne	.-22     	; 0x3660 <__udivmodhi4_loop>
    3676:	80 95       	com	r24
    3678:	90 95       	com	r25
    367a:	bc 01       	movw	r22, r24
    367c:	cd 01       	movw	r24, r26
    367e:	08 95       	ret

00003680 <__udivmodsi4>:
    3680:	a1 e2       	ldi	r26, 0x21	; 33
    3682:	1a 2e       	mov	r1, r26
    3684:	aa 1b       	sub	r26, r26
    3686:	bb 1b       	sub	r27, r27
    3688:	fd 01       	movw	r30, r26
    368a:	0d c0       	rjmp	.+26     	; 0x36a6 <__udivmodsi4_ep>

0000368c <__udivmodsi4_loop>:
    368c:	aa 1f       	adc	r26, r26
    368e:	bb 1f       	adc	r27, r27
    3690:	ee 1f       	adc	r30, r30
    3692:	ff 1f       	adc	r31, r31
    3694:	a2 17       	cp	r26, r18
    3696:	b3 07       	cpc	r27, r19
    3698:	e4 07       	cpc	r30, r20
    369a:	f5 07       	cpc	r31, r21
    369c:	20 f0       	brcs	.+8      	; 0x36a6 <__udivmodsi4_ep>
    369e:	a2 1b       	sub	r26, r18
    36a0:	b3 0b       	sbc	r27, r19
    36a2:	e4 0b       	sbc	r30, r20
    36a4:	f5 0b       	sbc	r31, r21

000036a6 <__udivmodsi4_ep>:
    36a6:	66 1f       	adc	r22, r22
    36a8:	77 1f       	adc	r23, r23
    36aa:	88 1f       	adc	r24, r24
    36ac:	99 1f       	adc	r25, r25
    36ae:	1a 94       	dec	r1
    36b0:	69 f7       	brne	.-38     	; 0x368c <__udivmodsi4_loop>
    36b2:	60 95       	com	r22
    36b4:	70 95       	com	r23
    36b6:	80 95       	com	r24
    36b8:	90 95       	com	r25
    36ba:	9b 01       	movw	r18, r22
    36bc:	ac 01       	movw	r20, r24
    36be:	bd 01       	movw	r22, r26
    36c0:	cf 01       	movw	r24, r30
    36c2:	08 95       	ret

000036c4 <__prologue_saves__>:
    36c4:	2f 92       	push	r2
    36c6:	3f 92       	push	r3
    36c8:	4f 92       	push	r4
    36ca:	5f 92       	push	r5
    36cc:	6f 92       	push	r6
    36ce:	7f 92       	push	r7
    36d0:	8f 92       	push	r8
    36d2:	9f 92       	push	r9
    36d4:	af 92       	push	r10
    36d6:	bf 92       	push	r11
    36d8:	cf 92       	push	r12
    36da:	df 92       	push	r13
    36dc:	ef 92       	push	r14
    36de:	ff 92       	push	r15
    36e0:	0f 93       	push	r16
    36e2:	1f 93       	push	r17
    36e4:	cf 93       	push	r28
    36e6:	df 93       	push	r29
    36e8:	cd b7       	in	r28, 0x3d	; 61
    36ea:	de b7       	in	r29, 0x3e	; 62
    36ec:	ca 1b       	sub	r28, r26
    36ee:	db 0b       	sbc	r29, r27
    36f0:	0f b6       	in	r0, 0x3f	; 63
    36f2:	f8 94       	cli
    36f4:	de bf       	out	0x3e, r29	; 62
    36f6:	0f be       	out	0x3f, r0	; 63
    36f8:	cd bf       	out	0x3d, r28	; 61
    36fa:	09 94       	ijmp

000036fc <__epilogue_restores__>:
    36fc:	2a 88       	ldd	r2, Y+18	; 0x12
    36fe:	39 88       	ldd	r3, Y+17	; 0x11
    3700:	48 88       	ldd	r4, Y+16	; 0x10
    3702:	5f 84       	ldd	r5, Y+15	; 0x0f
    3704:	6e 84       	ldd	r6, Y+14	; 0x0e
    3706:	7d 84       	ldd	r7, Y+13	; 0x0d
    3708:	8c 84       	ldd	r8, Y+12	; 0x0c
    370a:	9b 84       	ldd	r9, Y+11	; 0x0b
    370c:	aa 84       	ldd	r10, Y+10	; 0x0a
    370e:	b9 84       	ldd	r11, Y+9	; 0x09
    3710:	c8 84       	ldd	r12, Y+8	; 0x08
    3712:	df 80       	ldd	r13, Y+7	; 0x07
    3714:	ee 80       	ldd	r14, Y+6	; 0x06
    3716:	fd 80       	ldd	r15, Y+5	; 0x05
    3718:	0c 81       	ldd	r16, Y+4	; 0x04
    371a:	1b 81       	ldd	r17, Y+3	; 0x03
    371c:	aa 81       	ldd	r26, Y+2	; 0x02
    371e:	b9 81       	ldd	r27, Y+1	; 0x01
    3720:	ce 0f       	add	r28, r30
    3722:	d1 1d       	adc	r29, r1
    3724:	0f b6       	in	r0, 0x3f	; 63
    3726:	f8 94       	cli
    3728:	de bf       	out	0x3e, r29	; 62
    372a:	0f be       	out	0x3f, r0	; 63
    372c:	cd bf       	out	0x3d, r28	; 61
    372e:	ed 01       	movw	r28, r26
    3730:	08 95       	ret

00003732 <_exit>:
    3732:	f8 94       	cli

00003734 <__stop_program>:
    3734:	ff cf       	rjmp	.-2      	; 0x3734 <__stop_program>
