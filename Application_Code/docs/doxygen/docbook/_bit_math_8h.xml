<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__bit_math_8h" xml:lang="en-US">
<title>Drivers/LIB/BitMath.h File Reference</title>
<indexterm><primary>Drivers/LIB/BitMath.h</primary></indexterm>
<para>

<para>this file contains macros function for bits operation </para>
 
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="_bit_math_8h__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="__bit_math_8h_1a3fe3d800c392314d1ac462850a0a31c2">WRT_BIT</link>(REG,  BIT_INDEX,  VAL)&#160;&#160;&#160;REG = ((REG &amp; (~(1 &lt;&lt; BIT_INDEX))) | (VAL &lt;&lt; BIT_INDEX))</para>
</listitem>
            <listitem><para>#define <link linkend="__bit_math_8h_1af36f56f96b3583a54e94312eed6cbdb6">WRT_2BITS</link>(REG,  LS_BIT_INDEX,  VAL)&#160;&#160;&#160;REG = (REG &amp; (~(0b11 &lt;&lt; LS_BIT_INDEX))) | (VAL &lt;&lt; LS_BIT_INDEX)</para>
</listitem>
            <listitem><para>#define <link linkend="__bit_math_8h_1ad67124dc912813146469f8ffbf3fe0c1">WRT_3BITS</link>(REG,  LS_BIT_INDEX,  VAL)&#160;&#160;&#160;REG = (REG &amp; (~(0b111 &lt;&lt; LS_BIT_INDEX))) | (VAL &lt;&lt; LS_BIT_INDEX)</para>
</listitem>
            <listitem><para>#define <link linkend="__bit_math_8h_1a3940d7b433902ea8dbab38cc9a52ad5d">WRT_4BITS</link>(REG,  LS_BIT_INDEX,  VAL)&#160;&#160;&#160;REG = (REG &amp; (~(0b1111 &lt;&lt; LS_BIT_INDEX))) | (VAL &lt;&lt; LS_BIT_INDEX)</para>
</listitem>
            <listitem><para>#define <link linkend="__bit_math_8h_1ad7423a369d6ffecfc5f62289da2395a1">WRT_5BITS</link>(REG,  LS_BIT_INDEX,  VAL)&#160;&#160;&#160;REG = (REG &amp; (~(0b11111 &lt;&lt; LS_BIT_INDEX))) | (VAL &lt;&lt; LS_BIT_INDEX)</para>
</listitem>
            <listitem><para>#define <link linkend="__bit_math_8h_1aa10b9df3f1eac8aca5727b341995ce58">WRT_16BITS</link>(REG,  LS_BIT_INDEX,  VAL)&#160;&#160;&#160;REG = (REG &amp; (~(0xffff &lt;&lt; LS_BIT_INDEX))) | (VAL &lt;&lt; LS_BIT_INDEX)</para>
</listitem>
            <listitem><para>#define <link linkend="__bit_math_8h_1afb040b528e59ae2b1307b962585f47df">SET_BIT</link>(REG,  BIT_INDEX)&#160;&#160;&#160;REG |= (1 &lt;&lt; BIT_INDEX)</para>
</listitem>
            <listitem><para>#define <link linkend="__bit_math_8h_1a473a90490439c436f81d624df36806e8">CLR_BIT</link>(REG,  BIT_INDEX)&#160;&#160;&#160;REG &amp;= (~(1 &lt;&lt; BIT_INDEX))</para>
</listitem>
            <listitem><para>#define <link linkend="__bit_math_8h_1a62aaa2f9cd405d334dad8162aef803d0">TOG_BIT</link>(REG,  BIT_INDEX)&#160;&#160;&#160;REG ^= (1 &lt;&lt; BIT_INDEX)</para>
</listitem>
            <listitem><para>#define <link linkend="__bit_math_8h_1af70295712094efe839b7df0c7dd29b84">GET_BIT</link>(REG,  BIT_INDEX)&#160;&#160;&#160;((REG &gt;&gt; BIT_INDEX) &amp; 1)</para>
</listitem>
            <listitem><para>#define <link linkend="__bit_math_8h_1af6c6c77523a6cbbb8e1bfc7156ddb49f">GET_3BITS</link>(REG,  BIT_INDEX)&#160;&#160;&#160;((REG &gt;&gt; BIT_INDEX) &amp; 0b111)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>this file contains macros function for bits operation </para>

<para><formalpara><title>Author</title>

<para>Mustafa M.Montaser </para>
</formalpara>
<formalpara><title>Version</title>

<para>v1.0.0 </para>
</formalpara>
<formalpara><title>Date</title>

<para>17-Feb-2023 </para>
</formalpara>
</para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="__bit_math_8h_1a473a90490439c436f81d624df36806e8"/><section>
    <title>CLR_BIT</title>
<indexterm><primary>CLR_BIT</primary><secondary>BitMath.h</secondary></indexterm>
<indexterm><primary>BitMath.h</primary><secondary>CLR_BIT</secondary></indexterm>
<para><computeroutput>#define CLR_BIT( REG,  BIT_INDEX)&#160;&#160;&#160;REG &amp;= (~(1 &lt;&lt; BIT_INDEX))</computeroutput></para></section>
<anchor xml:id="__bit_math_8h_1af6c6c77523a6cbbb8e1bfc7156ddb49f"/><section>
    <title>GET_3BITS</title>
<indexterm><primary>GET_3BITS</primary><secondary>BitMath.h</secondary></indexterm>
<indexterm><primary>BitMath.h</primary><secondary>GET_3BITS</secondary></indexterm>
<para><computeroutput>#define GET_3BITS( REG,  BIT_INDEX)&#160;&#160;&#160;((REG &gt;&gt; BIT_INDEX) &amp; 0b111)</computeroutput></para></section>
<anchor xml:id="__bit_math_8h_1af70295712094efe839b7df0c7dd29b84"/><section>
    <title>GET_BIT</title>
<indexterm><primary>GET_BIT</primary><secondary>BitMath.h</secondary></indexterm>
<indexterm><primary>BitMath.h</primary><secondary>GET_BIT</secondary></indexterm>
<para><computeroutput>#define GET_BIT( REG,  BIT_INDEX)&#160;&#160;&#160;((REG &gt;&gt; BIT_INDEX) &amp; 1)</computeroutput></para></section>
<anchor xml:id="__bit_math_8h_1afb040b528e59ae2b1307b962585f47df"/><section>
    <title>SET_BIT</title>
<indexterm><primary>SET_BIT</primary><secondary>BitMath.h</secondary></indexterm>
<indexterm><primary>BitMath.h</primary><secondary>SET_BIT</secondary></indexterm>
<para><computeroutput>#define SET_BIT( REG,  BIT_INDEX)&#160;&#160;&#160;REG |= (1 &lt;&lt; BIT_INDEX)</computeroutput></para></section>
<anchor xml:id="__bit_math_8h_1a62aaa2f9cd405d334dad8162aef803d0"/><section>
    <title>TOG_BIT</title>
<indexterm><primary>TOG_BIT</primary><secondary>BitMath.h</secondary></indexterm>
<indexterm><primary>BitMath.h</primary><secondary>TOG_BIT</secondary></indexterm>
<para><computeroutput>#define TOG_BIT( REG,  BIT_INDEX)&#160;&#160;&#160;REG ^= (1 &lt;&lt; BIT_INDEX)</computeroutput></para></section>
<anchor xml:id="__bit_math_8h_1aa10b9df3f1eac8aca5727b341995ce58"/><section>
    <title>WRT_16BITS</title>
<indexterm><primary>WRT_16BITS</primary><secondary>BitMath.h</secondary></indexterm>
<indexterm><primary>BitMath.h</primary><secondary>WRT_16BITS</secondary></indexterm>
<para><computeroutput>#define WRT_16BITS( REG,  LS_BIT_INDEX,  VAL)&#160;&#160;&#160;REG = (REG &amp; (~(0xffff &lt;&lt; LS_BIT_INDEX))) | (VAL &lt;&lt; LS_BIT_INDEX)</computeroutput></para></section>
<anchor xml:id="__bit_math_8h_1af36f56f96b3583a54e94312eed6cbdb6"/><section>
    <title>WRT_2BITS</title>
<indexterm><primary>WRT_2BITS</primary><secondary>BitMath.h</secondary></indexterm>
<indexterm><primary>BitMath.h</primary><secondary>WRT_2BITS</secondary></indexterm>
<para><computeroutput>#define WRT_2BITS( REG,  LS_BIT_INDEX,  VAL)&#160;&#160;&#160;REG = (REG &amp; (~(0b11 &lt;&lt; LS_BIT_INDEX))) | (VAL &lt;&lt; LS_BIT_INDEX)</computeroutput></para></section>
<anchor xml:id="__bit_math_8h_1ad67124dc912813146469f8ffbf3fe0c1"/><section>
    <title>WRT_3BITS</title>
<indexterm><primary>WRT_3BITS</primary><secondary>BitMath.h</secondary></indexterm>
<indexterm><primary>BitMath.h</primary><secondary>WRT_3BITS</secondary></indexterm>
<para><computeroutput>#define WRT_3BITS( REG,  LS_BIT_INDEX,  VAL)&#160;&#160;&#160;REG = (REG &amp; (~(0b111 &lt;&lt; LS_BIT_INDEX))) | (VAL &lt;&lt; LS_BIT_INDEX)</computeroutput></para></section>
<anchor xml:id="__bit_math_8h_1a3940d7b433902ea8dbab38cc9a52ad5d"/><section>
    <title>WRT_4BITS</title>
<indexterm><primary>WRT_4BITS</primary><secondary>BitMath.h</secondary></indexterm>
<indexterm><primary>BitMath.h</primary><secondary>WRT_4BITS</secondary></indexterm>
<para><computeroutput>#define WRT_4BITS( REG,  LS_BIT_INDEX,  VAL)&#160;&#160;&#160;REG = (REG &amp; (~(0b1111 &lt;&lt; LS_BIT_INDEX))) | (VAL &lt;&lt; LS_BIT_INDEX)</computeroutput></para></section>
<anchor xml:id="__bit_math_8h_1ad7423a369d6ffecfc5f62289da2395a1"/><section>
    <title>WRT_5BITS</title>
<indexterm><primary>WRT_5BITS</primary><secondary>BitMath.h</secondary></indexterm>
<indexterm><primary>BitMath.h</primary><secondary>WRT_5BITS</secondary></indexterm>
<para><computeroutput>#define WRT_5BITS( REG,  LS_BIT_INDEX,  VAL)&#160;&#160;&#160;REG = (REG &amp; (~(0b11111 &lt;&lt; LS_BIT_INDEX))) | (VAL &lt;&lt; LS_BIT_INDEX)</computeroutput></para></section>
<anchor xml:id="__bit_math_8h_1a3fe3d800c392314d1ac462850a0a31c2"/><section>
    <title>WRT_BIT</title>
<indexterm><primary>WRT_BIT</primary><secondary>BitMath.h</secondary></indexterm>
<indexterm><primary>BitMath.h</primary><secondary>WRT_BIT</secondary></indexterm>
<para><computeroutput>#define WRT_BIT( REG,  BIT_INDEX,  VAL)&#160;&#160;&#160;REG = ((REG &amp; (~(1 &lt;&lt; BIT_INDEX))) | (VAL &lt;&lt; BIT_INDEX))</computeroutput></para></section>
</section>
</section>
